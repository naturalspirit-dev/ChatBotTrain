


## Version 5.2, 17th of October 2019

* Namespace support for MS SQL Server databases. This fixes a severe error making it impossible to CRUDify any SQL Server database that is not in the default namespace (_"dbo"_).

* New slot called __[strings.join]__ that allows you to join multiple strings together with a separating character.

* Better handling of folders when an SQL Server database is CRUDified, among other things, a separate folder for each namespace will be automatically created. Maintaining the namespace your database is already declared with.



## Version 5.3, 20th of October 2019

* Support for invoking async slots through __[slots.signal]__

* Displaying version number of core backend in the _"ping"_ endpoint.

* Started working on validators, to validate input. These can be found in the project magic.lambda.validators.



## Version 5.4

* Support for _"create"_ CRUD endpoints where the database table does _not_ implement some sort of automatically generated ID.

* Displaying the version of the backend in the frontend, but only if logged in as root.

* Logging warning to console if the _"auth secret"_ has not been changed from its default value.

* Allowing the frontend to override its backend URL, to support maintaining multiple backends form the same frontend dashboard.



## Version 5.5

* Fixing a bug that prevented _"limit"_ and _"offset"_ criteria to function.

* Fixing a bug that prevented limit and offset from working in MySQL CRUDified endpoints.

* Fixed an error with [wait.io.file.save] that didn't overwrite the existing file, if the existing file was longer than its new content.



## Version 5.5.1

* Fixed __[http.xxx]__ slots having missing IoC configuration, preventing it from working at all.

* Making sure we no longer return exception messages or stack trace if build mode is _"Release"_.
  Notice, we still return message and stack trace in _"Debug"_ mode, and we still log exceptions in Release.

* Added missing _"wait"_ slots for MySQL and MS SQL adapters, that will fix the _"Custom SQL"_ CRUDifier in the frontend.

* Added support for passing in [headers] in all the [http.xxx] rest invocation lambda slots.



## Version 5.5.2

* Fixed severe error that prevented Hyperlambda from being able to add response HTTP headers.

* Fixed error in crudifier scaffolding process that prevented MS SQL server from being able to accept complex query parameters.

* Added support for _"Cache-Control"_ HTTP header, to make backend communicate to frontend how many seconds some HTTP GET request 
  is considered _"fresh"_, before cache dictates a new HTTP roundtrip should be done.

* Fixed a bug in filtering your endpoints in the frontend.

* Significantly improved the UX of the Files component in the frontend.



## Version 5.5.3

* Fixed error in MySQL CRUDifier that prevented us form handling timestamp type of columns correctly.

* Changed the default connection database for MySQL from "sys" to "information_schema", since it's often more available regardless of user's permissions.

* Made table selector in CRUDifier larger, to accommodate for tables with longer names, trying to display entire table name.

* Fixed a severe error when serializing Datetime values to Hyperlambda.

* Updated entire project from .Net Core 2.2 to .Net Core 3

* Fixed several minor bugs



## Version 5.5.4

* Created Magic Scheduler. Notice, this is a BETA release of it, and the scheduler should _not_ be considered to be production ready quite yet.
  But for those wanting to try it out, it can be found in the menu of your dashboard under _"Scheduler"_.

* Fixed minor bugs in frontend, especially relating to checking if JWT token is expired or not, making sure user is never allowed access to the dashboard,
  unless the user is actually authenticated and authorized, with a JWT token that is not expired.



## Version 5.5.5

* Seriously refactored scheduler to allow for having multiple threads running concurrently, also implemented support for configuring
  max-threads, and a lot of other nifty changes and improvements to the scheduler.



## Version 5.5.6

* Implemented support for _"fire and forget"_ jobs in the scheduler that are not serialized, in addition to allowing the user to configure 
  the scheduler such that it can take a folder as a path to where it serializes its tasks, which prevents saving every job, whenever a new
  job is created. This should make the scheduler significantly faster if it is creating and deleting jobs frequently.

* Simplified the crudifier, and merging the MySQL and MS SQL Special implementations into one common files, to keep code DRY.

* Allowing for both [mysql.connect] and [mssql.connect] to be given an empty or null connection string, at which a default a permissive
  initial catalogue will be chosen, depending upon the database type.

* Making sure we don't overwrite existing modules as we create CRUD endpoints, but rather warning user that he needs to first delete
  any old modules with the same name/folder/filename.

* Support for overriding the _"module name"_ during the CRUDification process, to use a different folder name than the database table,
  which is default.

* Not displaying hidden operating system files (Unix style, starting with ".") when listing files, unless [display-hidden] is passed
  in to [io.files.list] as an argument with the value of true.

* Dynamically loading up all assemblies in AppDomain's root folder, which allows drag'n'drop of assemblies into Web app's folder
  in order to automatically have access to slots, without having to explicitly referencing types in assemblies.

* Support for uploading and downloading files in the Files module.

* Better protection of _"system files"_, by providing visual clues, and also preventing the user from accidentally deleting system files.

* Support for providing a filter to [vocabulary] that will only return slots starting with whatever was given as a filter condition.

* [slots.exist], [slots.signal] and [slots.get] can now take expressions.

* Making sure all validators are throwing exceptions if validation error occurs to prevent logic from proceding (more secure).

* Support for public and private caching of HTTP GET endpoints using Cache-Control HTTP header.

* Creating a warning that we return to client durin _"ping"_ invocation if installation is still using the default [magic.authenticate] slot.

* Made the filename optional in [io.files.move] and [io.files.copy], and if not given, uses the old filename, only updating the folder
  where the file can be found.

* Created a _"Setup authentication"_ wizard that allows the user to follow a wizard to create a secure database authentication system
  out of his Magic installation. Works with both MS SQL Server and MySQL, and the user can choose which authentication database type he
  or she wants to use.


### Updated modules for version 5.5.6

* magic.lambda.slots

* magic.lambda.mysql

* magic.lambda.mssql

* magic.lambda.validators

* magic.lambda.io

* magic.lambda.scheduler

* magic.lambda.library

* magic.lambda.io

* Magic itself, especially the _"/files/"_ folder is important to update.



## Version 5.5.7

* Getting authentication setup and crudifier to work with mssql data adapter.



## Version 5.5.8

* Support for filtering the results of the [slots.vocabulary] slot.

* Allowing for configuring appsettings.json if the database connection string is not correct during the setup process.

* Minor bugfixes in the frontend.

* Preventing [unwrap] from trying to evaluate values that are not expressions, to allow for easily evaluate hierarchies of
  "mixed values".

* Created a new slot called [reference] in magic.lambda, that will return a node by reference, as its value, to allow for
  passing around nodes by reference to other slots, etc.

* Created support for "transformers" and "injectors", as an addition to "validators". Transformers will somehow change an existing
  node's value upon POST and PUT, while "injectors" will inject a node without changing an existing node's value.


### Updated modules for version 5.5.8

* magic.lambda.slots

* magic.lambda

* magic - The main project (of course)



## Version 5.5.9

* Much better meta data in _"endpoints.get.hl"_ through the [endpoints.list] slot, allowing us to return much more high quality meta
  information to client, with the intention of allowing for automatically generating frontend grids, editors, etc.

* Support for explicitly stating whether or not crudification process should allow for files being overwritten or not.

* Correctly counting number of endpoints during generation process of HTTP REST endpoints.

* Support for zipping files directly unto the HTTP stream.


### Updated modules for version 5.5.9

* magic.endpoint

* magic.lambda.io



## Version 5.7.0

* Entirely new Angular frontend generator, plus minor bugfixings in literally every single plugin.

### Updated modules for version 5.7.0

_Every single module_


## Version 5.7.1

* Better support for default values in MySQL during crudification.

* Better file editor in dashboard, which allows for editing multiple files at the same time.

* Improved UI on endpoints menu in dashboard

* Fixed a severe error in the way frontend was generated, that prohibited (*ANY*) entity from being possible
  to update!

* Fixed a severe error during conversion of node's value, that would convert values that already had the correct type,
  resulting in errors.



## Version 5.7.2

* Significantly simplified the setup process



## Version 5.7.3

* Always returning datetime from server as ZULU time. This eliminates a whole range of problems, especially
  interacting with client-side libraries. Basically, this implies returning datetime objects as UTC times, appending
  a "Z" to it in the end, informing clients that this is UTC time.

* Created support for multiple endpoint scaffolders, and allowing the user to select one as he generates his frontend.
  Currently Magic only supports _one_ actual scaffolder, but basically and folder you create inside of _"/misc/templates/"_
  is assumed is a scaffolder accepting some sort of endpoints scaffolding input arguments. See the existing _"angular-default"_
  folder for an example.

* The default scaffolder now creates different types of Angular components, depending upon the type the server returns, such
  as for instance creating a checkbox for bool fields, a date time picker for date fields, etc. This allows you to override
  literally any aspect of the scaffolding process for individual columns, depending upon which type the endpoint returns,
  for a specific column.

* Seriously improved the scaffolder process of frontends. Notice, it's still to be considered immature technology, but now
  it will much more intelligently create your components, depending upon what endpoints you have.
  For instance, it will now only create edit/create form fields _only_ for input arguments to your POST/create endpoint,
  etc.

* Created support for overriding a lot more arguments during scaffolding, such as whether or not a specific column
  should be returned in the GET/read endpoint, etc. This allows you to finegrain the process of backend crudification
  much more, giving you more options to change your backend's behavior.
  Notice, by default _"automatic"_ (default value) columns will _not_ be considered as input arguments to your POST/PUT/create/update
  endpoints. But this behavior can now be overridden. And only primary keys will be considered input to delete endpoints, etc.

* More intelligently showing/hiding configuration options now during crudification, depending upon overridden settings, such
  as not showing _"input reactors"_ (validators, etc) unless either a POST or PUT endpoint is selected during crudification, etc.
  Also hiding the cache control setting, unless GET is selected during crudification process, etc.

* Better UI in the dashboard in general, such as emphasizing the most important (primary) button in most forms, etc.

* Also cleaned up dashboard code significantly. It's still not perfect, but it should be much easier to understand now
  than previously. Notice, more work still needs to be done here.

* Improved flow of crudifier process, making it more intuitive, and more difficult to do something wrong.

* Added descriptive text to most components, allowing the user to more easily understand how to interact with the
  different parts of the dashboard.

* Better typing support during crudification, such as supporting most common boolean MySQL types, etc. Some
  more work can still be done here, but this should create much better backend endpoints, with correct types,
  than previous versions.

* Allowing to override the _"default auth"_ during crudification, to set a default authorization role(s) setting,
  that is applied for instance during _"Crudify all"_. This allows you to override the default roles during crudification,
  such that you can crudify all tables, and still have different access roles than only _"root"_, which was the case previously.

* When a scaffolder template is selected, its associated README.md file is loaded and displayed as HTML, allowing
  scaffolder template creators (me mostly), to display some information about what the specific scaffolder template actually
  does, and also attach screenshots with it, to show the end user an example of how things might end up looking like.

* Support for file comment during frontend scaffolding process, to associate some comment with the end result, becoming
  a file comment, included in every single code file where multiline C comments are allowed (css files, typescript files, javascript files, etc).

* Improved structure of frontend scaffolder, by separating major jobs into separate files, and created support for much better
  templating system, to override resulting code, depending upon types etc.

* This is a _major update to Magic_, and you _will be amazed_! If you've tried Magic previously, but got stuck due to some
  sort of bug, annoyance, lack of feature - I would highly recommend you to try it out again. This is a _major_ upgrade to
  the Magic wand!

* Fixed many bugs. Hopefully not created too many new ones :)
