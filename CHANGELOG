


## Version 5.2, 17th of October 2019

* Namespace support for MS SQL Server databases. This fixes a severe error making it impossible to CRUDify any SQL Server database that is not in the default namespace (_"dbo"_).

* New slot called __[strings.join]__ that allows you to join multiple strings together with a separating character.

* Better handling of folders when an SQL Server database is CRUDified, among other things, a separate folder for each namespace will be automatically created. Maintaining the namespace your database is already declared with.



## Version 5.3, 20th of October 2019

* Support for invoking async slots through __[slots.signal]__

* Displaying version number of core backend in the _"ping"_ endpoint.

* Started working on validators, to validate input. These can be found in the project magic.lambda.validators.



## Version 5.4

* Support for _"create"_ CRUD endpoints where the database table does _not_ implement some sort of automatically generated ID.

* Displaying the version of the backend in the frontend, but only if logged in as root.

* Logging warning to console if the _"auth secret"_ has not been changed from its default value.

* Allowing the frontend to override its backend URL, to support maintaining multiple backends form the same frontend dashboard.



## Version 5.5

* Fixing a bug that prevented _"limit"_ and _"offset"_ criteria to function.

* Fixing a bug that prevented limit and offset from working in MySQL CRUDified endpoints.

* Fixed an error with [wait.io.file.save] that didn't overwrite the existing file, if the existing file was longer than its new content.



## Version 5.5.1

* Fixed __[http.xxx]__ slots having missing IoC configuration, preventing it from working at all.

* Making sure we no longer return exception messages or stack trace if build mode is _"Release"_.
  Notice, we still return message and stack trace in _"Debug"_ mode, and we still log exceptions in Release.

* Added missing _"wait"_ slots for MySQL and MS SQL adapters, that will fix the _"Custom SQL"_ CRUDifier in the frontend.

* Added support for passing in [headers] in all the [http.xxx] rest invocation lambda slots.



## Version 5.5.2

* Fixed severe error that prevented Hyperlambda from being able to add response HTTP headers.

* Fixed error in crudifier scaffolding process that prevented MS SQL server from being able to accept complex query parameters.

* Added support for _"Cache-Control"_ HTTP header, to make backend communicate to frontend how many seconds some HTTP GET request 
  is considered _"fresh"_, before cache dictates a new HTTP roundtrip should be done.

* Fixed a bug in filtering your endpoints in the frontend.

* Significantly improved the UX of the Files component in the frontend.



## Version 5.5.3

* Fixed error in MySQL CRUDifier that prevented us form handling timestamp type of columns correctly.

* Changed the default connection database for MySQL from "sys" to "information_schema", since it's often more available regardless of user's permissions.

* Made table selector in CRUDifier larger, to accommodate for tables with longer names, trying to display entire table name.

* Fixed a severe error when serializing Datetime values to Hyperlambda.

* Updated entire project from .Net Core 2.2 to .Net Core 3

* Fixed several minor bugs



## Version 5.5.4

* Created Magic Scheduler. Notice, this is a BETA release of it, and the scheduler should _not_ be considered to be production ready quite yet.
  But for those wanting to try it out, it can be found in the menu of your dashboard under _"Scheduler"_.

* Fixed minor bugs in frontend, especially relating to checking if JWT token is expired or not, making sure user is never allowed access to the dashboard,
  unless the user is actually authenticated and authorized, with a JWT token that is not expired.



## Version 5.5.5

* Seriously refactored scheduler to allow for having multiple threads running concurrently, also implemented support for configuring
  max-threads, and a lot of other nifty changes and improvements to the scheduler.



## Version 5.5.6

* Implemented support for _"fire and forget"_ jobs in the scheduler that are not serialized, in addition to allowing the user to configure 
  the scheduler such that it can take a folder as a path to where it serializes its tasks, which prevents saving every job, whenever a new
  job is created. This should make the scheduler significantly faster if it is creating and deleting jobs frequently.

* Simplified the crudifier, and merging the MySQL and MS SQL Special implementations into one common files, to keep code DRY.

* Allowing for both [mysql.connect] and [mssql.connect] to be given an empty or null connection string, at which a default a permissive
  initial catalogue will be chosen, depending upon the database type.

* Making sure we don't overwrite existing modules as we create CRUD endpoints, but rather warning user that he needs to first delete
  any old modules with the same name/folder/filename.

* Support for overriding the _"module name"_ during the CRUDification process, to use a different folder name than the database table,
  which is default.

* Not displaying hidden operating system files (Unix style, starting with ".") when listing files, unless [display-hidden] is passed
  in to [io.files.list] as an argument with the value of true.

* Dynamically loading up all assemblies in AppDomain's root folder, which allows drag'n'drop of assemblies into Web app's folder
  in order to automatically have access to slots, without having to explicitly referencing types in assemblies.

* Support for uploading and downloading files in the Files module.

* Better protection of _"system files"_, by providing visual clues, and also preventing the user from accidentally deleting system files.

* Support for providing a filter to [vocabulary] that will only return slots starting with whatever was given as a filter condition.

* [slots.exist], [slots.signal] and [slots.get] can now take expressions.

* Making sure all validators are throwing exceptions if validation error occurs to prevent logic from proceding (more secure).

* Support for public and private caching of HTTP GET endpoints using Cache-Control HTTP header.

* Creating a warning that we return to client durin _"ping"_ invocation if installation is still using the default [magic.authenticate] slot.

* Made the filename optional in [io.files.move] and [io.files.copy], and if not given, uses the old filename, only updating the folder
  where the file can be found.

* Created a _"Setup authentication"_ wizard that allows the user to follow a wizard to create a secure database authentication system
  out of his Magic installation. Works with both MS SQL Server and MySQL, and the user can choose which authentication database type he
  or she wants to use.


### Updated modules for version 5.5.6

* magic.lambda.slots

* magic.lambda.mysql

* magic.lambda.mssql

* magic.lambda.validators

* magic.lambda.io

* magic.lambda.scheduler

* magic.lambda.library

* magic.lambda.io

* Magic itself, especially the _"/files/"_ folder is important to update.



## Version 5.5.7

* Getting authentication setup and crudifier to work with mssql data adapter.



## Version 5.5.8

* Support for filtering the results of the [slots.vocabulary] slot.

* Started work on _"transformers"_, that allows to transform data supplied in through an HTTP endpoint to something else.
  Among other things, this will replace the existing _"BlowFish hash passwords"_ functionality, by providing a generic means
  of transforming some sort of input data, to something else - Especially for update and inserts, but also possibly (later)
  for read and delete invocations.


### Updated modules for version 5.5.8

* magic.lambda.slots
