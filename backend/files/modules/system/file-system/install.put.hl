
/*
 * Installs the specified module by executing its Hyperlambda startup scripts.
 */
.arguments
   folder:string
   app_version:string
.description:Installs the specified module by executing its Hyperlambda startup scripts


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Splitting up folder argument to ensure we're left only with module name.
 */
strings.split:x:@.arguments/*/folder
   .:/


/*
 * Installing module.
 */
unwrap:x:+/*
signal:magic.modules.install-module
   module:x:@strings.split/1


/*
 * Logging success.
 */
log.info
   .:"Module successfully installed, module name was '"
   get-value:x:@.arguments/*/folder
   .:"'"


/*
 * Creating our app's manifest.
 */
.manifest
strings.concat
   get-value:x:@.arguments/*/folder
   .:/manifest.hl
if
   io.file.exists:x:@strings.concat
   .lambda

      // App has a manifest, hence appending data to it instead of creating a new file entirely.
      io.file.load:x:@strings.concat
      hyper2lambda:x:@io.file.load
      add:x:@.manifest
         get-nodes:x:@hyper2lambda/*

      // Removing [version] node from manifest if it exists, since we'll add it according to arguments specified.
      remove-nodes:x:@.manifest/*/version


/*
 * Dynamically appending to/creating our manifest declaration.
 */
unwrap:x:+/*/*
add:x:@.manifest
   .
      version:x:@.arguments/*/version


/*
 * Adding username of user installing app.
 */
auth.ticket.get
unwrap:x:+/*/*
add:x:@.manifest
   .
      installed_by:x:@auth.ticket.get


/*
 * Adding installation date.
 */
date.now
unwrap:x:+/*/*
add:x:@.manifest
   .
      installed:x:@date.now


/*
 * Saving manifest file.
 */
io.file.save:x:@strings.concat
   lambda2hyper:x:@.manifest/*


/*
 * Returning result to caller.
 */
return-nodes
   result:success
