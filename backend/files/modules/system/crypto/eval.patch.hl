
/*
 * Evaluates a cryptographically signed HTTP REST invocation.
 */
.description:"Evaluates a cryptographically signed HTTP REST invocation."


/*
 * Retrieving signing key's fingerprint, for then to retrieve
 * the public key associated with the fingerprint.
 */
crypto.get-key:x:@.arguments/*/body
unwrap:x:+/*
signal:magic.crypto.get-public-key
   fingerprint:x:@crypto.get-key


/*
 * Verifying signature.
 */
try

   /*
    * Verifies signature, and also chops up payload.
    */
   crypto.verify:x:@.arguments/*/body
      public-key:x:@signal/*/public_key


   /*
    * Invoking Hyperlambda specified by caller.
    */
   add:x:./*/whitelist/*/.lambda
      hyper2lambda:x:@crypto.verify
   add:x:./*/whitelist/*/vocabulary
      get-nodes:x:@signal/*/vocabulary/*
   whitelist
      vocabulary
      .lambda

   /*
    * Figuring out how to return results to caller, defaulting to
    * simply "success".
    */
   .result:success
   if
      not
         eq
            get-value:x:@whitelist
            .
      .lambda
         set-value:x:@.result
            get-value:x:@whitelist
   else-if
      exists:x:@whitelist/*
      .lambda
         set-value:x:@.result
            lambda2hyper:x:@whitelist/*

   /*
    * Making sure we apply the correct HTTP header.
    */
   response.headers.add
      Content-Type:application/octet-stream

   /*
    * Signing result.
    */
   signal:magic.crypto.get-server-private-key
   crypto.sign:x:@.result
      raw:true
      signing-key:x:@signal/*/private-key
      signing-key-fingerprint:x:@signal/*/fingerprint
   return:x:@crypto.sign

.catch

   /*
    * Execution error occurred, or signing verification - Regardless,
    * making sure we return that fact to the caller, by throwing "intelligent"
    * exception, in addition to logging error locally.
    */
   log.info:x:@.arguments/*/message
   throw:Access denied
      public:true
      status:401
