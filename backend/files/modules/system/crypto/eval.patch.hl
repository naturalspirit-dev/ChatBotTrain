
/*
 * Evaluates a cryptographically signed HTTP REST invocation.
 */
.description:"Evaluates a cryptographically signed HTTP REST invocation."


/*
 * Making sure we communicate what type of content we can accept.
 */
.accept:application/octet-stream


/*
 * Retrieving signing key's fingerprint, for then to retrieve
 * the public key associated with the fingerprint.
 */
crypto.get-key:x:@.arguments/*/body
unwrap:x:+/*
signal:magic.crypto.get-public-key
   fingerprint:x:@crypto.get-key


/*
 * Verifying signature.
 */
try


   /*
    * Verifies signature, and also chops up payload.
    */
   crypto.verify:x:@.arguments/*/body
      public-key:x:@signal/*/public_key


   /*
    * Creating a stack object containing the key's fingerprint,
    * to allow the caller's code and referenced slots to retrieve
    * the fingerprint to uniquely identifying the caller.
    */
   context:fingerprint
      value:x:@crypto.get-key
      .lambda


         /*
          * Parametrising [whitelist] invocation, according to
          * arguments supplied by caller.
          */
         add:x:./*/whitelist/*/.lambda
            hyper2lambda:x:@crypto.verify
         add:x:./*/whitelist/*/vocabulary
            get-nodes:x:@signal/*/vocabulary/*


         /*
          * Invoking lambda object, now associated with a [vocabulary],
          * restricting the caller's access rights on the server.
          */
         whitelist
            vocabulary
            .lambda


         /*
          * Figuring out how to return results to caller, defaulting to
          * simply "success".
          */
         .result:success
         if
            not
               eq
                  get-value:x:@whitelist
                  .
            .lambda
               set-value:x:@.result
                  get-value:x:@whitelist
         else-if
            exists:x:@whitelist/*
            .lambda
               set-value:x:@.result
                  lambda2hyper:x:@whitelist/*


         /*
          * Making sure we apply the correct HTTP header.
          */
         response.headers.add
            Content-Type:application/octet-stream


         /*
          * Signing result.
          */
         signal:magic.crypto.get-server-private-key
         crypto.sign:x:@.result
            raw:true
            signing-key:x:@signal/*/private-key
            signing-key-fingerprint:x:@signal/*/fingerprint


         /*
          * Returning result of signing to caller, which will
          * return it as byte[] as our response.
          */
         return:x:@crypto.sign


.catch


   /*
    * Execution error occurred, or signing verification - Regardless,
    * making sure we return that fact to the caller, by throwing "intelligent"
    * exception, in addition to logging error locally.
    *
    * Notice, we return a "generic" error to make sure we don't supply
    * valuable information to malicious adversaries, trying to find out
    * valuable information about the system, in order to crack it.
    */
   log.error:x:@.arguments/*/message
   throw:Access denied
      public:true
      status:401
