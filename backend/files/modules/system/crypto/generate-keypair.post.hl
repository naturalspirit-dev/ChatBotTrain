
/*
 * Creates a new RSA key pair, with the specified parameters
 */
.description:"Creates a new server RSA key pair using the specified parameters. Notice, will backup any existing key pairs."
.arguments
   strength:int
   seed:string
auth.ticket.verify:root


/*
 * Checks to see if a key pair already exists.
 */
log.info:Attempting to generate an RSA key pair for server
if
   io.file.exists:/modules/system/crypto/keys/public-key.key
   .lambda

      /*
       * Creates a backup of the old key pair.
       */
      .public-key
      set-value:x:@.public-key
         io.file.load:/modules/system/crypto/keys/public-key.key
      .private-key
      set-value:x:@.private-key
         io.file.load:/modules/system/crypto/keys/private-key.key
      .fingerprint
      set-value:x:@.fingerprint
         crypto.fingerprint:x:@.public-key
      .public-key-filename
      set-value:x:@.public-key-filename
         strings.concat
            .:/modules/system/crypto/keys/public-key-
            get-value:x:@.fingerprint
            .:.key
      .private-key-filename
      set-value:x:@.private-key-filename
         strings.concat
            .:/modules/system/crypto/keys/private-key-
            get-value:x:@.fingerprint
            .:.key
      io.file.save:x:@.public-key-filename
         get-value:x:@.public-key
      io.file.save:x:@.private-key-filename
         get-value:x:@.private-key


/*
 * Creating our RSA key pair using the specified arguments.
 */
crypto.rsa.create-key
   strength:x:@.arguments/*/strength
   seed:x:@.arguments/*/seed


/*
 * Saving key(s) to disc.
 */
io.file.save:/modules/system/crypto/keys/public-key.key
   get-value:x:@crypto.rsa.create-key/*/public
io.file.save:/modules/system/crypto/keys/private-key.key
   get-value:x:@crypto.rsa.create-key/*/private


/*
 * Creating fingerprint, and doing some basic logging.
 */
crypto.hash:x:@crypto.rsa.create-key/*/public
   format:fingerprint
log.info
   .:"RSA key pair generated for server, fingerprint; '"
   get-value:x:@crypto.hash
   .:"'"


/*
 * Returning the public key, and its fingerprint to caller.
 */
unwrap:x:+/*
return
   fingerprint:x:@crypto.hash
   public-key:x:@crypto.rsa.create-key/*/public
