
/*
 * Creates a new JWT token based upon the existing JWT token.
 * Will throw unless user is already logged in.
 */
.description:@"Will return a 'refreshed' JWT token, with the same authorization as your previous token, assuming your existing token is not expired.
The new token will have a new expiration, allowing you to refresh your token, just before the old becomes expired."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify


/*
 * Verifying user has not been locked out since he logged in
 * or refreshed his ticket earlier.
 *
 * Without this step, user could just login, and refresh his
 * token for an eternity, without Magic having any capacity to
 * lock user out from backend.
 */
auth.ticket.get
data.connect:magic
   data.read
      table:users
      columns
         username
      where
         and
            username:x:@auth.ticket.get
            locked.neq:1
   if
      eq
         get-count:x:@data.read/*
         .:int:0
      .lambda
         throw:You've been locked out from Magic


/*
 * Invokes [auth.ticket.refresh] that does the heavy lifting, and creates our JWT token,
 * making sure we return that token to caller.
 */
auth.ticket.refresh


/*
 * Returns the authentication JWT ticket created above to caller.
 */
unwrap:x:+/*
return-nodes
   ticket:x:@auth.ticket.refresh