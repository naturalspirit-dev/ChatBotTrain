
/*
 * Authenticates the user with the specified [username] and [password] combination.
 *
 * NOTICE!
 * This is a "one size fits all" solution to the authentication issue in Magic,
 * and unless the JWT secret has been explicitly changed, it will just check
 * to see if the username/password combination is root/root. If the JWT secret
 * has been changed, it will check the 'magic' database to see if the username/password
 * combination is correct, using your default database type.
 */
slots.create:magic.auth.authenticate


   /*
    * Checking if JWT secret has been changed, and
    * if not, simply checking if username/password is
    * root/root.
    */
   config.get:"magic:auth:secret"
   if
      eq
         get-value:x:@config.get
         .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
      .lambda

         /*
          * System has not yet been setup.
          */
         if
            and
               eq
                  get-value:x:@.arguments/*/username
                  .:root
               eq
                  get-value:x:@.arguments/*/password
                  .:root
            .lambda

               // Success!
               auth.ticket.create
                  username:root
                  roles
                     .:root
               unwrap:x:+/*
               return
                  ticket:x:@auth.ticket.create
         else

            // Failure!
            throw:Access denied
               status:int:401
               public:bool:true


   /*
    * If we came this far, the system has been setup,
    * and we can check the 'magic' database to see if
    * the credentials the caller provided is correct.
    */


   /*
    * Logging the fact that user tries to login.
    *
    * Notice, if system has not been setup, we can't
    * create log items yet.
    */
   log.info
      .:"Trying to authenticate user '"
      get-value:x:@.arguments/*/username
      .:"'"


   /*
    * Opens up our database connection.
    */
   data.connect:magic


      /*
       * Selects the user with the given username from our table.
       */
      data.select:select password from users where username = @username
         @username:x:@.arguments/*/username


      /*
       * Checking that user with specified [username] exists.
       */
      if
         eq
            get-count:x:@data.select/*
            .:int:0
         .lambda


            /*
             * No such user.
             */
            throw:Access denied
               status:int:401
               public:bool:true


      /*
       * Verify we have a password match.
       */
      if
         crypto.password.verify:x:@.arguments/*/password
            hash:x:@data.select/*/*/password
         .lambda


            /*
             * Password is matching hashed value from database.
             * Now we need to select all roles user belongs to.
             */
            data.select:select role from users_roles where user = @username
               @username:x:@.arguments/*/username


            /*
             * Then we can create our JWT token/ticket.
             */
            add:x:+/*/roles
               get-nodes:x:@data.select/*/*
            auth.ticket.create
               username:x:@.arguments/*/username
               roles


            /*
             * Logging the fact that user successfully logged in.
             */
            log.info
               .:"We successfully authenticated user '"
               get-value:x:@.arguments/*/username
               .:"'"


            /*
             * Returning results back to caller.
             */
            unwrap:x:+/*
            return
               ticket:x:@auth.ticket.create
      else


         /*
          * Hash version of password didn't match.
          */
         throw:Access denied
            status:int:401
            public:bool:true
