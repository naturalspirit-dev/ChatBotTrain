
/*
 * Sets up authentication of system according to the arguments provided.
 */
.arguments
   databaseType:string
   rootUsername:string
   rootPassword:string
   scheduler:bool
.description:"Sets up authentication and other parts of the system according to the arguments provided."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Verifying that system haven't already been setup with some secure
 * authentication scheme previously.
 */
slots.get:magic.authenticate
if
   or
      not
         exists:x:@slots.get/*/.is-default-auth
      not
         eq
            get-value:x:@slots.get/*/.is-default-auth
            .:bool:true
   .lambda


      /*
       * This shouldn't really be possible, but for some reasons we ended
       * up here none the less.
       */
      throw:Your system has already been configured to use a secure authentication scheme


/*
 * Retrieving all database from specified database type.
 */
.database-exists:bool:false
strings.concat
   .:magic.db.
   get-value:x:@.arguments/*/databaseType
   .:.databases
signal:x:-


/*
 * Checking if magic was returned from above invocation.
 */
.exists:bool:false
for-each:x:@signal/*/*
   if
      eq
         get-value:x:@.dp/#
         .:magic
      .lambda
         set-value:x:@.exists
            .:bool:true
if
   not
      get-value:x:@.exists
   .lambda


      /*
       * Database does not exist.
       *
       * Evaluating SQL script that creates our database, but first we must dynamically
       * determine which script to execute.
       */
      strings.concat
         .:/misc/
         get-value:x:@.arguments/*/databaseType
         .:/magic.sql


      /*
       * Loading create database SQL script file, and replacing execution slots according
       * to which database type we're dealing with.
       */
      io.file.load:x:@strings.concat
      switch:x:@.arguments/*/databaseType

         /*
          * MySQL data adapter.
          */
         case:mysql
            set-value:x:@io.file.load
               strings.concat
                  .:"create database `magic`;use `magic`;"
                  get-value:x:@io.file.load

         /*
          * Microsoft SQL Server data adapter.
          */
         case:mssql
            set-value:x:@io.file.load
               strings.concat
                  .:@"use master;
create database [magic];
GO
use [magic];
"
                  get-value:x:@io.file.load


      /*
       * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
       * accommodate for "GO" statements and such.
       */
      .slot
      if
         eq
            get-value:x:@.arguments/*/databaseType
            .:mssql
         .lambda


            /*
             * MS SQL "batch" execute slot needed.
             */
            set-value:x:@.slot
               .:mssql.execute-batch


      else


         /*
          * Any other type of database.
          */
         set-value:x:@.slot
            strings.concat
               get-value:x:@.arguments/*/databaseType
               .:.execute


      /*
       * Changing names of slots now according to which slot we should
       * use to connect to database, and which slot we should use to 
       * execute SQL schema script.
       */
      set-name:x:../**/xxx.connect
         strings.concat
            get-value:x:@.arguments/*/databaseType
            .:.connect
      set-name:x:../**/xxx.execute
         get-value:x:@.slot


      /*
       * Executing create database SQL script.
       *
       * Notice, we do not connect to a specific database schema,
       * since we rely upon the default connection string, hooking us up to whatever
       * is the default, for whatever type of database we're currently connecting to.
       */
      xxx.connect
         xxx.execute:x:@io.file.load


else


   /*
    * Database already exists.
    */
   set-value:x:@.database-exists
      .:bool:true


/*
 * Trying to insert our root user.
 *
 * Notice, this will throw an exception if root user already exists.
 */
.user-exists:bool:false
try


   /*
    * Inserting the root user according to arguments given.
    */
   strings.concat
      .:/misc/
      get-value:x:@.arguments/*/databaseType
      .:/create-user.hl
   io.file.load:x:@strings.concat
   hyper2lambda:x:-
   unwrap:x:+/*/*
   add:x:@hyper2lambda/*/.arguments
      .
         username:x:@.arguments/*/rootUsername
         password:x:@.arguments/*/rootPassword
         roles
            .:root
   eval:x:@hyper2lambda

.catch


   /*
    * Need to store the fact that we need to change user's password further down in file.
    */
   if
      get-value:x:@.database-exists
      .lambda


         /*
          * Database already existed as we started out, implying
          * there was (probably) already a root user account in it
          * from before.
          */
         set-value:x:@.user-exists
            .:bool:true


/*
 * Now we have our auth database, and our initial root user, and we can start moving files around,
 * and modifying slots accordingly.
 *
 * First we start by moving our "authenticate" Hyperlambda file.
 */
io.file.copy:x:/misc/magic.authenticate.hl
   .:/modules/system/magic.startup/


/*
 * Copying the database specific "change-password" file.
 */
strings.concat
   .:/misc/
   get-value:x:@.arguments/*/databaseType
   .:/magic.change-password.hl
io.file.copy:x:-
   .:/modules/system/magic.startup/


/*
 * Evaluating new authentication file, to update our slot.
 */
io.file.execute:/modules/system/magic.startup/magic.authenticate.hl


/*
 * Evaluating "change-password" file, to create our slot.
 */
io.file.load:/modules/system/magic.startup/magic.change-password.hl
hyper2lambda:x:-
eval:x:@hyper2lambda


/*
 * Notice, if user already existed as we started out,
 * we need to change the password of the root user.
 */
if
   get-value:x:@.user-exists
   .lambda


      /*
       * Changing root user's password.
       */
      unwrap:x:+/*
      signal:magic.change-password
         password:x:@.arguments/*/rootPassword


/*
 * Checking if we should initialize task scheduler.
 */
if
   get-value:x:@.arguments/*/scheduler
   .lambda

      /*
       * Starting scheduler.
       */
      scheduler.start


/*
 * Invoking slot responsible for applying license, if it was explicitly given.
 */
license.apply


/*
 * Returning success to caller.
 */
log.info:System was successfully setup
return-nodes
   result:success
