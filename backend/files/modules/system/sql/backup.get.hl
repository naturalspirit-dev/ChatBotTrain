
/*
 * Creates a backup of the specified database.
 */
.arguments
   databaseType:string
   connectionString:string
   database:string
.description:Creates a backup of the specified database


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/database
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/connectionString
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:mssql


/*
 * Logging invocation.
 */
log.info
   .:"Creating a backup of database '"
   get-value:x:@.arguments/*/database
   .:"'"


/*
 * Retrieving all tables in specified database.
 */
set-value:x:../*/signal
   strings.concat
      .:magic.db.
      get-value:x:@.arguments/*/databaseType
      :.tables
unwrap:x:+/*
signal
   connection-string:x:@.arguments/*/connectionString
   database:x:@.arguments/*/database


/*
 * Creating a nice filename for our backup.
 */
date.now
date.format:x:-
   format:"yyyy-MM-dd-HH-mm-ss"


/*
 * Opening up our database connection.
 */
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/database
   .:]
data.connect:x:@.arguments/*/database
   database-type:x:@.arguments/*/databaseType


   /*
    * Looping through each table from above result and creating CSV content from its content.
    */
   for-each:x:@signal/*/*/table


      /*
       * Retrieving all records from currently iterated table.
       */
      data.read
         database-type:x:@.arguments/*/databaseType
         table:x:@.dp/#
         limit:-1


      /*
       * Creating CSV result from above result set.
       */
      lambda2csv:x:@data.read/*


      /*
       * Adding resulting CSV to returned ZIP stream invocation below.
       */
      strings.concat
         .:/backup-
         get-value:x:@.arguments/*/database
         .:-
         get-value:x:@date.format
         .:/
         get-value:x:@.dp/#
         .:.csv
      unwrap:x:+/*/**
      add:x:../*/io.content.zip-stream
         .
            .:x:@strings.concat
               .:x:@lambda2csv


      /*
       * Adding resulting Hyperlambda type information file to returned
       * ZIP stream invocation below.
       */
      strings.concat
         .:/backup-
         get-value:x:@.arguments/*/database
         .:-
         get-value:x:@date.format
         .:/
         get-value:x:@.dp/#
         .:.hl
      lambda2hyper:x:@lambda2csv/*
      unwrap:x:+/*/**
      add:x:../*/io.content.zip-stream
         .
            .:x:@strings.concat
               .:x:@lambda2hyper


/*
 * Making sure we get HTTP header applied correctly.
 */
strings.concat
   .:"attachment; filename=\"backup-"
   get-value:x:@.arguments/*/database
   .:-
   get-value:x:@date.format
   .:".zip\""
response.headers.add
   Content-Type:application/zip
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition


/*
 * Returning ZIP stream to caller.
 */
io.content.zip-stream
return-value:x:-
