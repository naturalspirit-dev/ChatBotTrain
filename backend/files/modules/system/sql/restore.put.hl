
/*
 * Restores a previously created backup of the specified database.
 */
.arguments
   databaseType:string
   connectionString:string
   database:string
   backupFile:string
.description:Restores a previously created backup of the specified database


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/database
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/backupFile
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:mssql


/*
 * Logging invocation.
 */
log.info
   .:"Restoring a backup of database ["
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/database
   .:"] from file '"
   get-value:x:@.arguments/*/backupFile
   .:"'"


/*
 * Unzipping file.
 */
io.file.unzip:x:@.arguments/*/backupFile


/*
 * Listing all files in unzipped folder.
 */
strings.split:x:@.arguments/*/backupFile
   .:.zip
strings.concat
   get-value:x:@strings.split/0
   .:/
io.file.list:x:@strings.concat


/*
 * Opening up our database connection.
 */
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/database
   .:]
data.connect:x:@strings.concat
   database-type:x:@.arguments/*/databaseType


   /*
    * Creating a database transaction, to make sure that unless backup is
    * restored completely, no changes are done to the database.
    */
   data.transaction.create
      database-type:x:@.arguments/*/databaseType


      /*
       * Making sure we add all files into [.lambda] object below.
       */
      add:x:./*/signal/**/.files
         get-nodes:x:@io.file.list/*


      /*
       * Deleting all records in all tables in currently open database.
       *
       * Passing in lambda object to be executed in between dropping and
       * re-creating foreign key checks.
       */
      strings.concat
         .:magic.db.
         get-value:x:@.arguments/*/databaseType
         .:.truncate
      signal:x:-
         .lambda


            /*
             * Iterating through each unzipped file in folder.
             */
            .files
            for-each:x:@.files/*


               /*
                * Converting file from CSV to lambda.
                */
               io.file.load:x:@.dp/#
               csv2lambda:x:@io.file.load


               /*
                * Figuring out table name.
                */
               strings.split:x:@.dp/#
                  .:/
               strings.split:x:@strings.split/0/-
                  .:.csv


               /*
                * Looping through each CSV record from above, and inserting into table.
                */
               for-each:x:@csv2lambda/*


                  /*
                   * Inserting currrently iterated record into table.
                   */
                  add:x:./*/data.create/*/values
                     get-nodes:x:@.dp/#/*
                  data.create
                     database-type:x:@.arguments/*/databaseType
                     table:x:@strings.split/0
                     values


      /*
       * Committing transation.
       */
      data.transaction.commit
         database-type:x:@.arguments/*/databaseType


/*
 * Returning success to caller.
 */
return-nodes
   result:success
