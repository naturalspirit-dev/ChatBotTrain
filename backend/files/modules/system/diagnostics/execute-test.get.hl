
/*
 * Executes the specified test and returns result to caller.
 */
.description:Executes the specified test and returns the result
.arguments
   root_url:string
   test_file:string


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/root_url
validators.mandatory:x:@.arguments/*/test_file


/*
 * Loading assumption test Hyperlambda file,
 * and converting Hyperlambda to lambda.
 */
io.file.load:x:@.arguments/*/test_file
hyper2lambda:x:-


/*
 * Retrieving Authorization header used to invoke current endpoint,
 * and forwarding it into invocation towards assumption test.
 */
request.headers.get:Authorization


/*
 * Adding [payload] if assumption test declares it, and
 * making sure we declare the correct Content-Type HTTP header,
 * if assumption test declares a payload.
 */
if
   exists:x:@hyper2lambda/*/payload
   .lambda
      add:x:../*/http.xxx
         get-nodes:x:@hyper2lambda/*/payload
      add:x:../*/http.xxx/*/headers
         .
            Content-Type:application/json


/*
 * Making sure we use the correct HTTP verb.
 */
strings.concat
   get-value:x:@.arguments/*/root_url
   get-value:x:@hyper2lambda/*/url
set-name:x:../*/http.xxx
   strings.concat
      .:http.
      get-value:x:@hyper2lambda/*/verb


/*
 * Invoking assumption test.
 */
http.xxx:x:@strings.concat
   headers
      Authorization:x:@request.headers.get
.foo


/*
 * Making sure assumptions and reality overlaps.
 *
 * First we check HTTP status code, and verifies it's correct.
 */
if
   not
      eq
         get-value:x:@.foo/-
         get-value:x:@hyper2lambda/*/status
   .lambda

      /*
       * Assumption failed!
       *
       * Status code was not as assumed.
       */
      strings.concat
         .:"Assumption test failed, test file: "
         get-value:x:@.arguments/*/test_file
         .:"\r\nError: Wrong status code returned.\r\n\r\nAssumption: "
         get-value:x:@hyper2lambda/*/status
         .:"\r\nActual: "
         get-value:x:@.foo/-
      log.error:x:@strings.concat
      unwrap:x:+/*
      return
         result:x:@strings.concat


/*
 * Checking if test assumes response equality, and if it does,
 * we make sure assumption about response value is correct.
 */
if
   exists:x:@hyper2lambda/*/response
   .lambda

      /*
       * Assumption and reality nodes, which are later compared to sanity
       * check invocation.
       */
      .response
      .assumption

      /*
       * Checking if response type is assumed to be JSON, and if so,
       * making sure we make formatting irrelevant before we compare assumption
       * with reality.
       *
       * Notice, JSON is default assumption about Content-Type returned by
       * invocation.
       */
      if
         or
            not
               exists:x:@hyper2lambda/*/produces
            eq
               get-value:x:@hyper2lambda/*/produces
               .:application/json
         .lambda

            /*
             * Making sure JSON formatting becomes irrelevant.
             */
            json2lambda:x:@.foo/-/*/content
            set-value:x:@.response
               lambda2json:x:@json2lambda/*
                  format:true
            json2lambda:x:@hyper2lambda/*/response
            set-value:x:@.assumption
               lambda2json:x:@json2lambda/*
                  format:true
      else

         /*
          * Assigning reality and assumption to comparison values.
          */
         set-value:x:@.response
            get-value:x:@.foo/-/*/content
         set-value:x:@.assumption
            get-value:x:@hyper2lambda/*/response


      /*
       * Making sure assumptions and reality overlaps.
       */
      if
         not
            eq
               get-value:x:@.response
               get-value:x:@.assumption
         .lambda

            /*
             * Assumption failed!
             *
             * Response was assumed to be an exact match, and it was not.
             */
            strings.concat
               .:"Assumption test failed, test file: "
               get-value:x:@.arguments/*/test_file
               .:"\r\nError: Wrong response returned\r\n\r\nAssumption: "
               get-value:x:@.assumption
               .:"\r\nActual: "
               get-value:x:@.response
            log.error:x:@strings.concat
            unwrap:x:+/*
            return
               result:x:@strings.concat


/*
 * Logging the fact that test succeeded.
 */
strings.concat
   .:"Assumption test succeeded. Test file: "
   get-value:x:@.arguments/*/test_file
log.info:x:@strings.concat


/*
 * Returns success to caller.
 */
return
   result:success
