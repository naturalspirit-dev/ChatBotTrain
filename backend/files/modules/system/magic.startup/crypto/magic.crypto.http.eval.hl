
/*
 * Allows you to invoke an HTTP REST GET method on another server,
 * cryptographically signing your payload before it's sent, with your
 * server's private key.
 *
 * Arguments.
 *
 * - [url] - The URL of your invocation
 * - [.lambda] - The lambda object to evaluate at the other side
 */
slots.create:magic.crypto.http.eval


   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/.lambda
   validators.url:x:@.arguments/*/url


   /*
    * Loading server private key since we'll need to sign the payload,
    * and the fingerprint for its associated public key.
    */
   signal:magic.crypto.get-server-private-key


   /*
    * Creating Hyperlambda payload, and signing
    * the message with our private key.
    */
   lambda2hyper:x:@.arguments/*/.lambda/*
   crypto.sign:x:@lambda2hyper
      raw:true
      signing-key:x:@signal/*/private-key
      signing-key-fingerprint:x:@signal/*/fingerprint


   /*
    * Invoking HTTP REST endpoint with signed payload.
    */
   http.patch:x:@.arguments/*/url
      headers
         Content-Type:application/octet-stream
      payload:x:@crypto.sign


   /*
    * Retrieving signing key's fingerprint, for then to retrieve
    * the public key associated with the fingerprint.
    */
   crypto.get-key:x:@http.patch/*/content
   unwrap:x:+/*
   signal:magic.crypto.get-public-key
      fingerprint:x:@crypto.get-key


   /*
    * Verifying signature of response, and making sure it
    * originated from the correct domain.
    */
   crypto.verify:x:@http.patch/*/content
      public-key:x:@signal/*/public_key
   if
      not
         or
            strings.starts-with:x:@.arguments/*/url
               strings.concat
                  .:"https://"
                  get-value:x:@signal/*/domain
            strings.starts-with:x:@.arguments/*/url
               strings.concat
                  .:"http://"
                  get-value:x:@signal/*/domain
      .lambda
         throw:Response payload was not signed by public key associated with domain


   /*
    * Returning result to caller.
    */
   unwrap:x:./*/return
   unwrap:x:./*/return/*/content
   add:x:./*/return/*/headers
      get-nodes:x:@http.patch/*/headers/*
   return:x:@http.patch
      headers
      content:x:@crypto.verify
