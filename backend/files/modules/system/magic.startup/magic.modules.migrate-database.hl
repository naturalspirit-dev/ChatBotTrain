
/*
 * Helper slot to migrate any particular [module] app's database by executing
 * all migration scripts existing within module's "db-migrations" folder.
 *
 * Arguments
 *
 * - [module] - Module's name and root folder.
 * - [database] - Module's database, and connection string reference.
 *
 * The slot assumes the module is created according to the same structure, having
 * a 'db-migrations' folder inside of its 'magic.startup' folder, containing SQL
 * files that upgrades the module's database.
 */
slots.create:magic.modules.migrate-database

   /*
    * Sanity checks invocation.
    */
   validators.mandatory:x:@.arguments/*/module
   validators.mandatory:x:@.arguments/*/database

   /*
    * Figuring out folder from where to read migration scripts.
    */
   .migration-script-folder
   config.get:"magic:databases:default"
   set-value:x:@.migration-script-folder
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/magic.startup/db-migrations/
         get-value:x:@config.get
         .:/

   /*
    * Making sure module has a migration script folder, and if not,
    * returning early.
    */
   if
      not
         io.folder.exists:x:@.migration-script-folder
      .lambda

         /*
          * Module doesn't have a migration script folder.
          */
         return:bool:true

   /*
    * Boolean used to store whether or not ALL migration scripts successfully executed.
    */
   .result:bool:true

   /*
    * Iterating through each SQL script found in folder.
    */
   io.file.list:x:@.migration-script-folder
   for-each:x:@io.file.list/*

      /*
       * Verifying file is an SQL file.
       */
      if
         strings.ends-with:x:@.dp/#
            .:.sql
         .lambda

            /*
             * Loading SQL migration script file.
             */
            io.file.load:x:@.dp/#

            /*
             * Executing file, making sure we trap exceptions.
             */
            try

               /*
                * Opening database connection.
                */
               data.connect:x:@.arguments/*/database

                  /*
                   * Special case for MS SQL to make sure we use batch execute.
                   */
                  if
                     eq
                        get-value:x:@config.get
                        .:mssql
                     .lambda

                        /*
                         * SQL server, ensuring we use batch execute.
                         */
                        set-name:x:@data.connect/*/data.execute
                           .:mssql.execute-batch

                  /*
                   * Executing SQL script now.
                   */
                  data.execute:x:@io.file.load

            .catch

               /*
                * Logging exception.
                */
               log.error
                  .:"Something went wrong as we tried to execute plugin database migration script with the name of '"
                  get-value:x:@.dp/#
                  .:"'.\r\n\r\nMessage from system was '"
                  get-value:x:@.arguments/*/message
                  .:"'"

               /*
                * Ensuring slot returns false.
                */
               set-value:x:@.result
                  .:bool:false

   /*
    * Returning result to caller.
    */
   return-value:x:@.result
