
/*
 * This file will setup your system, changing its default JWT secret,
 * create the magic database, and insert a root user - Unless the
 * database, and/or root user exists from before.
 *
 * Notice, if the root user exists from before, this file will change
 * its password - However, you cannot setup the system twice, unless you
 * manually change the JWT secret to its default value, which
 * is 'THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT'.
 */
.arguments
   databaseType:string
   password:string
   settings:string
.description:"Sets up authentication and other parts of the system according to the arguments provided."


/*
 * Sanity checks invocation.
 */
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:mssql


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Checking if JWT secret has been changed, and
 * if is has, we throw an exception, to prevent the
 * system from being setup again, overriding the default
 * setup configuration.
 */
config.get:"magic:auth:secret"
if
   not
      eq
         get-value:x:@config.get
         .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
   .lambda

      // System has been setup before
      throw:"Your system has already been setup. If you wish to set it up again, please set your 'magic:auth:secret' key to 'THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT' manually in your 'appsettings.json' file."


/*
 * Retrieving all databases from selected database type,
 * to see if 'magic' database has previously been created.
 *
 * If not, we create the 'magic' database using the specialised
 * schema declaration SQL file for the database type, and we later
 * insert a default user into its 'user' table.
 */
strings.concat
   .:magic.db.
   get-value:x:@.arguments/*/databaseType
   .:.databases
signal:x:-


/*
 * Checking if magic was returned from above invocation.
 */
if
   not
      exists:x:@signal/*/*/=magic
   .lambda


      /*
       * Database does not exist.
       *
       * Evaluating SQL script that creates our database, but first we must dynamically
       * determine which script to execute.
       */
      strings.concat
         .:/misc/
         get-value:x:@.arguments/*/databaseType
         .:/magic.sql


      /*
       * Loading create database SQL script file, and replacing execution slots according
       * to which database type we're dealing with.
       */
      io.file.load:x:@strings.concat


      /*
       * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
       * accommodate for "go" statements and such.
       */
      switch:x:@.arguments/*/databaseType

         /*
          * Special case for MS SQL, to execute "batch" slot.
          */
         case:mssql

            set-name:x:./././*/xxx.connect/*/xxx.execute
               .:mssql.execute-batch


         /*
          * Anything but MS SQL.
          */
         default

            set-name:x:./././*/xxx.connect/*/xxx.execute
               strings.concat
                  get-value:x:@.arguments/*/databaseType
                  .:.execute


      /*
       * Modifying the connect slot according to database type specified.
       */
      set-name:x:./*/xxx.connect
         strings.concat
            get-value:x:@.arguments/*/databaseType
            .:.connect


      /*
       * Executing create database SQL script.
       */
      xxx.connect
         xxx.execute:x:@io.file.load


      /*
       * Inserting root user.
       */
      unwrap:x:+/*
      signal:magic.auth.create-user
         username:root
         password:x:@.arguments/*/password
         database-type:x:@.arguments/*/databaseType
         roles
            .:root


else


   /*
    * Database already exists, so we simply change root user's password
    * according to arguments specified.
    */
   unwrap:x:+/*
   signal:magic.auth.change-password
      password:x:@.arguments/*/password
      database-type:x:@.arguments/*/databaseType


/*
 * Saving settings to appsettings.json file.
 *
 * Notice, this is done as the final step, since it
 * will invalidate user's JWT token, and hence user
 * needs to authenticate again.
 */
json2lambda:x:@.arguments/*/settings
set-value:x:@json2lambda/*/magic/*/databases/*/default
   get-value:x:@.arguments/*/databaseType
lambda2json:x:@json2lambda/*
   format:true
config.save:x:-


/*
 * Sleeping for 2 seconds to allow configuration to kick
 * in on thread pools threads.
 */
sleep:2000


/*
 * Invoking slot responsible for applying license.
 *
 * Notice, this will only apply the license if it's not
 * the default version, which is 'TRIAL-VERSION'.
 */
license.apply


/*
 * Logging the fact that system was setup.
 */
log.info:System was successfully setup


/*
 * Starting scheduler.
 */
scheduler.start


/*
 * Authenticating user and returning new JWT token to client.
 */
unwrap:x:+/*
signal:magic.auth.authenticate
   username:root
   password:x:@.arguments/*/password


/*
 * Returns the authentication JWT ticket created above to caller.
 */
return-nodes:x:@signal/*
