
/*
 * Saves a license specified by caller.
 */
.description:Saves the specified license
.arguments
   license:string


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Loads the configuration, changes the current license, and saves it again.
 */
config.load
json2lambda:x:-
set-value:x:@json2lambda/*/magic/*/license
   get-value:x:@.arguments/*/license
lambda2json:x:@json2lambda/*
   format:true
config.save:x:@lambda2json


/*
 * Invoking slot responsible for applying license, if it was explicitly given,
 * making sure we give the above save invocation some time to finish up.
 *
 * By sleeping here, we make sure the configuration is updated before proceeding,
 * otherwise [license.apply] might for some reasons end up using the old configuration,
 * due to thread synchronization issues in .Net Core runtime.
 */
sleep:2000


/*
 * If [license.apply] fails, it implies we were given a bogus license, at which point
 * we reset the license configuration value back to its original value, to prevent
 * Magic from completely collapsing, and stop working.
 */
try
   license.apply
.catch
   /*
    * Resetting license information to whatever it previously was,
    * and returning information back to caller.
    */
   config.save:x:@config.load
   response.status.set:400
   return
      result:Failure! License is not a valid license!


/*
 * Returning success to calller.
 */
return
   result:success
