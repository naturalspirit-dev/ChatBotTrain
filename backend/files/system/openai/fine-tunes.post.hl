
/*
 * Fine tunes your OpenAI account, allowing you to train it using JSONL data.
 */
.arguments
   content:string
.description:Uploads training data to your OpenAI account, and starts training the model using the provided data

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/content

/*
 * Creating our Bearer token by reading our OpenAI
 * configuration settings.
 */
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:openai:key"
   
// Uploading file to OpenAI.
http.post:"https://api.openai.com/v1/files"
   headers
      Authorization:x:@.token
      Content-Type:multipart/form-data
   payload
      entity:application/jsonl
         headers
            Content-Disposition:"attachment; name=file; filename=\"training.jsonl\""
         content:x:@.arguments/*/content
      entity:text/plain
         headers
            Content-Disposition:"form-data; name=purpose"
         content:fine-tune
   convert:true


// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

/*
 * Using uploaded file to create a fine tuning.
 * First getting the ID of the file as stored in OpenAI's servers.
 */
.id
set-value:x:@.id
   get-value:x:@http.post/*/content/*/id

// Getting base model to use.
.model
set-value:x:@.model
   config.get:"magic:openai:model"

// Starting training session.
http.post:"https://api.openai.com/v1/fine-tunes"
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload
      training_file:x:@.id
      model:x:@.model
      suffix:hyperlambda
   convert:true

// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

// Storing fine tuned model.
lambda2hyper:x:../*
log.info:x:-

// Returning success to caller.
return
   result:success
