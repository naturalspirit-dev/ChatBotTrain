
/*
 * Fine tunes your OpenAI account, allowing you to train it using JSONL data.
 */
.arguments
   file
      file:string
      stream:*
   model:string
   suffix:string
.accept:multipart/form-data
.description:Uploads a file to your OpenAI account, such as for instance a training file, etc

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/suffix
validators.regex:x:@.arguments/*/suffix
   regex:^[a-z0-9-_]{5,100}$

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/model
validators.enum:x:@.arguments/*/model
   .:ada
   .:babbage
   .:curie
   .:davinci
   .:text-davinci-003
   .:text-curie-001
   .:text-babbage-001
   .:text-ada-001
   .:code-davinci-002
   .:code-cushman-001

// Reading input stream.
io.stream.read:x:@.arguments/*/file/*/stream

/*
 * Creating our Bearer token by reading our OpenAI
 * configuration settings.
 */
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:openai:key"
   
// Creating our Content-Disposition HTTP header.
.disposition
set-value:x:@.disposition
   strings.concat
      .:"attachment; filename=\""
      get-value:x:@.arguments/*/file/*/file
      .:"\";"
      .:" purpose=\"fine-tune\";"

// Uploading file to OpenAI.
http.post:"https://api.openai.com/v1/files"
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload:x:@io.stream.read
   convert:true


// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

/*
 * Using uploaded file to create a fine tuning.
 * First getting the ID of the file as stored in OpenAI's servers.
 */
.id
set-value:x:@.id
   get-value:x:@http.post/*/content/*/id

// Starting training session.
http.post:"https://api.openai.com/v1/fine-tunes"
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload
      training_file:x:@.id
      model:x:@.arguments/*/model

// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

// Returning success to caller.
return
   result:success
