
/*
 * Imports the specified page as training data by scraping its content.
 */
.arguments
   url:string
   flavor:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.url:x:@.arguments/*/url

// Doing some basic logging.
log.info:Crawling URL to generate OpenAI training data for a chatbot
   url:x:@.arguments/*/url
   flavor:x:@.arguments/*/flavor

// Making sure we trap exceptions.
try

   // Informing client that we've successfully started crawling.
   strings.concat
      .:"Crawling website "
      get-value:x:@.arguments/*/url
   unwrap:x:+/*/args/**
   sockets.signal:magic.backend.chatbot
      roles:root
      args
         message:x:@strings.concat
         type:info

   // Figuring out what to name our type.
   .type
   set-value:x:@.type
      strings.replace:x:@.arguments/*/url
         .:"http://"
         .:
   set-value:x:@.type
      strings.replace:x:@.type
         .:"https://"
         .:
   set-value:x:@.type
      strings.replace:x:@.type
         .:"."
         .:_

   // Creating our type
   data.connect:[generic|magic]

      // Checking if type already exists.
      data.read
         table:ml_types
         columns
            type
         where
            and
               type.eq:x:@.type
      if
         exists:x:@data.read/*
         .lambda
            throw:Model already exists!

      // Verifying user can create a-(nother) machine learning model.
      try-signal:magic.ai.can-create-machine-learning-model

      // Creating our type.
      data.create
         table:ml_types
         values
            type:x:@.type
            model:gpt-3.5-turbo
            max_tokens:int:500
            max_context_tokens:int:1000
            max_request_tokens:int:100
            temperature:decimal:0.3
            recaptcha:decimal:0.3
            supervised:int:0
            cached:int:0
            use_embeddings:int:1
            threshold:decimal:0.8
            vector_model:text-embedding-ada-002
            prefix:x:@.arguments/*/flavor
            greeting:Hi there, how can I help you?

      // Creating our default training snippets.
      data.create
         table:ml_training_snippets
         values
            type:x:@.type
            prompt:Who created this ChatGPT website chatbot?
            completion:@"This chatbot is a custom ChatGPT chatbot allowing you to use natural language to ask questions related to the website you're currently visiting. It was created by [AISTA](https://aista.com). AISTA have ChatGPT solutions allowing you to scrape your website, upload document, and create publicly available ChatGPT-based chatbots and AI Based search similar to Bing, in addition to AI Expert Systems providing cognitive assistance."
            uri:"https://aista.com"
      data.create
         table:ml_training_snippets
         values
            type:x:@.type
            prompt:Can I have a similar ChatGPT chatbot on my own website?
            completion:@"Yes you can. Visit [AISTA](https://aista.com) and contact them for a quote for your own ChatGPT chatbot, or use their DIY version. This allows you to scrape your website, or upload files to create your own chatbot based upon ChatGPT answering questions the way you want it to answer questions."
            uri:"https://aista.com"

   // Invoking slot doing the heavy lifting
   add:x:./*/signal
      get-nodes:x:@.arguments/*
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/type
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.type
   signal:magic.ai.crawl-site
      delay:int:1000
      max:int:1250
      threshold:int:150
      type:x:@.type
      .onafter
         .type:x:@.type
         unwrap:x:+/*
         signal:magic.ai.vectorise
            type:x:@.type

   // Returning success to caller.
   unwrap:x:+/*
   return
      result:x:@.type

.catch

   // Signaling frontend.
   unwrap:x:+/*/args/**
   sockets.signal:magic.backend.chatbot
      roles:root
      args
         message:x:@.arguments/*/message
         type:error

   // Returning failure to caller.
   response.status.set:400
   return
      result:failure
