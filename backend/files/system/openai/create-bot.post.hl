
/*
 * Imports the specified page as training data by scraping its content.
 */
.arguments
   url:string
   flavor:string
   max:int
   autocrawl:bool

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Prepending scheme unless given.
if
   not
      strings.starts-with:x:@.arguments/*/url
         .:"http"
   .lambda
      set-value:x:@.arguments/*/url
         strings.concat
            .:"https://"
            get-value:x:@.arguments/*/url

// Trimming extra slash.
set-value:x:@.arguments/*/url
   strings.trim-end:x:@.arguments/*/url
      .:/

// Making sure URL does not contain CAPS characters.
set-value:x:@.arguments/*/url
   strings.to-lower:x:@.arguments/*/url

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.url:x:@.arguments/*/url

// Defaulting max snippets to 1,250 unless specified explicitly.
validators.default:x:@.arguments
   max:int:1250
   autocrawl:bool:false

// Doing some basic logging.
log.info:Crawling URL to generate OpenAI training data for a chatbot
   url:x:@.arguments/*/url
   flavor:x:@.arguments/*/flavor

// Making sure we trap exceptions.
try

   // Informing client that we've successfully started crawling.
   strings.concat
      .:"Crawling website "
      get-value:x:@.arguments/*/url
   unwrap:x:+/*/args/**
   sockets.signal:magic.backend.chatbot
      roles:root
      args
         message:x:@strings.concat
         type:info

   // Figuring out what to name our type.
   .type
   set-value:x:@.type
      strings.replace:x:@.arguments/*/url
         .:"http://"
         .:
   set-value:x:@.type
      strings.replace:x:@.type
         .:"https://"
         .:
   set-value:x:@.type
      strings.replace:x:@.type
         .:"."
         .:_

   // Creating our type
   data.connect:[generic|magic]

      // Checking if type already exists.
      data.read
         table:ml_types
         columns
            type
         where
            and
               type.eq:x:@.type
      if
         exists:x:@data.read/*
         .lambda
            throw:Model already exists!

      // Verifying user can create a-(nother) machine learning model.
      try-signal:magic.ai.can-create-machine-learning-model

      // Adding URL if [autocrawl] is true.
      if:x:@.arguments/*/autocrawl
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.create/[0,1]/*/values
            .
               base_url:x:@.arguments/*/url

      // Creating our type.
      data.create
         table:ml_types
         values
            type:x:@.type
            model:gpt-3.5-turbo
            max_tokens:int:500
            max_context_tokens:int:2000
            max_request_tokens:int:100
            temperature:decimal:0.3
            recaptcha:decimal:0.3
            supervised:int:1
            cached:int:0
            use_embeddings:int:1
            threshold:decimal:0.75
            vector_model:text-embedding-ada-002
            prefix:x:@.arguments/*/flavor
            greeting:Hi there, how can I help you?

      // Creating our default training snippets.
      data.create
         table:ml_training_snippets
         values
            type:x:@.type
            prompt:Who created this ChatGPT website chatbot?
            completion:@"This chatbot is a custom ChatGPT chatbot allowing you to use natural language to ask questions related to the website you're currently visiting. It was created by [AINIRO.IO](https://ainiro.io). AINIRO have ChatGPT solutions allowing you to scrape your website, upload document, and create publicly available ChatGPT-based chatbots and AI Based search similar to Bing, in addition to AI Expert Systems providing cognitive assistance."
            uri:"https://ainiro.io"

   // Invoking slot doing the heavy lifting
   request.host
   add:x:./*/signal
      get-nodes:x:@.arguments/*
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/type
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.type
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.url
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.host
   signal:magic.ai.crawl-site
      delay:int:1000
      threshold:int:150
      summarize:bool:true
      type:x:@.type
      .onafter

         // Forward evaluated further up.
         .type:x:@.type
         .url:x:@.arguments/*/url
         .host:x:@request.host

         // Creating landing page.
         unwrap:x:+/*
         signal:magic.ai.create-landing-page
            url:x:@.url
            type:x:@.type
            host:x:@.host

         // Vectorising training data.
         unwrap:x:+/*
         signal:magic.ai.vectorise
            type:x:@.type
            host:x:@.host

   // Returning success to caller.
   unwrap:x:+/*
   return
      result:x:@.type

.catch

   // Signaling frontend.
   unwrap:x:+/*/args/**
   sockets.signal:magic.backend.chatbot
      roles:root
      args
         message:x:@.arguments/*/message
         type:error

   // Returning failure to caller.
   response.status.set:400
   return
      result:failure
