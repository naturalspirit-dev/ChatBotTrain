
// Returns the specified CSS file to caller.
.arguments
   file:string

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file

// Checking if custom CSS file exists.
.result
strings.concat
   .:/etc/system/openai/css/
   get-value:x:@.arguments/*/file
   .:.css
if
   io.file.exists:x:@strings.concat
   .lambda

      // Custom template file.
      set-value:x:@.result
         io.file.load:x:@strings.concat

else

   //Checking if system CSS file exists.
   strings.concat
      .:/system/openai/front.files/common/
      get-value:x:@.arguments/*/file
      .:.css
   if
      io.file.exists:x:@strings.concat
      .lambda

         // Generic template file.
         set-value:x:@.result
            io.file.load:x:@strings.concat

   else

      // Oops, no such file exists.
      throw:No such AI chat template file exists
         public:bool:true
         status:400

// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Replacing URL in CSS file if existing.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:text/css
   Cache-Control:public, max-age=600

// Returning result to caller.
return:x:@.result
