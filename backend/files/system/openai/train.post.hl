
/*
 * Fine tunes your OpenAI account, allowing you to train it using JSONL data.
 */
.arguments
   content:string
.description:Uploads training data to your OpenAI account, and starts training the model using the provided data

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/content

/*
 * Creating our Bearer token by reading our OpenAI
 * configuration settings.
 */
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:openai:key"

// Creating a unique training data filename.
.filename
set-value:x:@.filename
   strings.concat
      .:"attachment; name=file; filename=\"training-file-"
      guid.new
      .:".jsonl"
      .:"\""
   
// Uploading file to OpenAI.
http.post:"https://api.openai.com/v1/files"
   headers
      Authorization:x:@.token
      Content-Type:multipart/form-data
   payload
      entity:application/jsonl
         headers
            Content-Disposition:x:@.filename
         content:x:@.arguments/*/content
      entity:text/plain
         headers
            Content-Disposition:"form-data; name=purpose"
         content:fine-tune
   convert:true


// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

/*
 * Using uploaded file to create a fine tuning.
 * First getting the ID of the file as stored in OpenAI's servers.
 */
.id
set-value:x:@.id
   get-value:x:@http.post/*/content/*/id

// Getting base model to use.
.model
set-value:x:@.model
   config.get:"magic:openai:model"

// Starting training session.
http.post:"https://api.openai.com/v1/fine-tunes"
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload
      training_file:x:@.id
      model:x:@.model
      suffix:hyperlambda
      learning_rate_multiplier:decimal:0.2
   convert:true

// Sanity checking above invocation
if
   neq:x:@http.post
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI, check your log for details
         public:bool:true
         status:500

/*
 * Creating a task that repeats once every 1 minute until training is completed,
 * for then to make sure we use the new and updated model.
 */
.task-id
set-value:x:@.task-id
   strings.concat
      .:openai-waiting-for-training-
      guid.new
unwrap:x:./*/tasks.create/*/*/.task-id
unwrap:x:./*/tasks.create/*/*/.model
tasks.create:x:@.task-id
   repeats:1.minutes
   .lambda

      // Forward evaluated above
      .task-id:x:@.lambda/@.task-id
      .model:x:@http.post/*/content/*/fine_tuned_model
      .model-id:x:@http.post/*/content/*/id

      // Doing some logging
      log.info:Checking if OpenAI is finished training

      // Checking model status using OpenAI API, making sure we parametrise Authorization header with token
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            config.get:"magic:openai:key"
      strings.concat
         .:"https://api.openai.com/v1/fine-tunes/"
         get-value:x:@.model-id
      http.get:x:@strings.concat
         headers
            Authorization:x:@.token
         convert:true
      if
         eq:x:@http.get
            .:int:200
         .lambda

            // Checking if job succeeded.
            if
               eq:x:@http.get/*/content/*/status
                  .:succeeded
               .lambda

                  // Training is done, updating configuration with new model
                  log.info:Training of OpenAI model completed successfully
                  config.load
                  json2lambda:x:@config.load
                  set-value:x:@json2lambda/*/magic/*/openai/*/model
                     get-value:x:@.model
                  lambda2json:x:@json2lambda/*
                  config.save:x:@lambda2json

                  // Deleting task
                  tasks.delete:x:@.task-id

            else

               // Training session is still not done.
               log.info:OpenAI training session is not done

      else

         // Invocation failed
         lambda2hyper:x:@http.get
         log.error:Retrieving training session status from OpenAI failed
            result:x:@lambda2hyper


// Returning success to caller.
return
   result:success
