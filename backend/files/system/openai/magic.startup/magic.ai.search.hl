
/*
 * Slot that returns [max] search results for the specified [type], given the
 * specified [threshold], the specified [prompt] and the specified [vector_model].
 */
slots.create:magic.ai.search

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/prompt
   validators.mandatory:x:@.arguments/*/threshold
   validators.mandatory:x:@.arguments/*/max
   validators.mandatory:x:@.arguments/*/vector_model
   validators.string:x:@.arguments/*/prompt
      min:1

   // Converting threshold in case we're given the wrong type.
   set-value:x:@.arguments/*/threshold
      convert:x:@.arguments/*/threshold
         type:double

   // Retrieving embeddings.
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         config.get:"magic:openai:key"

   // Retrieving embedding for prompt.
   http.post:"https://api.openai.com/v1/embeddings"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         input:x:@.arguments/*/prompt
         model:x:@.arguments/*/vector_model
      convert:true

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Oops, error - Logging error and returning OpenAI's HTTP status code to caller.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            error:x:@lambda2hyper
         throw:x:@http.post/*/content/*/error/*/message
            public:bool:true
            status:x:@http.post

   // Connects to database to retrieve matching snippets
   data.connect:[generic|magic]

      // Fetching relevant snippets, making sure we profile the time it takes.
      .begin
      set-value:x:@.begin
         date.now
      unwrap:x:./*/data.scan/*/threshold
      add:x:./*/data.scan/*/vector
         get-nodes:x:@http.post/*/content/*/data/0/*/embedding/*
      data.scan
         max:x:@.arguments/*/max
         vector
         threshold:x:@.arguments/*/threshold
         table:ml_training_snippets
         columns
            embedding
            prompt
            completion
            uri
         where
            and
               embedding.neq
               type.eq:x:@.arguments/*/type
         limit:200
         offset:x:@.offset
         order:created

      // Measuring how much time we spent looping through snippets.
      .end
      set-value:x:@.end
         date.now
      .time
      set-value:x:@.time
         math.subtract
            get-value:x:@.end
            get-value:x:@.begin
      set-value:x:@.time
         time.format:x:@.time
            format:"ss\\.fff"

      // Making sure we don't return [snippets] unless we actually have snippets.
      if
         not-exists:x:@data.scan/*
         .lambda
            remove-nodes:x:../*/return/*/snippets
      else
         add:x:../*/return/*/snippets
            get-nodes:x:@data.scan/*

   // Returning result to caller.
   unwrap:x:./*/return/*
   return
      db_time:x:@.time
      snippets
