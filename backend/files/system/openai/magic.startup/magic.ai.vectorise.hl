
/*
 * Vectorises the specified model.
 */
slots.create:magic.ai.vectorise

   // Adding callbacks to [try] invocations.
   add:x:./*/try
      get-value:x:@.arguments/*/.onafter

   // Making sure we log exceptions.
   try

      // Maximum number of times we retry OpenAI's API before giving up.
      .retries:int:10

      // Getting OpenAI API token from configuration.
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            config.get:"magic:openai:key"

      // Getting vector model.
      .vector-model
      data.connect:[generic|magic]

         // Selecting vector model from database.
         data.read
            table:ml_types
            columns
               vector_model
            where
               and
                  type.eq:x:@.arguments/*/type
         set-value:x:@.vector-model
            get-value:x:@data.read/*/*/vector_model

      // To avoid exhausting server's memory, we iterate 50 snippets at the time.
      .continue:bool:true
      .failed:int:0
      .count:int:0
      while:x:@.continue

         // Keeping connection open for only 50 iterations
         data.connect:[generic|magic]

            // Selecting 20 snippets from type.
            data.read
               table:ml_training_snippets
               columns
                  id
                  prompt
                  completion
               where
                  and
                     embedding_vss.eq
                     type.eq:x:@.arguments/*/type
               limit:20
               order:created

            // Looping through all records returned above.
            for-each:x:@data.read/*

               // Signaling frontend.
               strings.concat
                  .:"Vectorising "
                  get-value:x:@.dp/#/*/prompt
               unwrap:x:+/*/args/*/message
               sockets.signal:magic.backend.chatbot
                  roles:root
                  args
                     message:x:@strings.concat
                     type:info

               // Buffer for what we're creating embeddings from.
               .embedding
               set-value:x:@.embedding
                  strings.concat
                     get-value:x:@.dp/#/*/prompt
                     .:"\r\n"
                     .:"\r\n"
                     get-value:x:@.dp/#/*/completion

               // Making sure we don't try to create embedding if it would exhaust the number of tokens for model.
               if
                  lt
                     openai.tokenize:x:@.embedding
                     .:int:8191
                  .lambda

                     // Creating an HTTP POST request towards OpenAI, now decorated.
                     http.post:"https://api.openai.com/v1/embeddings"
                        headers
                           Authorization:x:@.token
                           Content-Type:application/json
                        payload
                           model:x:@.vector-model
                           input:x:@.embedding
                        convert:true

                     // Sanity checking above invocation.
                     if
                        not
                           and
                              mte:x:@http.post
                                 .:int:200
                              lt:x:@http.post
                                 .:int:300
                        .lambda

                           // Oops, error - Logging error and returning status 500 to caller.
                           lambda2hyper:x:@http.post
                           log.error:Something went wrong while invoking OpenAI
                              message:x:@http.post/*/content/*/error/*/message
                              error:x:@lambda2hyper
                           strings.concat
                              .:"Could not create embeddings for '"
                              get-value:x:@.dp/#/*/prompt
                              .:"'"
                           unwrap:x:+/*/args/*/message
                           sockets.signal:magic.backend.chatbot
                              roles:root
                              args
                                 message:x:@strings.concat
                                 type:error
                           if
                              and
                                 or
                                    eq:x:@http.post
                                       .:int:429
                                    eq:x:@http.post
                                       .:int:500
                                 mt:x:@.retries
                                    .:int:0
                              .lambda

                                 // OpenAI server is busy, waiting 5 seconds to retry.
                                 math.decrement:x:@.retries
                                 sockets.signal:magic.backend.chatbot
                                    roles:root
                                    args
                                       message:Retrying in 5 seconds
                                       type:info
                                 sleep:5000

                           else

                              // Non-transitional error or too many retries.
                              unwrap:x:+/*/args/*/message
                              sockets.signal:magic.backend.message
                                 roles:root
                                 args
                                    message:x:@strings.concat
                                    type:error
                              throw:Could not create embeddings for model

                     else

                        // Success creating embeddings, updating training snippet now.
                        floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
                        data.update
                           table:ml_training_snippets
                           values
                              embedding_vss:x:@floatArray2bytes
                           where
                              and
                                 id.eq:x:@.dp/#/*/id

                        // Updating index.
                        data.execute:@"
insert into vss_ml_training_snippets(rowid, embedding_vss)
select 
 id as rowid,
 embedding_vss
from ml_training_snippets where id = @id;"
                           id:x:@.dp/#/*/id

                        // Incrementing count.
                        math.increment:x:@.count

               else

                  // Making sure we count number of snippets that failed.
                  math.increment:x:@.failed


            // Counting how many records we currently processed.
            get-count:x:@data.read/*

            // Checking if we're done.
            if
               lt:x:@get-count
                  .:int:20
               .lambda
                  set-value:x:@.continue
                     .:bool:false

      // Signaling frontend.
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Done creating embeddings of your model
            type:success

      // Signaling frontend.
      strings.concat
         .:"Done vectorising model "
         get-value:x:@.arguments/*/type
         .:" containing "
         get-value:x:@.count
         .:" training snippets"
      unwrap:x:+/*/args/*/message
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:Your machine learning model was successfully vectorised
            type:success

      // Basic logging.
      log.info:Done with creating vectors for model
         type:x:@.arguments/*/type
         count:x:@.count
         failed:x:@.failed

      // Checking if we've got a callback, and if so, executing it.
      if
         exists:x:@.arguments/*/.onafter
         .lambda
            eval:x:@.arguments/*/.onafter

   .catch

      // Oops ...!!
      log.error:x:@.arguments/*/message
         type:x:@.arguments/*/type
