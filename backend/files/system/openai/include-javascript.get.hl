
/*
 * Returns the JavaScript required to embed a ChatGPT based chatbot on some website to caller.
 */
.arguments
   css:string
   file:string
   type:string
   header:string
   button:string
   render_button:bool
   search:bool
   chat:bool
   markdown:bool
   speech:bool
   
   // Legacy parameter, ignore, no longer in use.
   gpt:bool
.description:Returns the JavaScript required to embed a ChatGPT based chatbot on some website to caller.

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type

// Defaulting button to be rendered by default.
if
   not-exists:x:@.arguments/*/render_button
   .lambda
      add:x:@.arguments
         .
            render_button:bool:true

// Defaulting file to be rendered to default.
if
   not-exists:x:@.arguments/*/file
   .lambda
      add:x:@.arguments
         .
            file:default

// Defaulting CSS to be rendered to default.
if
   not-exists:x:@.arguments/*/file
   .lambda
      add:x:@.arguments
         .
            css:default

// Defaulting chat and search arguments if not specified.
if
   not-exists:x:@.arguments/*/chat
   .lambda
      add:x:@.arguments
         .
            chat:bool:true
if
   not-exists:x:@.arguments/*/search
   .lambda
      add:x:@.arguments
         .
            search:bool:false
if
   not-exists:x:@.arguments/*/markdown
   .lambda
      add:x:@.arguments
         .
            markdown:bool:true
if
   not-exists:x:@.arguments/*/speech
   .lambda
      add:x:@.arguments
         .
            speech:bool:false

// Checking if custom JavaScript file exists.
.result
strings.concat
   .:/etc/system/openai/
   get-value:x:@.arguments/*/file
   .:.js
if
   io.file.exists:x:@strings.concat
   .lambda

      // Generic template file.
      set-value:x:@.result
         io.file.load:x:@strings.concat

else

   // Checking if system JavaScript file exists.
   strings.concat
      .:/system/openai/front.files/chat/
      get-value:x:@.arguments/*/file
      .:.js
   if
      io.file.exists:x:@strings.concat
      .lambda

         // Generic template file.
         set-value:x:@.result
            io.file.load:x:@strings.concat
   else

      // Oops, no such file exists.
      throw:No such AI chat template file exists
         public:bool:true
         status:400


// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Dynamically exchanging template fields in JavaScript file.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url
set-value:x:@.result
   strings.replace:x:@.result
      .:[[type]]
      get-value:x:@.arguments/*/type
set-value:x:@.result
   strings.replace:x:@.result
      .:[[header]]
      get-first-value
         get-value:x:@.arguments/*/header
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[button]]
      get-first-value
         get-value:x:@.arguments/*/button
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[css]]
      get-first-value
         get-value:x:@.arguments/*/css
         get-value:x:@.arguments/*/file
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[render_button]]
      get-value:x:@.arguments/*/render_button
if:x:@.arguments/*/search
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[search]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[search]]
         .:false
if:x:@.arguments/*/chat
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[chat]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[chat]]
         .:false
if:x:@.arguments/*/markdown
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[markdown]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[markdown]]
         .:false
if:x:@.arguments/*/speech
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[speech]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[speech]]
         .:false

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:application/javascript
   Cache-Control:public, max-age=300

// Returning result to caller.
return:x:@.result
