
/*
 * Sends a reset password email to user.
 * 
 * Notice, assumes username is a valid email address.
 * 
 * The [frontendUrl] is the frontend root URL you want to prepend the
 * password link with.
 * 
 * This endpoint also assumes that some sort of SMTP server have
 * been configured in the site's configuration parts.
 */
.arguments
   username:string
   frontendUrl:string
   template:string
   subject:string
.description:Sends a reset password email to the specified user. Assumes the username is a valid email address.
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/frontendUrl
validators.email:x:@.arguments/*/username
validators.url:x:@.arguments/*/frontendUrl

/*
 * Invokes [magic.auth.authenticate] that does the heavy lifting,
 * and creates our JWT token that we send to the user as an email.
 */
unwrap:x:+/*
signal:magic.auth.authenticate
   username:x:@.arguments/*/username
   check-password:bool:false
   reset-password:bool:true

// Default template to use for sending user a "reset password" link.
.template
set-value:x:-
   get-first-value
      get-value:x:@.arguments/*/template
      .:/system/auth/email-templates/reset-password.html

// Default subject line for verify email address email.
.subject
set-value:x:-
   get-first-value
      get-value:x:@.arguments/*/subject
      .:Change your password at Aista Magic Cloud

/*
 * Loading up email template, which is modified and parametrized
 * according to input arguments.
 */
io.file.load:x:@.template

// Dynamically building our reset password URL.
strings.concat
   .:"https://"
   request.host
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.arguments/*/frontendUrl
      .:?token=
      get-value:x:@signal/*/ticket
      .:&username=
      strings.url-encode:x:@.arguments/*/username
      .:&url=
      strings.url-encode:x:@strings.concat/@strings.concat

// Performing substitution in email template.
.body
set-value:x:@.body
   strings.replace:x:@io.file.load
      .:{{url}}
      get-value:x:@.url

/*
 * Checking that backend is configured with SMTP settings before attempting
 * to actually send email.
 */
config.get:"magic:smtp:host"
if
   not
      eq
         get-value:x:@config.get
         .
   .lambda

      // Sends an email to the user using the SMTP settings from our configuration.
      unwrap:x:+/**
      mail.smtp.send
         message
            to
               .:x:@.arguments/*/username
            subject:x:@.subject
            entity:text/html
               content:x:@.body

      // Logging the fact the we just sent a reset password email to the user.
      log.info:Reset password email sent
         username:x:@.arguments/*/username

      // Returns success to caller.
      return-nodes
         result:success
else

   /*
    * Logging the fact that we couldn't send a reset password email,
    * and returning failure to caller.
    */
   log.info:Could not send reset passsword email
      reason:No SMTP settings found
   return-nodes
      result:Contact admin of site
