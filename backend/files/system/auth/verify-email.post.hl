
/*
 * Verifies an email address typically supplied
 * during registration of a new user in the system.
 */
.arguments
   username:string
   token:string
.description:Verifies an email address typically supplied during registration of a new user in the system

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/token
validators.email:x:@.arguments/*/username

// Verifying user exists and has not already verified his or her email address.
data.connect:magic

   // Checking if username exists in database.
   data.read
      table:users
      where
         and
            username:x:@.arguments/*/username
            locked:bool:false
   if
      not
         exists:x:@data.read/*/*
      .lambda

         // No such user.
         throw:Access denied
            public:bool:true
            status:int:401

   // Verifying user has not yet confirmed his email address.
   data.read
      table:users_roles
      where
         and
            user:x:@.arguments/*/username
            role:unconfirmed
   if
      not
         exists:x:@data.read/*/*
      .lambda

         // User has previously verified his email address.
         throw:Access denied
            public:bool:true
            status:int:401

   /*
    * Sanity checking token supplied, which was generated by
    * combining JWT auth secret with user's email address.
    */
   .token
   strings.concat
      get-value:x:@.arguments/*/
      config.get:"magic:auth.secret"
   set-value:x:@.token
      crypto.hash:x:@strings.concat
   if
      not
         eq
            get-value:x:@.token
            get-value:x:@.arguments/*/token
      .lambda

         // Token mismatch.
         throw:Access denied
            public:bool:true
            status:int:401

   /*
    * Updating user's verified status by removing him or
    * her from the 'unconfirmed' role and adding the user
    * to the 'guest' role.
    * 
    * The guest role is the role in the system with the
    * least access to do thing, yet still an actual role,
    * that can do some things.
    */
   data.delete
      table:users_roles
      where
         and
            user:x:@.arguments/*/username
            role:unconfirmed
   data.create
      table:users_roles
      values
         user:x:@.arguments/*/username
         role:guest

// Logging the fact that user confirmed his email address.
log.info:Successfully confirmed email address
   username:x:@.arguments/*/username

// Returns success to caller.
return-nodes
   result:success
