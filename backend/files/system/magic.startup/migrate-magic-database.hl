
/*
 * Runs through all database migration scripts found in relevant directory.
 * 
 * Notice, to avoid this from taking too much time during startup before server
 * becomes responsive, we execute these on a background thread.
 */

// Verifying system has been configrued before we try to run migration scripts.
config.get:"magic:auth:secret"
if
   lt
      strings.length:x:@config.get
      .:int:50
   .lambda
      return:bool:true
fork

   /*
    * Notice, in case Magic has not yet been configured, the very act
    * of even trying to connect to the magic database will fail, which implies
    * we'll have to do a try/catch/do-nothing thing here ...
    */
   try

      // Figuring out what's our default database type.
      config.get:"magic:databases:default"

      /*
       * Listing all SQL migration scripts, and executing these sequentially,
       * making sure we're using the correct folder, according to what database
       * type Magic has been configured with.
       */
      strings.concat
         .:/misc/
         get-value:x:@config.get
         .:/migrations/
      io.file.list:x:@strings.concat

      // Connecting to Magic database.
      data.connect:magic
         database-type:x:@config.get

         // Iterating through each SQL file in folder.
         for-each:x:@io.file.list/*

            // Verifying file ends with ".sql".
            if
               strings.ends-with:x:@.dp/#
                  .:.sql
               .lambda

                  // This is an SQL file, hence loading it, and executing it.
                  io.file.load:x:@.dp/#

                  /*
                   * Notice, to avoid having ONE failing migration script
                   * aborting the entire migration job, we need to do a try/catch/ignore
                   * here. This might occur if for instance some of the migration scripts
                   * has executed successfully, but others have not.
                   */
                  try

                     // Ensuring we're doing the "batch execute" thing in case we're in MS SQL land.
                     if
                        eq
                           get-value:x:@config.get
                           .:mssql
                        .lambda
                           set-name:x:@if/./*/data.execute
                              .:mssql.execute-batch
                           remove-nodes:x:@if/./*/mssql.execute-batch/*/database-type

                     // Executing migration script and logging result.
                     data.execute:x:@io.file.load
                        database-type:x:@config.get

                  .catch

                     /*
                      * We might end up here if migration script has been previously executed ...
                      */
                     .do-nothing
   .catch

      /*
       * Do nothing, nothing to do really.
       * 
       * This might occur if for instance Magic has not yet been configured,
       * and there exists no magic database.
       */
      .foo
