
// CRUD create endpoint inserting one record into your ml_types table in your magic database taking type, model, max_tokens, temperature with authentication and authorisation for root roles
.arguments
   type:string
   model:string
   max_tokens:long
   max_context_tokens:long
   max_request_tokens:long
   temperature:double
   recaptcha:decimal
   auth:string
   supervised:int
   cached:int
   prefix:string
   use_embeddings:int
   threshold:decimal
   vector_model:string
.description:CRUD create endpoint inserting one record into your ml_types table in your magic database taking type, model, max_tokens, temperature with authentication and authorisation for root roles
.type:crud-create

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up database connection.
data.connect:[generic|magic]

   // Parametrising our create invocation.
   add:x:./*/data.create/[0,1]/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      table:ml_types
      return-id:bool:false
      values

   // Creating our default training snippets.
   data.create
      table:ml_training_snippets
      values
         type:x:@.arguments/*/type
         prompt:Is this ChatGPT?
         completion:@"This is a custom ChatGPT chatbot allowing you to use natural language to ask questions related to the website you're currently visiting. The chatbot was created by [AISTA](https://aista.com)."
         uri:"https://aista.com"
   data.create
      table:ml_training_snippets
      values
         type:x:@.arguments/*/type
         prompt:Who created this ChatGPT chatbot?
         completion:@"The ChatGPT chatbot was created by [AISTA](https://aista.com)."
         uri:"https://aista.com"
   data.create
      table:ml_training_snippets
      values
         type:x:@.arguments/*/type
         prompt:Can I have a similar ChatGPT chatbot on my own website?
         completion:@"Sure, just visit [AISTA](https://aista.com) and contact them for a quote for your own ChatGPT chatbot, or use their DIY version."
         uri:"https://aista.com"

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      result:success
