
/*
 * This file will setup your system, changing its default JWT secret,
 * create the magic database, and insert a root user - Unless the
 * database, and/or root user exists from before.
 * 
 * Notice, if the root user exists from before, this file will change
 * its password - However, you cannot setup the system twice, unless you
 * manually change the JWT secret to a value that's less than 50 characters
 * in length.
 */
.arguments
   username:string
   password:string
   is_hashed:bool
   connectionString:string
   defaultTimeZone:string
   databaseType:string
   name:string
   email:string
.description:Setup authentication and other parts of the system according to the arguments provided
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

validators.enum:x:@.arguments/*/databaseType
   .:mssql
   .:mysql
   .:pgsql
   .:sqlite

// Default [is_hashed] to false.
if
   not
      exists:x:@.arguments/*/is_hashed
   .lambda
      add:x:@.arguments
         .
            is_hashed:bool:false

// Defaulting to 'root' as root username unless user specified an explicit username.
if
   not
      exists:x:@.arguments/*/username
   .lambda
      add:x:@.arguments
         .
            username:root

// Making sure we're able to return exceptions to caller.
try

   /*
    * Checking if JWT secret has been changed, and
    * if is has, we throw an exception, to prevent the
    * system from being setup again, overriding the default
    * setup configuration.
    */
   config.get:"magic:auth:secret"
   if
      and
         not-null:x:@config.get
         mte
            strings.length:x:@config.get
            .:int:50
      .lambda

         // System has been setup before
         throw:Your system has already been setup
            status:401
            public:true

   /*
    * Testing connection string before we save it, to make sure
    * it is functioning. This part will throw if connection string is
    * not valid.
    */
   try
      switch:x:@.arguments/*/databaseType

         case:mssql
            strings.replace:x:@.arguments/*/connectionString
               .:{database}
               .:master
            mssql.connect:x:@strings.replace
               mssql.select:select name from master.dbo.sysdatabases

         case:mysql
            strings.replace:x:@.arguments/*/connectionString
               .:{database}
               .:information_schema
            mysql.connect:x:@strings.replace
               mysql.select:show databases

         case:pgsql
            strings.replace:x:@.arguments/*/connectionString
               .:{database}
               .:postgres
            pgsql.connect:x:@strings.replace
               pgsql.select:select datname from pg_database

         case:sqlite
            // No need to verify database exists.
            .

   .catch

      throw:Could not connect to database, please double check your connection string
         public:true
         status:400

   /*
    * Connection string is valid and we are able to connect to a database,
    * hence we can safely change our appsettings.json file now.
    */
   config.load
   json2lambda:x:@config.load

   // Creating our default database configuration object.
   remove-nodes:x:@json2lambda/*/magic/*/databases/*
   unwrap:x:+/*/*
   add:x:@json2lambda/*/magic/*/databases
      .
         default:x:@.arguments/*/databaseType
   set-name:x:+/+/*/*
      get-value:x:@.arguments/*/databaseType
   unwrap:x:+/*/*/*
   add:x:@json2lambda/*/magic/*/databases
      .
         .
            generic:x:@.arguments/*/connectionString
   set-value:x:@json2lambda/*/magic/*/auth/*/secret
      crypto.random
         min:100
         max:200
   set-value:x:@json2lambda/*/magic/*/culture/*/defaultTimeZone
      get-value:x:@.arguments/*/defaultTimeZone

   // Saving changed configuration now.
   lambda2json:x:@json2lambda/*
   config.save:x:-

   /*
    * Sleeping for 5 seconds to allow configuration to kick
    * in on thread pools threads.
    *
    * Notice, even though this is bananas, it is necessary since we're using the appsettings
    * connection string to connect to database further down in this file.
    */
   sleep:2000

   /*
    * We now have a new JWT/AUTH secret, and a database connection string
    * that we know we can use to connect to either a MySQL instance, PgSQL instance
    * or an SQL Server instance. Hence, now we can start the setup process, creating the
    * magic database, and inserting a root user, etc ...
    */

   /*
    * Retrieving all databases from selected database type,
    * to see if 'magic' database has previously been created.
    * 
    * If not, we create the 'magic' database using the specialised
    * schema declaration SQL file for the database type, and we later
    * insert a default user into its 'user' table.
    */
   strings.concat
      .:magic.db.
      get-value:x:@.arguments/*/databaseType
      .:.databases
   signal:x:-

   // Checking if magic was returned from above invocation.
   if
      not
         exists:x:@signal/*/*/=magic
      .lambda

         /*
          * Database does not exist.
          * 
          * Evaluating SQL script that creates our database, but first we must dynamically
          * determine which script to execute.
          */
         strings.concat
            .:/misc/
            get-value:x:@.arguments/*/databaseType
            .:/magic.sql

         /*
          * Loading create database SQL script file, which is different
          * according to what database type client supplied us with.
          */
         io.file.load:x:@strings.concat

         /*
          * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
          * accommodate for "go" statements and such.
          *
          * For PG SQL we'll need to first create the database in a separate [pgsql.connect] invocation,
          * then run the execute script with the created database as our selected database.
          *
          * For SQLite we'll need to create an empty database file first before we execute the create
          * database script.
          */
         switch:x:@.arguments/*/databaseType

            // Special case for MS SQL to use [mssql.execute-batch].
            case:mssql
               mssql.connect
                  mssql.execute-batch:x:@io.file.load

            // Special case for PG SQL to create database in a different connection.
            case:pgsql
               pgsql.connect:[generic|postgres]
                  pgsql.execute:create database magic
               pgsql.connect:[generic|magic]
                  pgsql.execute:x:@io.file.load

            // MySQL version, simply doing everything as normal and plain as possible.
            case:mysql

               // Executing create database SQL script without any special cases.
               mysql.connect
                  mysql.execute:x:@io.file.load

            // SQLite version.
            case:sqlite

               // Executing create database SQL script without any special cases.
               io.file.save:/data/magic.db
                  .:
               sqlite.connect:[generic|magic]
                  sqlite.execute:x:@io.file.load

         // Inserting root user.
         unwrap:x:+/*
         signal:magic.auth.create-user
            username:x:@.arguments/*/username
            password:x:@.arguments/*/password
            is_hashed:x:@.arguments/*/is_hashed
            database-type:x:@.arguments/*/databaseType
            roles
               .:root
            extra
               source:setup

         // Then we need to make sure we run any database migration scripts.
         io.file.execute:/system/magic.startup/008-migrate-magic-database.hl

         // Inserting default training data into database.
         io.file.execute:/system/magic.startup/009-insert-training-data.hl

   else

      /*
       * Database already exists, so we simply change root user's password
       * according to arguments specified.
       */
      unwrap:x:+/*
      signal:magic.auth.change-password
         password:x:@.arguments/*/password
         database-type:x:@.arguments/*/databaseType
         is_hashed:x:@.arguments/*/is_hashed

      // Then we need to make sure we run any database migration scripts.
      io.file.execute:/system/magic.startup/008-migrate-magic-database.hl

      // Inserting default training data into database.
      io.file.execute:/system/magic.startup/009-insert-training-data.hl

   /*
    * Starting task scheduler now that we have created our database.
    */
   tasks.scheduler.start

   /*
    * Explicitly seeding CSRNG with password to create more entropy.
    */
   crypto.seed:x:@.arguments/*/password

   // Creating cryptography key pair.
   crypto.random
      min:100
      max:200
   strings.concat
      request.scheme
      .:"://"
      request.host
   unwrap:x:+/*
   io.file.execute:/system/crypto/generate-keypair.post.hl
      strength:int:2048
      seed:x:@crypto.random
      subject:x:@.arguments/*/name
      email:x:@.arguments/*/email
      username:x:@.arguments/*/username
      domain:x:@strings.concat

   // Authenticating user and returning new JWT token to client.
   unwrap:x:+/*
   signal:magic.auth.authenticate
      username:x:@.arguments/*/username
      check-password:bool:false

   // Re-initialising time zone in case it was changed from its default setting.
   timezone.init

   // Returns the authentication JWT ticket created above to caller.
   return-nodes:x:@signal/*

.catch

   // Making sure we make exception publicly visible for frontend.
   throw:x:@.arguments/*/message
      public:true
      status:400
