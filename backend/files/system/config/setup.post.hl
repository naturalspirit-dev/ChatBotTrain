
/*
 * This file will setup your system, changing its default JWT secret,
 * create the magic database, and insert a root user - Unless the
 * database, and/or root user exists from before.
 * 
 * Notice, if the root user exists from before, this file will change
 * its password - However, you cannot setup the system twice, unless you
 * manually change the JWT secret to its default value, which
 * is 'THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT'.
 */
.arguments
   password:string
   settings:*
.description:Setup authentication and other parts of the system according to the arguments provided
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/settings/*/magic/*/auth/*/secret
validators.string:x:@.arguments/*/settings/*/magic/*/auth/*/secret
   min:int:80

// Making sure we're able to return exceptions to caller.
try

   /*
    * Checking if JWT secret has been changed, and
    * if is has, we throw an exception, to prevent the
    * system from being setup again, overriding the default
    * setup configuration.
    */
   config.get:"magic:auth:secret"
   if
      not
         eq
            get-value:x:@config.get
            .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
      .lambda

         // System has been setup before
         throw:Your system has already been setup
            status:401
            public:true

   /*
    * Testing connection string before we save it, to make sure
    * it is functioning. This part will throw if connection string is
    * not valid.
    */
   try
      switch:x:@.arguments/*/settings/*/magic/*/databases/*/default

         case:mssql
            strings.replace:x:@.arguments/*/settings/*/magic/*/databases/*/mssql/*/generic
               .:{database}
               .:master
            mssql.connect:x:@strings.replace
               mssql.select:select name from master.dbo.sysdatabases

         case:mysql
            strings.replace:x:@.arguments/*/settings/*/magic/*/databases/*/mysql/*/generic
               .:{database}
               .:information_schema
            mysql.connect:x:@strings.replace
               mysql.select:show databases

         case:pgsql
            strings.replace:x:@.arguments/*/settings/*/magic/*/databases/*/pgsql/*/generic
               .:{database}
               .:postgres
            pgsql.connect:x:@strings.replace
               pgsql.select:select datname from pg_database

         case:sqlite
            // No need to verify database exists.
            .

         default
            // Caught below and transformed into another exception.
            throw:Foo

   .catch
      throw:Could not connect to database, please double check your connection string
         public:true
         status:400

   /*
    * Connection string is valid and we are able to connect to a database,
    * hence we can safely save the appsettings.json file now.
    */
   lambda2json:x:@.arguments/*/settings/*
      format:true
   config.save:x:-

   /*
    * Sleeping for 5 seconds to allow configuration to kick
    * in on thread pools threads.
    *
    * Notice, even though this is bananas, it is necessary since we're using the appsettings
    * connection string to connect to database further down in this file.
    */
   sleep:5000

   /*
    * We now have a new JWT/AUTH secret, and a database connection string
    * that we know we can use to connect to either a MySQL instance, PgSQL instance
    * or an SQL Server instance. Hence, now we can start the setup process, creating the
    * magic database, and inserting a root user, etc ...
    */

   /*
    * Retrieving all databases from selected database type,
    * to see if 'magic' database has previously been created.
    * 
    * If not, we create the 'magic' database using the specialised
    * schema declaration SQL file for the database type, and we later
    * insert a default user into its 'user' table.
    */
   strings.concat
      .:magic.db.
      get-value:x:@.arguments/*/settings/*/magic/*/databases/*/default
      .:.databases
   signal:x:-

   // Checking if magic was returned from above invocation.
   if
      not
         exists:x:@signal/*/*/=magic
      .lambda

         /*
          * Database does not exist.
          * 
          * Evaluating SQL script that creates our database, but first we must dynamically
          * determine which script to execute.
          */
         strings.concat
            .:/misc/
            get-value:x:@.arguments/*/settings/*/magic/*/databases/*/default
            .:/magic.sql

         /*
          * Loading create database SQL script file, which is different
          * according to what database type client supplied us with.
          */
         io.file.load:x:@strings.concat

         /*
          * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
          * accommodate for "go" statements and such.
          *
          * For PG SQL we'll need to first create the database in a separate [pgsql.connect] invocation,
          * then run the execute script with the created database as our selected database.
          *
          * For SQLite we'll need to create an empty database file first before we execute the create
          * database script.
          */
         switch:x:@.arguments/*/settings/*/magic/*/databases/*/default

            // Special case for MS SQL to use [mssql.execute-batch].
            case:mssql
               mssql.connect
                  mssql.execute-batch:x:@io.file.load

            // Special case for PG SQL to create database in a different connection.
            case:pgsql
               pgsql.connect:[generic|postgres]
                  pgsql.execute:create database magic
               pgsql.connect:[generic|magic]
                  pgsql.execute:x:@io.file.load

            // MySQL version, simply doing everything as normal and plain as possible.
            case:mysql

               // Executing create database SQL script without any special cases.
               mysql.connect
                  mysql.execute:x:@io.file.load

            // SQLite version.
            case:sqlite

               // Executing create database SQL script without any special cases.
               io.file.save:/data/magic.db
                  .:
               sqlite.connect:[generic|magic]
                  sqlite.execute:x:@io.file.load

         // Inserting root user.
         unwrap:x:+/*
         signal:magic.auth.create-user
            username:root
            password:x:@.arguments/*/password
            database-type:x:@.arguments/*/settings/*/magic/*/databases/*/default
            roles
               .:root
   else

      /*
       * Database already exists, so we simply change root user's password
       * according to arguments specified.
       */
      unwrap:x:+/*
      signal:magic.auth.change-password
         password:x:@.arguments/*/password
         database-type:x:@.arguments/*/settings/*/magic/*/databases/*/default

      // Then we need to make sure we run any database migration scripts.
      io.file.execute:/system/magic.startup/migrate-magic-database.hl

   /*
    * Starting task scheduler, making sure we apply maximum number of concurrent threads from config,
    * and also that we catch exceptions for cases when the scheduler has already been started.
    */
   try
      .max:int:8
      config.get:"magic:scheduler:max-threads"
      if
         not
            eq
               get-value:x:@config.get
               .
         .lambda
            set-value:x:@.max
               convert:x:@config.get
                  type:int
      tasks.scheduler.start:x:@.max
   .catch

      // Scheduler has probably already been started.
      .do-nothing

   /*
    * Explicitly seeding CSRNG with auth secret, which might have been manually applied
    * by user during setup process.
    */
   config.get:"magic:auth:secret"
   crypto.seed:x:-

   // Authenticating user and returning new JWT token to client.
   unwrap:x:+/*
   signal:magic.auth.authenticate
      username:root
      password:x:@.arguments/*/password

   // Re-initialising time zone in case it was changed from its default setting.
   timezone.init

   // Returns the authentication JWT ticket created above to caller.
   return-nodes:x:@signal/*

.catch

   // Making sure we make exception publicly visible for frontend.
   throw:x:@.arguments/*/message
      public:true
      status:400
