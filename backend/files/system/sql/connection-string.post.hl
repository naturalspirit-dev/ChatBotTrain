
/*
 * Adds the specified connection string.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [name] - Name of connection string.
 * - [connectionString] - Connection string to add.
 * - [useAsDefault] - If true will become the default connection string for the magic database
 */
.arguments
   databaseType:string
   name:string
   connectionString:string
   useAsDefault:bool
.description:Adds the specified connection string, making sure the backend can somehow actually connect to the database
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/connectionString
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql

// Sanity checking that connection string contains {database} allowing for dynamic substitutions.
if
   not
      strings.contains:x:@.arguments/*/connectionString
         .:{database}
   .lambda

      // Oops!
      return
         result:failure
         message:Connection string does not contain {database}

// Doing the try catch thing, to return failure if connection string is invalid.
try
   switch:x:@.arguments/*/databaseType

      case:mssql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:master
         mssql.connect:x:@strings.replace
            mssql.select:select name from master.dbo.sysdatabases

      case:mysql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:information_schema
         mysql.connect:x:@strings.replace
            mysql.select:show databases

      case:pgsql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:postgres
         pgsql.connect:x:@strings.replace
            pgsql.select:select datname from pg_database

   // Loading config file such that we can add connection string to current configuration.
   config.load
   json2lambda:x:-

   // Verifying that section exists.
   if
      not-exists:x:@json2lambda/*/magic/*/databases/*/{@.arguments/*/databaseType}
      .lambda
         set-name:x:+/*/*
            get-value:x:@.arguments/*/databaseType
         add:x:@json2lambda/*/magic/*/databases
            .
               foo

   // Adding actual connection string to section.
   set-name:x:+/+/*/*
      get-value:x:@.arguments/*/name
   unwrap:x:+/*/*
   add:x:@json2lambda/*/magic/*/databases/*/{@.arguments/*/databaseType}
      .
         foo:x:@.arguments/*/connectionString
   lambda2json:x:@json2lambda/*
   config.save:x:-

   // Checking if caller wants to use this connection string as the default
   if
      and
         eq:x:@.arguments/*/name
            .:generic
         exists:x:@.arguments/*/useAsDefault
         get-value:x:@.arguments/*/useAsDefault
      .lambda

         // Changing database type to specified database type.
         set-value:x:@json2lambda/*/magic/*/databases/*/default
            get-value:x:@.arguments/*/databaseType

         // Saving config now with a changed default database type.
         lambda2json:x:@json2lambda/*
         config.save:x:-

         // Sleeping for two seconds to make sure configuration object is not going stale.
         sleep:2000

         // Now we need to ensure database is created.
         io.file.execute:/system/ensure-magic-database.hl

   // Returning success to caller.
   return
      result:success

.catch

   // Oops, failure ...
   unwrap:x:+/*
   return
      result:failure
      message:x:@.arguments/*/message
