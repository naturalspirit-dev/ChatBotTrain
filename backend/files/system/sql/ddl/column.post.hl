
/*
 * Add the specified column to your table.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [tableName] - Name of table
 * - [columnName] - Name of column
 * - [columnType] - Type declaration of column
 * - [precision] - If relevant declares the precision of column
 * - [columnLength] - Length of column if applicable
 * - [foreignTable] - Table column links to
 * - [foreignField] - Field column links to
 * - [cascading] - If true the foreign key will cascade on delete
 * - [nullable] - If false will create a column that does NOT accept null values
 * - [generate] - If true will not execute SQL but only return DDL to caller
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tableName:string
   columnName:string
   columnType:string
   precision:string
   columnLength:int
   defaultValue:string
   foreignTable:string
   foreignField:string
   cascading:bool
   nullable:bool
   generate:bool
.description:Adds the specified column to your specified table
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tableName
validators.mandatory:x:@.arguments/*/columnName
validators.mandatory:x:@.arguments/*/columnType
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql

// SQL that executes to modify DDL.
.sql

// Alter table part.
if
   eq:x:@.arguments/*/databaseType
      .:mssql
   .lambda
      set-value:x:@.sql
         strings.concat
            .:"alter table "
            get-value:x:@.arguments/*/tableName
            .:" add "
            get-value:x:@.arguments/*/columnName
            .:" "
            get-value:x:@.arguments/*/columnType
else
   set-value:x:@.sql
      strings.concat
         .:"alter table "
         get-value:x:@.arguments/*/tableName
         .:" add column "
         get-value:x:@.arguments/*/columnName
         .:" "
         get-value:x:@.arguments/*/columnType

// Column length part, if specified - Otherwise possibly precision.
if
   and
      exists:x:@.arguments/*/columnLength
      not-null:x:@.arguments/*/columnLength
   .lambda

      // Adding column length
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:(
            get-value:x:@.arguments/*/columnLength
            .:)
else-if
   and
      exists:x:@.arguments/*/precision
      not-null:x:@.arguments/*/precision
   .lambda

      // Sanity checking precision value.
      validators.regex:x:@.arguments/*/precision
         regex:[0-9]+,[0-9]
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:(
            get-value:x:@.arguments/*/precision
            .:)
else-if
   and
      neq:x:@.arguments/*/databaseType
         .:sqlite
      or
         eq:x:@.arguments/*/columnType
            .:decimal
         eq:x:@.arguments/*/columnType
            .:numeric
   .lambda

      // Defaulting precision to (30,5) unless explicitly specified.
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:(30,5)

// Not null parts if specified
if
   and
      exists:x:@.arguments/*/nullable
      eq:x:@.arguments/*/nullable
         .:bool:false
   .lambda
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:" not null"

// Default value for column if specified.
if
   and
      exists:x:@.arguments/*/defaultValue
      neq:x:@.arguments/*/defaultValue
         .
   .lambda
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:" default "
            get-value:x:@.arguments/*/defaultValue

// References (foreign key) parts if specified.
.additional:
if
   and
      not-null:x:@.arguments/*/foreignTable
      not-null:x:@.arguments/*/foreignField
   .lambda
      if
         eq:x:@.arguments/*/databaseType
            .:mysql
         .lambda

            // MySQL doesn't support normal foreign key constraints.
            set-value:x:@.additional
               strings.concat
                  .:"\r\nalter table "
                  get-value:x:@.arguments/*/tableName
                  .:" add constraint "
                  get-value:x:@.arguments/*/tableName
                  .:_
                  get-value:x:@.arguments/*/foreignTable
                  .:_
                  get-value:x:@.arguments/*/foreignField
                  .:"_fky "
                  .:foreign key(
                  get-value:x:@.arguments/*/columnName
                  .:") references "
                  get-value:x:@.arguments/*/foreignTable
                  .:(
                  get-value:x:@.arguments/*/foreignField
                  .:")"

            // Checking if cascading deletes are turned on.
            if
               and
                  exists:x:@.arguments/*/cascading
                  not-null:x:@.arguments/*/cascading
                  eq
                     get-value:x:@.arguments/*/cascading
                     .:bool:true
               .lambda
                  set-value:x:@.additional
                     strings.concat
                        get-value:x:@.additional
                        .:" on delete cascade"
            set-value:x:@.additional
               strings.concat
                  get-value:x:@.additional
                  .:";"
                  

      else

         // Adding normal foreign key constraint.
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" references "
               get-value:x:@.arguments/*/foreignTable
               .:"("
               get-value:x:@.arguments/*/foreignField
               .:")"

         // Checking if cascading deletes are turned on.
         if
            and
               exists:x:@.arguments/*/cascading
               not-null:x:@.arguments/*/cascading
               eq
                  get-value:x:@.arguments/*/cascading
                  .:bool:true
            .lambda
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:" on delete cascade"

// Appending semi colon at end.
set-value:x:@.sql
   strings.concat
      get-value:x:@.sql
      .:;
      get-value:x:@.additional

// Checking if caller only wants to generate SQL statement.
if:x:@.arguments/*/generate
   unwrap:x:+/*
   return
      sql:x:@.sql


// Opening our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType
   data.execute:x:@.sql
      database-type:x:@.arguments/*/databaseType


// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
unwrap:x:+/*
return
   result:success
   sql:x:@.sql
