
/*
 * Adds the specified link table to the specified database.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [args] - Link table declaration
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   args:*
.description:Adds the specified link table to the specified database
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/args
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql

// SQL that executes to modify DDL.
.sql

// Creating our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType

   // Creating our correct SQL according to [databaseType].
   switch:x:@.arguments/*/databaseType

      case:sqlite

         // Creating our SQL.
         set-value:x:@.sql
            strings.concat
               .:"create table "
               get-value:x:@.arguments/*/args/*/name
               .:"("
         .first:bool:true
         for-each:x:@.arguments/*/args/*/table1pk/*
            if:x:@.first
               set-value:x:@.first
                  .:bool:false
            else
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:", "
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  get-value:x:@.dp/#/*/name
                  .:" "
                  get-value:x:@.dp/#/*/type
                  .:" references "
                  get-value:x:@.arguments/*/args/*/table1
                  .:" ("
                  get-value:x:@.dp/#/*/name
                  .:")"
         for-each:x:@.arguments/*/args/*/table2pk/*
            if:x:@.first
               set-value:x:@.first
                  .:bool:false
            else
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:", "
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  get-value:x:@.dp/#/*/name
                  .:" "
                  get-value:x:@.dp/#/*/type
                  .:" references "
                  get-value:x:@.arguments/*/args/*/table2
                  .:" ("
                  get-value:x:@.dp/#/*/name
                  .:")"
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:")"

   data.execute:x:@.sql
      database-type:x:@.arguments/*/databaseType

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
unwrap:x:+/*
return
   result:success
   sql:x:@.sql

