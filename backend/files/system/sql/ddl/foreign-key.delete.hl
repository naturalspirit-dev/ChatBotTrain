
/*
 * Deletes the specified column from your database.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [tableName] - Name of table
 * - [fkName] - Name of column
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tableName:string
   fkName:string
.description:Deletes the specified column from your database
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tableName
validators.mandatory:x:@.arguments/*/fkName
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql

// Creating our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType

   // Creating our correct SQL according to [databaseType].
   switch:x:@.arguments/*/databaseType

      case:mysql
         strings.concat
            .:"alter table "
            get-value:x:@.arguments/*/tableName
            .:" drop constraint "
            get-value:x:@.arguments/*/fkName
         data.execute:x:@strings.concat
            database-type:x:@.arguments/*/databaseType
      case:pgsql
         strings.concat
            .:"alter table "
            get-value:x:@.arguments/*/tableName
            .:" drop constraint "
            get-value:x:@.arguments/*/fkName
         log.info:x:@strings.concat
            database-type:x:@.arguments/*/databaseType
   
//         data.execute:x:@strings.concat
//            database-type:x:@.arguments/*/databaseType

      case:sqlite
         throw:"SQLite doesn't support dropping foreign keys"
            public:true
            status:400

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
return
   result:success
