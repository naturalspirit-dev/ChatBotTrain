
/*
 * Creates a new database with the specified name.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
.description:Creates a new database with the specified name
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql

if
   eq:x:@.arguments/*/databaseType
      .:sqlite
   .lambda
      strings.concat
         .:/data/
         get-value:x:@.arguments/*/databaseName
         .:.db
      io.file.save:x:-
         .:

else

   // Creating our correct SQL according to [databaseType].
   switch:x:@.arguments/*/databaseType

      case:mysql

         // Creating our database connection.
         strings.concat
            .:[
            get-value:x:@.arguments/*/connectionString
            .:|information_schema]
         data.connect:x:-
            database-type:x:@.arguments/*/databaseType
            .sql
            set-value:x:@.sql
               strings.concat
                  .:"create database "
                  get-value:x:@.arguments/*/databaseName
            data.execute:x:@.sql
               database-type:x:@.arguments/*/databaseType

      case:pgsql

         // Creating our database connection.
         strings.concat
            .:[
            get-value:x:@.arguments/*/connectionString
            .:|postgres]
         data.connect:x:-
            database-type:x:@.arguments/*/databaseType
            .sql
            set-value:x:@.sql
               strings.concat
                  .:"create database "
                  get-value:x:@.arguments/*/databaseName
            data.execute:x:@.sql
               database-type:x:@.arguments/*/databaseType

      case:mssql

         // Creating our database connection.
         strings.concat
            .:[
            get-value:x:@.arguments/*/connectionString
            .:|master]
         data.connect:x:-
            database-type:x:@.arguments/*/databaseType
            .sql
            set-value:x:@.sql
               strings.concat
                  .:"create database "
                  get-value:x:@.arguments/*/databaseName
            data.execute:x:@.sql
               database-type:x:@.arguments/*/databaseType


// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
return
   result:success
