
/*
 * Exports all the specified tables and returns to caller as DDL.
 *
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [tables] - List of tables to export
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tables:*
.description:Exports all the specified tables and returns to caller as DDL
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tables
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite

// Creating our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType

   // Creating our correct SQL according to [databaseType].
   switch:x:@.arguments/*/databaseType

      case:sqlite
         throw:SQLite is currently not supported
            public:true
            status:400

      case:mysql
         .result:
         for-each:x:@.arguments/*/tables/*
            .sql
            set-value:x:@.sql
               strings.concat
                  .:"show create table "
                  get-value:x:@.dp/#
            data.select:x:@.sql
               database-type:x:@.arguments/*/databaseType
            set-value:x:@.result
               strings.concat
                  get-value:x:@.result
                  get-value:x:@data.select/*/1
                  .:";\r\n\r\n"
         unwrap:x:+/*
         return
            result:x:@.result
