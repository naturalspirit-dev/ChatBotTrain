
/*
 * Add the specified foreign key to the specified table.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [tableName] - Name of table
 * - [columnName] - Name of column
 * - [foreignTable] - Type declaration of column
 * - [foreignField] - Type declaration of column
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tableName:string
   columnName:string
   foreignTable:string
   foreignField:string
.description:Adds the specified foreign key to your specified table
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tableName
validators.mandatory:x:@.arguments/*/columnName
validators.mandatory:x:@.arguments/*/foreignTable
validators.mandatory:x:@.arguments/*/foreignField
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite

// Creating our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType

   // Creating our correct SQL according to [databaseType].
   switch:x:@.arguments/*/databaseType

      case:mysql
         strings.concat
            .:"alter table "
            get-value:x:@.arguments/*/tableName
            .:" add foreign key ("
            get-value:x:@.arguments/*/columnName
            .:") references "
            get-value:x:@.arguments/*/foreignTable
            .:" ("
            get-value:x:@.arguments/*/foreignField
            .:")"
         data.execute:x:-
            database-type:x:@.arguments/*/databaseType

      case:sqlite
         strings.concat
            .:"pragma foreign_keys=off; alter table '"
            get-value:x:@.arguments/*/tableName
            .:"' drop column '"
            get-value:x:@.arguments/*/columnName
            .:"'"
         data.execute:x:-
            database-type:x:@.arguments/*/databaseType

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
return
   result:success
