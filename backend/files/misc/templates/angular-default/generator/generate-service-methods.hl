
/*
 * Internal helper file to create service method implementations (Angular style),
 * according to specified [.arguments].
 *
 * Notice, this file creates a service method for every single HTTP endpoint caller
 * has told us he wants to wrap.
 */


/*
 * Iterating through each service endpoint.
 */
.http-service-methods
for-each:x:@.arguments/*/endpoints/*


   /*
    * Figuring out method name.
    */
   strings.split:x:@.dp/#/*/path
      .:/
   .method-name
   set-value:x:@.method-name
      strings.concat
         strings.replace-not-of:x:@strings.split/0/-
            .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
            .:_
         .:_
         strings.capitalize:x:@.dp/#/*/verb


   /*
    * Figuring out method parameters.
    */
   .method-arguments
   switch:x:@.dp/#/*/verb

      case:delete
      case:get


         // Query parameters
         set-value:x:@.method-arguments
            .:" + this.getQueryArgs(args)"


      default


         // Body payload
         set-value:x:@.method-arguments
            .:", args"


   /*
    * Creating our method body.
    */
   .body
   set-value:x:@.body
      strings.concat
         .:"\r\n    return this.httpClient."
         get-value:x:@.dp/#/*/verb
         .:"<any>(environment.apiUrl + '"
         get-value:x:@.dp/#/*/path
         .:"'"
         get-value:x:@.method-arguments
         .:");"


   /*
    * Appending entire method body into [.http-service-methods].
    */
   set-value:x:@.http-service-methods
      strings.concat
         get-value:x:@.http-service-methods
         .:"\r\n\r\n"
         .:"  "
         get-value:x:@.method-name
         .:"(args: any) {"
         get-value:x:@.body
         .:"\r\n  }"



/*
 * Returning TypeScript for method implementations to caller.
 */
return-value:x:@.http-service-methods
