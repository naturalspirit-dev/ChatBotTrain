
/*
 * Internal helper file to create service method implementations (Angular style),
 * according to specified [.arguments].
 *
 * Notice, this file creates a service method for every single HTTP endpoint caller
 * has told us he wants to wrap.
 */


/*
 * Iterating through each service endpoint.
 */
.http-service-methods
for-each:x:@.arguments/*


   /*
    * Creating main property for service class.
    */
   .method
   set-value:x:@.method
      strings.concat
         .:@"
  /**
   * HTTP CRUD service methods for your '"
         get-value:x:@.dp/#/*/component-folder
         .:@"' entities.
   */
  get "
         get-value:x:@.dp/#/*/component-folder
         .:@"() : any {

    return {
"


   /*
    * Iterating through each HTTP verb in method group.
    */
   for-each:x:@.dp/#/*/verbs/*
      get-name:x:@.dp/#
      switch:x:-

         case:post
            
            // Adding 'create' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      /**
       * Creates a new entity.
       *
       * @param args Initial values for your entity
       */
      create: (args: any) => {
        return this.httpClient.post<any>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"',
          args);
      },
"

         case:get
            
            // Adding 'read' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      /**
       * Reads entities from your backend.
       *
       * @param filter Filter condition for items to retrieve
       */
      read: (filter: any) => {
        return this.httpClient.get<any>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"' +
          this.getQueryArgs(filter));
      },
"
            
            // Adding 'count' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      /**
       * Counts entities from your backend.
       *
       * @param filter Filter condition for items to count
       */
      count: (filter: any) => {
        return this.httpClient.get<any>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"-count' +
          this.getQueryArgs(filter));
      },
"

         case:put
            
            // Adding 'update' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      /**
       * Updates one entity in your backend.
       *
       * @param args What item to update, and what values to update it with
       */
      update: (args: any) => {
        return this.httpClient.put<any>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"',
          args);
      },
"

         case:delete
            
            // Adding 'delete' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      /**
       * Deletes one entity from your backend.
       *
       * @param filter Filter condition for item to delete, primary key(s)
       */
      delete: (filter: any) => {
        return this.httpClient.delete<any>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"' +
          this.getQueryArgs(filter));
      },
"



   /*
    * Closing main property for service class, and trimming superflous characters.
    */
   set-value:x:@.method
      strings.concat
         strings.trim-end:x:@.method
            .:"\r\n,"
         .:@"
    }
  }
"

   /*
    * Appending currently iterated method groupd to returned value.
    */
   set-value:x:@.http-service-methods
      strings.concat
         get-value:x:@.http-service-methods
         get-value:x:@.method


/*
 * Returning TypeScript for method implementations to caller.
 */
return-value:x:@.http-service-methods
