/*
 * Automatically generated by Magic
 */

// Angular imports.
import { Observable } from 'rxjs';
import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';

/**
 * Selector component allowing you to have a selector dropdown list
 * during editing/creating of items, for items where you have a foreign key,
 * which is a lookup into another database table. Usage would be
 * something like the following in your HTML.

  <app-magic-selector
    [model]="data.entity"
    key="locale"
    value="language"
    placeholder="Choose a language"
    class="entity-edit-field"
    (change)="changed('language')"
    [getItems]="service.languages.read({limit:-1})">
  </app-magic-selector>

 * The above would create a select list for you, allowing you to
 * select from a list of items, declared in a database table, instead
 * of having user to manually type in the correct key.
 *
 * For the above you have 'data.entity.locale' normally being bound
 * towards an input field, and the services.languages.read method returning
 * a list of items with a 'key' and a 'language', where the value of
 * the 'data.entity.locale' would be expected to be the value of your
 * select list when an item is chosen, with 'language' being its friendly
 * text displayed to the end user and 'locale' being the foreign key's value.
 * 
 * The (change) part is an output emitter, invoked as the currently selected
 * value has been changed.
 */
@Component({
  selector: 'app-magic-selector',
  templateUrl: './magic-selector.component.html',
  styleUrls: ['./magic-selector.component.scss'],
})
export class MagicSelectorComponent implements OnInit {
  /**
   * Model you're databinding towards.
   */
  @Input() public model: any;

  /**
   * Key in the model, that you want this particular object
   * to be databound towards.
   */
  @Input() public key: string;

  /**
   * Readable value for item, being the thing the end user
   * sees as he or she is editing the item.
   */
  @Input() public value: string;

  /**
   * Placeholder value (tooltip) of selector component.
   */
  @Input() public placeholder: string;

  /**
   * Observable callback for component to retrieve items
   * to databound towards from backend HTTP service.
   */
  @Input() public getItems: Observable<any>;

  /**
   * Callback to invoke once item is changed.
   */
  @Output() public change: EventEmitter<any> = new EventEmitter();

  /**
   * Contains actual databound items, after having fetched
   * them from the backend.
   */
  public items: any[];

  /**
   * OnInit implementation.
   */
  public ngOnInit() {

    // Retrieving items from callback provided by consumer.
    this.getItems.subscribe((res) => {

      // Assigning model.
      this.items = res;

    }, (error: any) => console.error('Could not get items in MagicSelector'));
  }

  /**
   * Invoked when value is changed.
   */
  public valueChanged() {

    // Emitting changed event, if consumer provided a callback for it
    this.change?.emit();
  }
}
