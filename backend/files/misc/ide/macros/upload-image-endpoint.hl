
/*
 * Macro for Hyper IDE that creates an upload image endpoint.
 */
.name:"Creates an upload image endpoint"
.description:"Macro for Hyper IDE that creates an 'upload image' HTTP PUT endpoint for you that assumes the image is given as base64 encoded bytes in the [content] argument, and its type specified as [type] - Where [type] is e.g. 'jpg', 'png', 'gif' etc. The endpoint will also be able to take an optional [old_file] argument, which is assumed to be the 'old' file, and will be deleted if it exists. This macro goes perfectly hand in hand with the frontend component called MagicImageComponent, and the method in HttpService called uploadImage."
.arguments
   .
      name:module
      type:string
      description:"Name of module to create an 'upload image endpoint' for"
      mandatory:bool:true
   .
      name:auth
      type:string
      description:Comma separated list of roles users must belong to in order to invoke endpoint
      mandatory:bool:true
   .
      name:name
      type:string
      description:Name of your endpoint that becomes the last parts of its URL
      mandatory:bool:true
      default:upload-image

/*
 * Lambda object executed as macro is actually executed.
 */
.lambda

   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/module
   validators.regex:x:@.arguments/*/module
      regex:^[a-zA-Z0-9_-]+$
   validators.mandatory:x:@.arguments/*/name
   validators.regex:x:@.arguments/*/name
      regex:^[a-zA-Z0-9_-]+$

   /*
    * Figuring out module's complete path.
    */
   .module-path
   set-value:x:@.module-path
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/

   /*
    * Making sure that module exists.
    */
   if
      not
         io.folder.exists:x:@.module-path
      .lambda

         // No such module
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' does not exist"
         throw:x:-
            public:bool:true
            status:int:404

   /*
    * Making sure that module does not already have an 'xxx.put.hl' file.
    */
   strings.concat
      get-value:x:@.module-path
      .:/
      get-value:x:@.arguments/*/name
      .:.put.hl
   if
      io.file.exists:x:@strings.concat
      .lambda

         // File already exists.
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' already has a '"
            get-value:x:@.arguments/*/name
            .:".put.hl' file and hence we cannot create another"
         throw:x:-
            public:bool:true
            status:int:404

   /*
    * Copying main 'upload-image.put.hl' template file from 'misc/idea/templates' folder.
    */
   io.file.copy:/misc/ide/templates/upload-image.put.hl
      get-value:x:@strings.concat

   /*
    * Opening 'xxx.put.hl' file such that we can correctly decorate it
    * according to arguments specified by caller.
    */
   strings.concat
      get-value:x:@.module-path
      .:/
      get-value:x:@.arguments/*/name
      .:.put.hl
   io.file.load:x:@strings.concat
   hyper2lambda:x:@io.file.load


   /*
    * Substituting parameters.
    */
   if
      or
         eq
            get-value:x:@.arguments/*/auth
            .
         eq
            get-value:x:@.arguments/*/auth
            .:
         not
            exists:x:@.arguments/*/auth
      .lambda

         // No [auth] specified.
         remove-nodes:x:@hyper2lambda/**/=[[auth]]

   else

      // Auth specified.
      set-value:x:@hyper2lambda/**/=[[auth]]
         get-value:x:@.arguments/*/auth

   set-value:x:@hyper2lambda/**/=[[module]]
      get-value:x:@.arguments/*/module

   /*
    * Then transforming file to Hyperlambda and saving it again.
    */
   lambda2hyper:x:@hyper2lambda/*
   io.file.save:x:@strings.concat
      get-value:x:@lambda2hyper

   /*
    * Making sure we inform caller that he needs to refresh his folders.
    */
   set-value:x:@.lambda
      .:folders-changed
