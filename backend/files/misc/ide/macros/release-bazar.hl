
/*
 * Macro for Hyper IDE that creates a Bazar app from your module.
 */
.name:Package Bazar app
.description:"Macro for Hyper IDE that creates a Bazar app package from your module and copies the Bazar ZIP file to your local Bazar allowing others to install it from you. Notice, you should probably run the 'ensure-database' macro first if your app depends upon a database to function correctly."
.arguments
   .
      name:name
      type:string
      description:"Your module's friendly name"
      mandatory:bool:true
   .
      name:module
      type:string
      description:"Your module's main root folder"
      mandatory:bool:true
   .
      name:description
      type:string
      description:A friendly descriptive text providing some description to others wanting to install your module
      mandatory:bool:true
   .
      name:version
      type:string
      description:Version you are deploying
      mandatory:bool:true
   .
      name:readme
      type:string
      description:"The URL to your module's README.md file"
      mandatory:bool:false
   .
      name:git
      type:string
      description:"Your module's git repository"
      mandatory:bool:false

/*
 * Lambda object executed as macro is actually executed.
 */
.lambda

   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/version
   validators.mandatory:x:@.arguments/*/module
   validators.regex:x:@.arguments/*/module
      regex:^[a-zA-Z0-9_-]+$

   /*
    * Figuring out module's complete path.
    */
   .module-path
   set-value:x:@.module-path
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/

   /*
    * Making sure that module exists.
    */
   if
      not
         io.folder.exists:x:@.module-path
      .lambda

         // No such module
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' does not exist"
         throw:x:-
            public:bool:true
            status:int:404

   /*
    * Loading all files within module recursively.
    */
   unwrap:x:+/*
   signal:magic.io.file.load-recursively
      .:x:@.module-path

   /*
    * Iterating through each file above, stripping its root folder,
    * and adding to zip stream below.
    */
   for-each:x:@signal/*
      set-value:x:@.dp/#
         strings.replace:x:@.dp/#
            .:/modules
            .:
      add:x:@.lambda/*/io.content.zip-stream
         get-nodes:x:@.dp/#

   /*
    * Zipping file.
    */
   io.content.zip-stream

   /*
    * Figuring out filename to use.
    */
   strings.concat
      .:/misc/bazar/apps/
      get-value:x:@.arguments/*/module
      .:-
      get-value:x:@.arguments/*/version
      .:.zip

   /*
    * Saving ZIP stream.
    */
   io.stream.save-file:x:@strings.concat
      get-value:x:@io.content.zip-stream
