
/*
 * Upload image endpoint template file.
 *
 * This file creates an HTTP PUT endpoint that allows you to upload a single image file and store
 * it in a specified folder on the server. The endpoint will delete the [old_file] file if it exists,
 * and [old_file] is given.
 *
 * NOTICE! This file should probably be consumed as a Macro, and not as a template, since this
 * will correctly decorate your file with the correct properties.
 */
.description:Upload image file endpoint
.type:image-upload
.arguments
   old_file:string
   content:string
   type:string

/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/content
validators.mandatory:x:@.arguments/*/type
validators.enum:x:@.arguments/*/type
   .:jpg
   .:jpeg
   .:png
   .:gif
   .:bmp

/*
 * Verifying user has access to invoke endpoint.
 */
auth.ticket.verify:[[auth]]

/*
 * Folder where file should be saved.
 */
.folder
set-value:x:@.folder
   strings.concat
      .:/etc/
      .:[[module]]
      .:/

/*
 * Verifying the folder exists, and if not, creating it.
 */
if
   not
      io.folder.exists:x:@.folder
   .lambda

      // Need to create folder.
      io.folder.create:x:@.folder

else

   /*
    * Checking if [old_file] is specified, and existing.
    */
   .old-file-full-path
   set-value:x:@.old-file-full-path
      strings.concat
         get-value:x:@.folder
         get-value:x:@.arguments/*/old_file
   if
      and
         not
            eq
               get-value:x:@.arguments/*/old_file
               .
         not
            eq
               get-value:x:@.arguments/*/old_file
               .:
         io.file.exists:x:@.old-file-full-path
      .lambda

         // Old file exists, deleting it.
         io.file.delete:x:@.old-file-full-path

/*
 * Creating a unique filename for image.
 */
.filename
guid.new
set-value:x:@.filename
   strings.concat
      .:
      convert:x:@guid.new
         type:string
      .:.
      get-value:x:@.arguments/*/type

/*
 * Saving file with the specified filename to our '/etc/MODULE_NAME/' folder.
 */
.full-path
set-value:x:@.full-path
   strings.concat
      get-value:x:@.folder
      get-value:x:@.filename
io.file.save.binary:x:@.full-path
   convert:x:@.arguments/*/content
      type:from-base64

/*
 * Returning success to caller, and the filename on our server.
 */
unwrap:x:+/*/filename
return
   result:success
   filename:x:@.filename
