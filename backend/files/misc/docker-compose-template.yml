
# Docker template file to couple frontend, backend, and MySQL database instance into one.
# This file is a template, allowing you to generate your own custom
# docker-compose.yml file, that generates a LetsEncrypt/certbot/acme certificate and key for
# your domain and API-domain of choice, in addition to also installing Magic, both the
# backend and the frontend as docker containers.

# This file assumes you create two DNS records, one for each of the following domains
# 1. {{domain}} - Which will be your Magic Dashboard / Frontend URL, pointing to your main Magic dashboard
# 2. {{api-domain}} - Which will be your Magic API / Backend URL, pointing to your Magic backend parts

# For instance, if your server's public IP address is 123.123.123.123, you have to create two DNS a
# records pointing the following domains to your IP address.

# 1. DNS A record - {{domain}}        ==> 123.123.123.123
# 2. DNS A record - {{api-domain}}    ==> 123.123.123.123

# Once you've done this, you can access the frontend URL, and a LetsEncrypt HTTPS certificate and key will
# be automatically generated and installed in your server, giving you HTTPS access to your site, allowing
# you to access your Magic dashboard securely.

version: "3.3"

services:

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ThisIsNotAGoodPassword
    volumes:
      - database:/var/lib/mysql

  backend:
    image: servergardens/magic-backend:latest
    depends_on:
      - db
    restart: always
    ports:
      - 4444:80
    volumes:
      - files:/magic/files

  frontend:
    image: servergardens/magic-frontend:latest
    depends_on:
      - backend
    restart: always

  nginx:
    image: valian/docker-nginx-auto-ssl
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ssl_data:/etc/resty-auto-ssl
    environment:
      ALLOWED_DOMAINS: '({{domain}}|{{api-domain}})'
      SITES: '{{domain}}=frontend:80;{{api-domain}}=backend:4444'

volumes:
  database:
  files:
  ssl_data: 
