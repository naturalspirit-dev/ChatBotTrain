
// CRUD endpoint reading records from your departments table in your tickets database filtering on name with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with public HTTP caching for 48 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   departments.name.like:string
   departments.name.eq:string
.description:CRUD endpoint reading records from your departments table in your tickets database filtering on name with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with public HTTP caching for 48 seconds
.type:crud-read

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:public, max-age=48

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.9

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,translator

// Opening up our database connection.
data.connect:tickets

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:departments
      columns
         departments.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
