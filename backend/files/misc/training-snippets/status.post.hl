
// CRUD endpoint creating one record in your status table in your tickets database taking name with authentication and authorisation for guest,root roles with reCAPTCHA value of 0.9 publishing tickets.status.post socket message when invoked
.arguments
   recaptcha:string
   name:string
.description:CRUD endpoint creating one record in your status table in your tickets database taking name with authentication and authorisation for guest,root roles with reCAPTCHA value of 0.9 publishing tickets.status.post socket message when invoked
.type:crud-create

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.9

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,root

// Opening up database connection.
data.connect:tickets

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      table:status
      return-id:bool:false
      values

   // Returning the correct status code.
   response.status.set:201

   // Publishing socket message
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:tickets.status.post
      args

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      result:success
