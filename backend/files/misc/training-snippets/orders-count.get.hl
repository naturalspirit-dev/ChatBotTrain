
// Endpoint counting records from your Orders table in your northwind database filtering on OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry with authentication and authorisation for guest,root roles with public HTTP caching for 30 seconds
.arguments
   Orders.OrderID.eq:long
   Orders.CustomerID.like:string
   Orders.CustomerID.eq:string
   Orders.EmployeeID.eq:long
   Orders.OrderDate.eq:date
   Orders.RequiredDate.eq:date
   Orders.ShippedDate.eq:date
   Orders.ShipVia.eq:long
   Orders.Freight.eq:decimal
   Orders.ShipName.like:string
   Orders.ShipName.eq:string
   Orders.ShipAddress.like:string
   Orders.ShipAddress.eq:string
   Orders.ShipCity.like:string
   Orders.ShipCity.eq:string
   Orders.ShipRegion.like:string
   Orders.ShipRegion.eq:string
   Orders.ShipPostalCode.like:string
   Orders.ShipPostalCode.eq:string
   Orders.ShipCountry.like:string
   Orders.ShipCountry.eq:string
.description:Endpoint counting records from your Orders table in your northwind database filtering on OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry with authentication and authorisation for guest,root roles with public HTTP caching for 30 seconds
.type:crud-count

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:public, max-age=30

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,root

// Opening up our database connection.
data.connect:northwind

   // Parametrising our read invocation.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Orders
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
