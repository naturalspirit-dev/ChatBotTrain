
// CRUD endpoint updating one record in your transactions table in your stripe database filtering which item to update with transaction updating username, amount, invoice, type, payment_method, affiliate fields with authentication and authorisation for admin,guest roles publishing stripe.transactions.put socket message when invoked
.arguments
   transaction:string
   amount:long
   invoice:string
   type:string
   payment_method:string
   affiliate:string
.description:CRUD endpoint updating one record in your transactions table in your stripe database filtering which item to update with transaction updating username, amount, invoice, type, payment_method, affiliate fields with authentication and authorisation for admin,guest roles publishing stripe.transactions.put socket message when invoked
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/transaction

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest
.foreign-keys
   .
      column:username
      table:customers
      foreign_column:username
      foreign_name:username
      long:bool:true

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:stripe

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:transactions
      values
      where
         and

            // Table is locked on the following field.
            username.eq:x:@auth.ticket.get

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:stripe.transactions.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
