
// CRUD endpoint updating one record in your Orders table in your northwind database filtering which item to update with OrderID updating CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry fields with logging with authentication and authorisation for guest,root roles publishing northwind.orders.put socket message when invoked
.arguments
   OrderID:long
   CustomerID:string
   EmployeeID:long
   OrderDate:date
   RequiredDate:date
   ShippedDate:date
   ShipVia:long
   ShipName:string
   ShipAddress:string
   ShipCity:string
   ShipRegion:string
   ShipPostalCode:string
   ShipCountry:string
.description:CRUD endpoint updating one record in your Orders table in your northwind database filtering which item to update with OrderID updating CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry fields with logging with authentication and authorisation for guest,root roles publishing northwind.orders.put socket message when invoked
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/OrderID

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,root

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:northwind.Orders entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Opening up our database connection.
data.connect:northwind

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:Orders
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:northwind.orders.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
