
// CRUD endpoint reading records from your transactions table in your stripe database filtering on transaction, created, username, amount, invoice, type, payment_method, affiliate with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with public HTTP caching for 48 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   transactions.transaction.like:string
   transactions.transaction.eq:string
   transactions.created.eq:date
   transactions.amount.eq:long
   transactions.invoice.like:string
   transactions.invoice.eq:string
   transactions.type.like:string
   transactions.type.eq:string
   transactions.payment_method.like:string
   transactions.payment_method.eq:string
   transactions.affiliate.like:string
   transactions.affiliate.eq:string
.description:CRUD endpoint reading records from your transactions table in your stripe database filtering on transaction, created, username, amount, invoice, type, payment_method, affiliate with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with public HTTP caching for 48 seconds
.type:crud-read

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:public, max-age=48

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,translator

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:transactions
      columns
         transactions.transaction
         transactions.created
         transactions.amount
         transactions.invoice
         transactions.type
         transactions.payment_method
         transactions.affiliate
      where
         and

            // Table is locked on the following field.
            username.eq:x:@auth.ticket.get

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
