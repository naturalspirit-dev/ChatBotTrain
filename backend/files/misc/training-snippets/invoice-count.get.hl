
// Endpoint counting records from your Invoice table in your chinook database filtering on InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total with authentication and authorisation for admin roles with public HTTP caching for 120 seconds
.arguments
   Invoice.InvoiceId.eq:long
   Invoice.CustomerId.eq:long
   Invoice.InvoiceDate.eq:date
   Invoice.BillingAddress.like:string
   Invoice.BillingAddress.eq:string
   Invoice.BillingCity.like:string
   Invoice.BillingCity.eq:string
   Invoice.BillingState.like:string
   Invoice.BillingState.eq:string
   Invoice.BillingCountry.like:string
   Invoice.BillingCountry.eq:string
   Invoice.BillingPostalCode.like:string
   Invoice.BillingPostalCode.eq:string
   Invoice.Total.eq:decimal
.description:Endpoint counting records from your Invoice table in your chinook database filtering on InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total with authentication and authorisation for admin roles with public HTTP caching for 120 seconds
.type:crud-count

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:public, max-age=120

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:chinook

   // Parametrising our read invocation.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Invoice
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
