
// CRUD endpoint deleting one record from your payments table in your stripe database with payment matching argument with authentication and authorisation for guest roles with reCAPTCHA value of 0.9
.arguments
   recaptcha:string
   payment:string
.description:CRUD endpoint deleting one record from your payments table in your stripe database with payment matching argument with authentication and authorisation for guest roles with reCAPTCHA value of 0.9
.type:crud-delete

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.9

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/payment

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:stripe

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:payments
      where
         and

            // Table is locked on the following field.
            username.eq:x:@auth.ticket.get

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
