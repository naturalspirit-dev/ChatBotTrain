
// CRUD endpoint deleting one record from your priorities table in your tickets database with name matching argument with logging with authentication and authorisation for guest roles publishing tickets.priorities.delete socket message when invoked
.arguments
   name:string
.description:CRUD endpoint deleting one record from your priorities table in your tickets database with name matching argument with logging with authentication and authorisation for guest roles publishing tickets.priorities.delete socket message when invoked
.type:crud-delete

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:tickets.priorities entry deleted
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/name

// Opening up our database connection.
data.connect:tickets

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:priorities
      where
         and

   // Publishing socket message
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:tickets.priorities.delete
      args

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
