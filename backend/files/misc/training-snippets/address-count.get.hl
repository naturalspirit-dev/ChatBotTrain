
// Counts items from your address table in your sakila database according to the specified arguments joining on address
.arguments
   operator:string
   address.address_id.eq:long
   address.address.like:string
   address.address.eq:string
   address.address2.like:string
   address.address2.eq:string
   address.district.like:string
   address.district.eq:string
   address.city_id.eq:long
   address.postal_code.like:string
   address.postal_code.eq:string
   address.phone.like:string
   address.phone.eq:string
   address.last_update.eq:date
   city_id.city.eq:string
   city_id.city.like:string
.description:Counts items from your address table in your sakila database according to the specified arguments
.type:crud-count

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:sakila

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/operator
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:address
         join:city
            as:city_id
            type:left
            on
               and
                  address.city_id:city_id.city_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
