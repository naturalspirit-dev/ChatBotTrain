
// CRUD endpoint updating one record in your translations table in your babelfish database filtering which item to update with id, locale updating content fields with logging with authentication and authorisation for guest,translator roles
.arguments
   id:string
   locale:string
   content:string
.description:CRUD endpoint updating one record in your translations table in your babelfish database filtering which item to update with id, locale updating content fields with logging with authentication and authorisation for guest,translator roles
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/locale
validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,translator

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:babelfish.translations entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper
.foreign-keys
   .
      column:locale
      table:languages
      foreign_column:locale
      foreign_name:locale
      long:bool:true

// Opening up our database connection.
data.connect:babelfish

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[2,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,2]

   // Invoking our update slot.
   data.update
      table:translations
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
