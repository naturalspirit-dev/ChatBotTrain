
// CRUD endpoint updating one record in your messages table in your tickets database filtering which item to update with id updating ticket, user, description fields with logging with authentication and authorisation for admin roles
.arguments
   id:long
   ticket:long
   description:string
.description:CRUD endpoint updating one record in your messages table in your tickets database filtering which item to update with id updating ticket, user, description fields with logging with authentication and authorisation for admin roles
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:tickets.messages entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper
.foreign-keys
   .
      column:ticket
      table:tickets
      foreign_column:id
      foreign_name:user
      long:bool:true

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:tickets

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:messages
      values
      where
         and

            // Table is locked on the following field.
            user.eq:x:@auth.ticket.get

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
