
// Returns items from your payment table in your sakila database according to the specified arguments
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   operator:string
   payment.payment_id.eq:long
   payment.customer_id.eq:long
   payment.staff_id.eq:long
   payment.rental_id.eq:long
   payment.amount.eq:decimal
   payment.payment_date.eq:date
   payment.last_update.eq:date
   customer_id.first_name.eq:string
   customer_id.first_name.like:string
   staff_id.first_name.eq:string
   staff_id.first_name.like:string
.description:Returns items from your payment table in your sakila database according to the specified arguments
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:sakila

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:payment
         join:customer
            as:customer_id
            type:left
            on
               and
                  payment.customer_id:customer_id.customer_id
         join:staff
            as:staff_id
            type:left
            on
               and
                  payment.staff_id:staff_id.staff_id
      columns
         payment.payment_id
         payment.customer_id
         payment.staff_id
         payment.rental_id
         payment.amount
         payment.payment_date
         payment.last_update
         customer_id.first_name
            as:customer_id.first_name
         staff_id.first_name
            as:staff_id.first_name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
