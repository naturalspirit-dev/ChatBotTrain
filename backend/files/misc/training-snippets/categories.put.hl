
// CRUD endpoint updating one record in your Categories table in your northwind database filtering which item to update with CategoryID updating CategoryName, Description, Picture fields with authentication and authorisation for guest,root,translator roles with reCAPTCHA value of 0.3
.arguments
   recaptcha:string
   CategoryID:long
   CategoryName:string
   Description:string
   Picture:string
.description:CRUD endpoint updating one record in your Categories table in your northwind database filtering which item to update with CategoryID updating CategoryName, Description, Picture fields with authentication and authorisation for guest,root,translator roles with reCAPTCHA value of 0.3
.type:crud-update

// Columns with custom handling as we generate a frontend
.handling
   Picture:image

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/CategoryID

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.3

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,root,translator

// Opening up our database connection.
data.connect:northwind

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:Categories
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
