
// Endpoint counting records from your payments table in your stripe database filtering on payment, username, amount, currency, payment_method, completed with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with private HTTP caching for 60 seconds
.arguments
   recaptcha:string
   payments.payment.like:string
   payments.payment.eq:string
   payments.amount.eq:long
   payments.currency.like:string
   payments.currency.eq:string
   payments.payment_method.like:string
   payments.payment_method.eq:string
   payments.completed.like:string
   payments.completed.eq:string
.description:Endpoint counting records from your payments table in your stripe database filtering on payment, username, amount, currency, payment_method, completed with authentication and authorisation for guest,translator roles with reCAPTCHA value of 0.9 with private HTTP caching for 60 seconds
.type:crud-count

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:private, max-age=60

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,translator

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:payments
      columns
         count(*)
            as:count
      where
         and

            // Table is locked on the following field.
            username.eq:x:@auth.ticket.get
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
