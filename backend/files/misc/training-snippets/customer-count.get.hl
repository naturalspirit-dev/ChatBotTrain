
// Counts items from your customer table in your sakila database according to the specified arguments
.arguments
   operator:string
   customer.customer_id.eq:long
   customer.store_id.eq:long
   customer.first_name.like:string
   customer.first_name.eq:string
   customer.last_name.like:string
   customer.last_name.eq:string
   customer.email.like:string
   customer.email.eq:string
   customer.address_id.eq:long
   customer.active.like:string
   customer.active.eq:string
   customer.create_date.eq:date
   customer.last_update.eq:date
   address_id.address.eq:string
   address_id.address.like:string
.description:Counts items from your customer table in your sakila database according to the specified arguments
.type:crud-count

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:sakila

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/operator
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:customer
         join:address
            as:address_id
            type:left
            on
               and
                  customer.address_id:address_id.address_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
