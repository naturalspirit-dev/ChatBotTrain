
// Endpoint counting records from your Track table in your chinook database filtering on TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice with authentication and authorisation for root roles with reCAPTCHA value of 0.5
.arguments
   recaptcha:string
   Track.TrackId.eq:long
   Track.Name.like:string
   Track.Name.eq:string
   Track.AlbumId.eq:long
   Track.MediaTypeId.eq:long
   Track.GenreId.eq:long
   Track.Composer.like:string
   Track.Composer.eq:string
   Track.Milliseconds.eq:long
   Track.Bytes.eq:long
   Track.UnitPrice.eq:decimal
.description:Endpoint counting records from your Track table in your chinook database filtering on TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice with authentication and authorisation for root roles with reCAPTCHA value of 0.5
.type:crud-count

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:chinook

   // Parametrising our read invocation.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Track
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
