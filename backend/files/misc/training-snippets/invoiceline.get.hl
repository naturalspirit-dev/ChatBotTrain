
// CRUD endpoint reading records from your InvoiceLine table in your chinook database filtering on InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity with authentication and authorisation for admin roles with private HTTP caching for 120 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   InvoiceLine.InvoiceLineId.eq:long
   InvoiceLine.InvoiceId.eq:long
   InvoiceLine.TrackId.eq:long
   InvoiceLine.UnitPrice.eq:decimal
   InvoiceLine.Quantity.eq:long
.description:CRUD endpoint reading records from your InvoiceLine table in your chinook database filtering on InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity with authentication and authorisation for admin roles with private HTTP caching for 120 seconds
.type:crud-read

// Adding Cache-Control HTTP header
response.headers.set
   Cache-Control:private, max-age=120

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:chinook

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:InvoiceLine
      columns
         InvoiceLine.InvoiceLineId
         InvoiceLine.InvoiceId
         InvoiceLine.TrackId
         InvoiceLine.UnitPrice
         InvoiceLine.Quantity
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
