
// CRUD endpoint deleting one record from your film_actor table in your sakila database with actor_id, film_id matching argument with logging publishing sakila.film_actor.delete socket message when invoked
.arguments
   actor_id:long
   film_id:long
.description:CRUD endpoint deleting one record from your film_actor table in your sakila database with actor_id, film_id matching argument with logging publishing sakila.film_actor.delete socket message when invoked
.type:crud-delete

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:sakila.film_actor entry deleted
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/actor_id
validators.mandatory:x:@.arguments/*/film_id

// Opening up our database connection.
data.connect:sakila

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:film_actor
      where
         and

   // Publishing socket message
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:sakila.film_actor.delete
      args

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
