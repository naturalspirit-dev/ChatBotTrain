
// CRUD endpoint updating one record in your Album table in your chinook database filtering which item to update with AlbumId updating Title, ArtistId fields with logging with authentication and authorisation for guest,translator roles
.arguments
   AlbumId:long
   Title:string
   ArtistId:long
.description:CRUD endpoint updating one record in your Album table in your chinook database filtering which item to update with AlbumId updating Title, ArtistId fields with logging with authentication and authorisation for guest,translator roles
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/AlbumId

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest,translator

// Logging invocation
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:chinook.Album entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper
.foreign-keys
   .
      column:ArtistId
      table:Artist
      foreign_column:ArtistId
      foreign_name:Name
      long:bool:true

// Opening up our database connection.
data.connect:chinook

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:Album
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
