
/*
 * Copyright(c) Thomas Hansen thomas@servergardens.com, all right reserved
 */

// Angular and system imports.
import { Component, OnInit } from '@angular/core';

// Utility imports.
import moment from 'moment';
import { ChartOptions } from 'chart.js';
import { Label, SingleDataSet } from 'ng2-charts';

// Application specific imports.
import { Count } from 'src/app/models/count.model';
import { Endpoint } from 'src/app/models/endpoint.model';
import { FeedbackService } from 'src/app/services/feedback.service';
import { LogItem } from 'src/app/components/log/models/log-item.model';
import { LogService } from 'src/app/components/log/services/log.service';
import { UserService } from 'src/app/components/auth/services/user.service';
import { RoleService } from 'src/app/components/auth/services/role.service';
import { AuthService } from 'src/app/components/auth/services/auth.service';
import { TaskService } from 'src/app/components/tasks/services/task.service';
import { DiagnosticsService } from 'src/app/components/diagnostics/services/diagnostics.service';

// Importing global bar chart colors.
import barColors from '../bar_chart_colors.json';

/**
 * Component that allows user to view diagnostics information
 * about his installation specific.
 */
@Component({
  selector: 'app-diagnostics-overview',
  templateUrl: './diagnostics-overview.component.html',
  styleUrls: ['./diagnostics-overview.component.scss']
})
export class DiagnosticsOverviewComponent implements OnInit {

  /**
   * Number of users in installation.
   */
  public userCount: number = null;

  /**
   * Number of roles in installation.
   */
  public roleCount: number = null;

  /**
   * Number of log items in installation.
   */
  public logCount: number = null;

  /**
   * Oldest log item in installation.
   */
  public age: Date = null;

  /**
   * Total LOC count Magic has generated.
   */
  public loc: number = -1;

  /**
   * Number of frontend LOC generated by Magic.
   */
  public frontend: number = -1;

  /**
   * Number of backend LOC generated by Magic.
   */
  public backend: number = -1;

  /**
   * Total number of errors the system has logged since it was installed.
   */
  public errors: number = -1;

  /**
   * Total count of tasks in system
   */
  public taskCount: number = -1;

  /**
   * Total number of endpoints in the system.
   */
  public endpoints: number = -1;

  /**
   * Backend version as returned from server.
   */
  public version: string;

  /**
   * Options for log type pie chart.
   */
  public assumptionsOptions: ChartOptions = {
    responsive: true,
    legend: {
      display: false,
    }
  };

  /**
   * Labels for log type pie chart.
   */
  public assumptionsLabels: Label[] = null;

  /**
   * Data set for log type pie chart.
   */
  public assumptionsData: SingleDataSet = null;

  /**
   * Options for log items per day bar chart.
   */
  public daysOptions: ChartOptions = {
    responsive: true,
    legend: {
      display: false,
    }
  };

  /**
   * Labels for log items per day bar chart.
   */
  public daysLabels: Label[] = [];

  /**
   * Dataset for log items per day bar chart.
   */
  public daysData: SingleDataSet = null;

  /**
   * Common bar chart colors.
   */
  public colors = barColors;

  /**
   * Creates an instance of your component.
   * 
   * @param logService Needed to retrieve LOC statistics
   * @param userService Needed to count users in installation
   * @param roleService Needed to count roles in system
   * @param taskService Needed to count tasks in installation
   * @param authService Needed to retrieve number of endpoints in installation
   * @param diagnosticsService Needed to retrieve health data from backend
   * @param feedbackService Needed to display errors to user if errors occurs
   */
  constructor(
    private logService: LogService,
    private userService: UserService,
    private roleService: RoleService,
    private taskService: TaskService,
    private authService: AuthService,
    private diagnosticsService: DiagnosticsService,
    private feedbackService: FeedbackService) { }

  /**
   * Implementation of OnInit.
   */
  public ngOnInit() {

    // Counting users in installation.
    this.userService.count().subscribe((count: Count) => {
      this.userCount = count.count;
    }, (error: any) => this.feedbackService.showError(error));

    // Counting roles in installation.
    this.roleService.count().subscribe((count: Count) => {
      this.roleCount = count.count;
    }, (error: any) => this.feedbackService.showError(error));

    // Counting log items in installation.
    this.logService.count().subscribe((count: Count) => {
      this.logCount = count.count;
    }, (error: any) => this.feedbackService.showError(error));

    // Retrieving oldest log item in installation.
    this.logService.get(1).subscribe((logItem: LogItem) => {
      this.age = new Date(logItem.created);
    }, (error: any) => this.feedbackService.showError(error));

    // Retrieving LOC statistics.
    this.diagnosticsService.getLoc().subscribe((res: any) => {
      this.loc = res.backend + res.frontend;
      this.frontend = res.frontend;
      this.backend = res.backend;
    });

    // Retrieving log items per day type of statistics.
    this.diagnosticsService.statisticsDays().subscribe((res: any[]) => {
      this.daysData = res.map(x => x.count);
      this.daysLabels = res.map(x => moment(new Date(x.date)).format("D. MMM"));
    });

    // Retrieving log items per type from backend.
    this.diagnosticsService.statisticsDays('Assumption test failed, test file:').subscribe((res: any[]) => {
      this.assumptionsData = res.map(x => x.count);
      this.assumptionsLabels = res.map(x => moment(new Date(x.date)).format("D. MMM"));
    });

    // Retrieving log items per type from backend.
    this.diagnosticsService.statisticsType().subscribe((res: any[]) => {
      this.errors = 0;
      for (const idx of res) {
        if (idx.type === 'error' || idx.type === 'fatal') {
          this.errors += idx.count;
        }
      }
    });

    // Counting tasks in system.
    this.taskService.count().subscribe((count: Count) => {
      this.taskCount = count.count;
    });

    // Counting endpoints in system.
    this.authService.getEndpoints().subscribe((endpoints: Endpoint[]) => {
      this.endpoints = endpoints.length;
    });

    this.diagnosticsService.version().subscribe((version: any) => {
      this.version = version.version;
    });
  }
}
