
/*
 * Magic Cloud, copyright Aista, Ltd. See the attached LICENSE file for details.
 */
import { Component, ComponentFactoryResolver, OnInit } from '@angular/core';

// Application specific imports.
import { Messages } from 'src/app/models/messages.model';
import { CrudifyService } from '../services/crudify.service';
import { ConfigService } from 'src/app/services/config.service';
import { BackendService } from 'src/app/services/backend.service';
import { MessageService } from 'src/app/services/message.service';
import { FeedbackService } from 'src/app/services/feedback.service';
import { CrudFrontendExtraComponent } from './crud-frontend-extra/crud-frontend-extra.component';

/**
 * Crudifier component for generating a frontend from
 * meta information retrieved from backend.
 */
@Component({
  selector: 'app-crud-frontend',
  templateUrl: './crud-frontend.component.html'
})
export class CrudFrontendComponent implements OnInit {

  /**
   * Available templates user can select.
   */
  templates: string[] = [];

  /**
   * Currently selected temnplate.
   */
  template: string = null;

  /**
   * Name user wants to use for his app.
   */
  name = '';

  /**
   * Copyright notice to use for generated files.
   */
  copyright = 'Automatically generated by Magic';

  /**
   * Creates an instance of your component.
   * 
   * @param resolver Needed to be able to create component factory to create dynamically inject extra information component
   * @param crudifyService Needed to retrieve templates, meta information, and actually generate frontend
   * @param messageService Needed to be able to publish messages for creating child component
   * @param feedbackService Needed to provide feedback to user
   * @param backendService Needed to populate the default value of the API URL.
   * @param configService Needed to retrieve user's email address
   */
  constructor(
    private resolver: ComponentFactoryResolver,
    private crudifyService: CrudifyService,
    private messageService: MessageService,
    private feedbackService:FeedbackService,
    private backendService: BackendService,
    private configService: ConfigService) { }

  /**
   * Implementation of OnInit.
   */
  ngOnInit() {
    this.crudifyService.templates().subscribe({
      next: (result: string[]) => {
        this.templates = result || [];
      },
      error: (error: any) => this.feedbackService.showError(error)});
  }

  /**
   * Invoked when user selects a template.
   */
  templateChanged() {
    this.messageService.sendMessage({
      name: Messages.CLEAR_COMPONENTS,
    });
    const componentFactory = this.resolver.resolveComponentFactory(CrudFrontendExtraComponent);
    this.messageService.sendMessage({
      name: Messages.INJECT_COMPONENT,
      content: {
        componentFactory,
        data: {
          template: this.template
        }
      }
    });
  }

  /**
   * Invoked when user clicks the generate button.
   * Check the email address' validity to prevent server error
   */
  generate() {
    this.messageService.sendMessage({
      name: 'app.generator.generate-frontend',
      content: {
        template: this.template,
        name: this.name,
        copyright: this.copyright,
        apiUrl: this.backendService.active.url,
        deployLocally: true,
      }
    });
  }
}
