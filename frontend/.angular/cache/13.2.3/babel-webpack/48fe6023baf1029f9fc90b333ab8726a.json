{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Arg, Subject } from \"./Utils\";\nvar DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\n/** Represents a connection to a SignalR Hub. */\n\nvar HubConnection =\n/** @class */\nfunction () {\n  function HubConnection(connection, logger, protocol) {\n    var _this = this;\n\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.logger = logger;\n    this.protocol = protocol;\n    this.connection = connection;\n    this.handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = function (data) {\n      return _this.processIncomingData(data);\n    };\n\n    this.connection.onclose = function (error) {\n      return _this.connectionClosed(error);\n    };\n\n    this.callbacks = {};\n    this.methods = {};\n    this.closedCallbacks = [];\n    this.id = 0;\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  HubConnection.create = function (connection, logger, protocol) {\n    return new HubConnection(connection, logger, protocol);\n  };\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.start = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var handshakeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            handshakeRequest = {\n              protocol: this.protocol.name,\n              version: this.protocol.version\n            };\n            this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n            this.receivedHandshakeResponse = false;\n            return [4\n            /*yield*/\n            , this.connection.start(this.protocol.transferFormat)];\n\n          case 1:\n            _a.sent();\n\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\n            return [4\n            /*yield*/\n            , this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];\n\n          case 2:\n            _a.sent();\n\n            this.logger.log(LogLevel.Information, \"Using HubProtocol '\" + this.protocol.name + \"'.\"); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n            this.cleanupTimeout();\n            this.configureTimeout();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.stop = function () {\n    this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n    this.cleanupTimeout();\n    return this.connection.stop();\n  };\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  HubConnection.prototype.stream = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createStreamInvocation(methodName, args);\n    var subject = new Subject(function () {\n      var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);\n\n      var cancelMessage = _this.protocol.writeMessage(cancelInvocation);\n\n      delete _this.callbacks[invocationDescriptor.invocationId];\n      return _this.connection.send(cancelMessage);\n    });\n\n    this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n      if (error) {\n        subject.error(error);\n        return;\n      }\n\n      if (invocationEvent.type === MessageType.Completion) {\n        if (invocationEvent.error) {\n          subject.error(new Error(invocationEvent.error));\n        } else {\n          subject.complete();\n        }\n      } else {\n        subject.next(invocationEvent.item);\n      }\n    };\n\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    this.connection.send(message).catch(function (e) {\n      subject.error(e);\n      delete _this.callbacks[invocationDescriptor.invocationId];\n    });\n    return subject;\n  };\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.send = function (methodName) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createInvocation(methodName, args, true);\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    return this.connection.send(message);\n  };\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.invoke = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createInvocation(methodName, args, false);\n    var p = new Promise(function (resolve, reject) {\n      _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (invocationEvent.type === MessageType.Completion) {\n          var completionMessage = invocationEvent;\n\n          if (completionMessage.error) {\n            reject(new Error(completionMessage.error));\n          } else {\n            resolve(completionMessage.result);\n          }\n        } else {\n          reject(new Error(\"Unexpected message type: \" + invocationEvent.type));\n        }\n      };\n\n      var message = _this.protocol.writeMessage(invocationDescriptor);\n\n      _this.connection.send(message).catch(function (e) {\n        reject(e);\n        delete _this.callbacks[invocationDescriptor.invocationId];\n      });\n    });\n    return p;\n  };\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  HubConnection.prototype.on = function (methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this.methods[methodName]) {\n      this.methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this.methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this.methods[methodName].push(newMethod);\n  };\n\n  HubConnection.prototype.off = function (methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    var handlers = this.methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      var removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this.methods[methodName];\n        }\n      }\n    } else {\n      delete this.methods[methodName];\n    }\n  };\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  HubConnection.prototype.onclose = function (callback) {\n    if (callback) {\n      this.closedCallbacks.push(callback);\n    }\n  };\n\n  HubConnection.prototype.processIncomingData = function (data) {\n    this.cleanupTimeout();\n\n    if (!this.receivedHandshakeResponse) {\n      data = this.processHandshakeResponse(data);\n      this.receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      var messages = this.protocol.parseMessages(data, this.logger);\n\n      for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n        var message = messages_1[_i];\n\n        switch (message.type) {\n          case MessageType.Invocation:\n            this.invokeClientMethod(message);\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            var callback = this.callbacks[message.invocationId];\n\n            if (callback != null) {\n              if (message.type === MessageType.Completion) {\n                delete this.callbacks[message.invocationId];\n              }\n\n              callback(message);\n            }\n\n            break;\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            this.logger.log(LogLevel.Information, \"Close message received from server.\"); // We don't want to wait on the stop itself.\n            // tslint:disable-next-line:no-floating-promises\n\n            this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\n            break;\n\n          default:\n            this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\n            break;\n        }\n      }\n    }\n\n    this.configureTimeout();\n  };\n\n  HubConnection.prototype.processHandshakeResponse = function (data) {\n    var _a;\n\n    var responseMessage;\n    var remainingData;\n\n    try {\n      _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];\n    } catch (e) {\n      var message = \"Error parsing handshake response: \" + e;\n      this.logger.log(LogLevel.Error, message);\n      var error = new Error(message); // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n\n      this.connection.stop(error);\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      var message = \"Server returned handshake error: \" + responseMessage.error;\n      this.logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n\n      this.connection.stop(new Error(message));\n    } else {\n      this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    return remainingData;\n  };\n\n  HubConnection.prototype.configureTimeout = function () {\n    var _this = this;\n\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this.timeoutHandle = setTimeout(function () {\n        return _this.serverTimeout();\n      }, this.serverTimeoutInMilliseconds);\n    }\n  };\n\n  HubConnection.prototype.serverTimeout = function () {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise.\n    // tslint:disable-next-line:no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  };\n\n  HubConnection.prototype.invokeClientMethod = function (invocationMessage) {\n    var _this = this;\n\n    var methods = this.methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      methods.forEach(function (m) {\n        return m.apply(_this, invocationMessage.arguments);\n      });\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        var message = \"Server requested a response, which is not supported in this version of the client.\";\n        this.logger.log(LogLevel.Error, message); // We don't need to wait on this Promise.\n        // tslint:disable-next-line:no-floating-promises\n\n        this.connection.stop(new Error(message));\n      }\n    } else {\n      this.logger.log(LogLevel.Warning, \"No client method with the name '\" + invocationMessage.target + \"' found.\");\n    }\n  };\n\n  HubConnection.prototype.connectionClosed = function (error) {\n    var _this = this;\n\n    var callbacks = this.callbacks;\n    this.callbacks = {};\n    Object.keys(callbacks).forEach(function (key) {\n      var callback = callbacks[key];\n      callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\n    });\n    this.cleanupTimeout();\n    this.closedCallbacks.forEach(function (c) {\n      return c.apply(_this, [error]);\n    });\n  };\n\n  HubConnection.prototype.cleanupTimeout = function () {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  };\n\n  HubConnection.prototype.createInvocation = function (methodName, args, nonblocking) {\n    if (nonblocking) {\n      return {\n        arguments: args,\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    } else {\n      var id = this.id;\n      this.id++;\n      return {\n        arguments: args,\n        invocationId: id.toString(),\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    }\n  };\n\n  HubConnection.prototype.createStreamInvocation = function (methodName, args) {\n    var id = this.id;\n    this.id++;\n    return {\n      arguments: args,\n      invocationId: id.toString(),\n      target: methodName,\n      type: MessageType.StreamInvocation\n    };\n  };\n\n  HubConnection.prototype.createCancelInvocation = function (id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  };\n\n  return HubConnection;\n}();\n\nexport { HubConnection };","map":{"version":3,"sources":["C:/Users/shnma/OneDrive/Documents/Work/aista/magic.clone/src/magic/frontend/node_modules/@aspnet/signalr/dist/esm/HubConnection.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","HandshakeProtocol","MessageType","LogLevel","Arg","Subject","DEFAULT_TIMEOUT_IN_MS","HubConnection","connection","logger","protocol","_this","isRequired","serverTimeoutInMilliseconds","handshakeProtocol","onreceive","data","processIncomingData","onclose","error","connectionClosed","callbacks","methods","closedCallbacks","id","create","prototype","start","handshakeRequest","_a","name","version","log","Debug","receivedHandshakeResponse","transferFormat","send","writeHandshakeRequest","Information","cleanupTimeout","configureTimeout","stop","stream","methodName","args","_i","arguments","invocationDescriptor","createStreamInvocation","subject","cancelInvocation","createCancelInvocation","invocationId","cancelMessage","writeMessage","invocationEvent","type","Completion","Error","complete","item","message","catch","createInvocation","invoke","p","completionMessage","on","newMethod","toLowerCase","indexOf","off","method","handlers","removeIdx","splice","callback","processHandshakeResponse","messages","parseMessages","messages_1","Invocation","invokeClientMethod","StreamItem","Ping","Close","Warning","responseMessage","remainingData","parseHandshakeResponse","features","inherentKeepAlive","timeoutHandle","setTimeout","serverTimeout","invocationMessage","target","forEach","m","Object","keys","key","undefined","c","clearTimeout","nonblocking","toString","StreamInvocation","CancelInvocation"],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Arg, Subject } from \"./Utils\";\r\nvar DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\n/** Represents a connection to a SignalR Hub. */\r\nvar HubConnection = /** @class */ (function () {\r\n    function HubConnection(connection, logger, protocol) {\r\n        var _this = this;\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = function (data) { return _this.processIncomingData(data); };\r\n        this.connection.onclose = function (error) { return _this.connectionClosed(error); };\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    HubConnection.create = function (connection, logger, protocol) {\r\n        return new HubConnection(connection, logger, protocol);\r\n    };\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    HubConnection.prototype.start = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var handshakeRequest;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        handshakeRequest = {\r\n                            protocol: this.protocol.name,\r\n                            version: this.protocol.version,\r\n                        };\r\n                        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n                        this.receivedHandshakeResponse = false;\r\n                        return [4 /*yield*/, this.connection.start(this.protocol.transferFormat)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n                        return [4 /*yield*/, this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];\r\n                    case 2:\r\n                        _a.sent();\r\n                        this.logger.log(LogLevel.Information, \"Using HubProtocol '\" + this.protocol.name + \"'.\");\r\n                        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n                        this.cleanupTimeout();\r\n                        this.configureTimeout();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    HubConnection.prototype.stop = function () {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    };\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    HubConnection.prototype.stream = function (methodName) {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n        var subject = new Subject(function () {\r\n            var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            var cancelMessage = _this.protocol.writeMessage(cancelInvocation);\r\n            delete _this.callbacks[invocationDescriptor.invocationId];\r\n            return _this.connection.send(cancelMessage);\r\n        });\r\n        this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                }\r\n                else {\r\n                    subject.complete();\r\n                }\r\n            }\r\n            else {\r\n                subject.next((invocationEvent.item));\r\n            }\r\n        };\r\n        var message = this.protocol.writeMessage(invocationDescriptor);\r\n        this.connection.send(message)\r\n            .catch(function (e) {\r\n            subject.error(e);\r\n            delete _this.callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        return subject;\r\n    };\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    HubConnection.prototype.send = function (methodName) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var invocationDescriptor = this.createInvocation(methodName, args, true);\r\n        var message = this.protocol.writeMessage(invocationDescriptor);\r\n        return this.connection.send(message);\r\n    };\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    HubConnection.prototype.invoke = function (methodName) {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var invocationDescriptor = this.createInvocation(methodName, args, false);\r\n        var p = new Promise(function (resolve, reject) {\r\n            _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    var completionMessage = invocationEvent;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    }\r\n                    else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                }\r\n                else {\r\n                    reject(new Error(\"Unexpected message type: \" + invocationEvent.type));\r\n                }\r\n            };\r\n            var message = _this.protocol.writeMessage(invocationDescriptor);\r\n            _this.connection.send(message)\r\n                .catch(function (e) {\r\n                reject(e);\r\n                delete _this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n        });\r\n        return p;\r\n    };\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    HubConnection.prototype.on = function (methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this.methods[methodName].push(newMethod);\r\n    };\r\n    HubConnection.prototype.off = function (methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        var handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            var removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this.methods[methodName];\r\n        }\r\n    };\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    HubConnection.prototype.onclose = function (callback) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    };\r\n    HubConnection.prototype.processIncomingData = function (data) {\r\n        this.cleanupTimeout();\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            var messages = this.protocol.parseMessages(data, this.logger);\r\n            for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\r\n                var message = messages_1[_i];\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        var callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        // We don't want to wait on the stop itself.\r\n                        // tslint:disable-next-line:no-floating-promises\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this.configureTimeout();\r\n    };\r\n    HubConnection.prototype.processHandshakeResponse = function (data) {\r\n        var _a;\r\n        var responseMessage;\r\n        var remainingData;\r\n        try {\r\n            _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];\r\n        }\r\n        catch (e) {\r\n            var message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n            var error = new Error(message);\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            var message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(new Error(message));\r\n        }\r\n        else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        return remainingData;\r\n    };\r\n    HubConnection.prototype.configureTimeout = function () {\r\n        var _this = this;\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(function () { return _this.serverTimeout(); }, this.serverTimeoutInMilliseconds);\r\n        }\r\n    };\r\n    HubConnection.prototype.serverTimeout = function () {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    };\r\n    HubConnection.prototype.invokeClientMethod = function (invocationMessage) {\r\n        var _this = this;\r\n        var methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach(function (m) { return m.apply(_this, invocationMessage.arguments); });\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                var message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n                // We don't need to wait on this Promise.\r\n                // tslint:disable-next-line:no-floating-promises\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        }\r\n        else {\r\n            this.logger.log(LogLevel.Warning, \"No client method with the name '\" + invocationMessage.target + \"' found.\");\r\n        }\r\n    };\r\n    HubConnection.prototype.connectionClosed = function (error) {\r\n        var _this = this;\r\n        var callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach(function (key) {\r\n            var callback = callbacks[key];\r\n            callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n        });\r\n        this.cleanupTimeout();\r\n        this.closedCallbacks.forEach(function (c) { return c.apply(_this, [error]); });\r\n    };\r\n    HubConnection.prototype.cleanupTimeout = function () {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    };\r\n    HubConnection.prototype.createInvocation = function (methodName, args, nonblocking) {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n        else {\r\n            var id = this.id;\r\n            this.id++;\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    };\r\n    HubConnection.prototype.createStreamInvocation = function (methodName, args) {\r\n        var id = this.id;\r\n        this.id++;\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    };\r\n    HubConnection.prototype.createCancelInvocation = function (id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    };\r\n    return HubConnection;\r\n}());\r\nexport { HubConnection };\r\n"]},"metadata":{},"sourceType":"module"}