
/*
 * Sets up authentication of system according to the arguments provided.
 */
.arguments
   databaseType:string
   rootUsername:string
   rootPassword:string
.description:"Sets up authentication of system according to the arguments provided."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Verifying that system haven't already been setup with some secure
 * authentication scheme previously.
 */
slots.get:magic.authenticate
if
   or
      not
         exists:x:@slots.get/*/.is-default-auth
      not
         eq
            get-value:x:@slots.get/*/.is-default-auth
            .:bool:true
   .lambda
      throw:Your system has already been configured to use a secure authentication scheme


/*
 * Checking if database already exists, and if not, creating it.
 */
.database-exists:bool:true
strings.concat
   .:magic.db.
   get-value:x:@.arguments/*/databaseType
   .:.databases
slots.signal:x:-
if
   not
      exists:x:@slots.signal/*/*/=magic_auth
   .lambda


      /*
       * Making sure we inform outer layer that we are creating a new user.
       */
      set-value:x:@.database-exists
         .:bool:false


      /*
       * Database does not exist.
       *
       * Evaluating SQL script that creates our database, but first we must dynamically
       * determine which script to execute.
       */
      strings.concat
         .:/misc/
         get-value:x:@.arguments/*/databaseType
         .:/magic_auth.sql


      /*
       * Loading create database SQL script file, and replacing execution slots according
       * to which database type we're dealing with.
       */
      io.files.load:x:@strings.concat
      set-name:x:../**/xxx.connect
         strings.concat
            get-value:x:@.arguments/*/databaseType
            .:.connect
      set-name:x:../**/xxx.execute
         strings.concat
            get-value:x:@.arguments/*/databaseType
            .:.execute


      /*
       * Executing create database SQL script, which is different according to which
       * database type we're currently using. Notice the little hack to allow for
       * create database schema scripts in MS SQL, splitting upon " ---- ".
       */
      if
         eq
            get-value:x:@.arguments/*/databaseType
            .:mssql
         .lambda
            strings.split:x:@io.files.load
               .:" ---- "
            for-each:x:@strings.split/*
               xxx.connect
                  xxx.execute:x:@.dp/#
      else
         xxx.connect
            xxx.execute:x:@io.files.load


      /*
       * Inserting the root user according to arguments given.
       */
      strings.concat
         .:/misc/
         get-value:x:@.arguments/*/databaseType
         .:/create-user.hl
      io.files.load:x:@strings.concat
      hyper2lambda:x:-
      unwrap:x:+/*/*
      add:x:@hyper2lambda/*/.arguments
         .
            username:x:@.arguments/*/rootUsername
            password:x:@.arguments/*/rootPassword
            roles
               .:root
      eval:x:@hyper2lambda


/*
 * Now we have our auth database, and our initial root user, and we can start moving files around,
 * and modifying slots accordingly.
 */
io.files.move:/modules/system/magic.startup/magic.authenticate.hl
   .:/trash/
strings.concat
   .:/misc/
   get-value:x:@.arguments/*/databaseType
   .:/magic.authenticate.hl
io.files.copy:x:-
   .:/modules/system/magic.startup/


/*
 * Evaluating new authentication file, to update our slot.
 */
io.files.load:/modules/system/magic.startup/magic.authenticate.hl
hyper2lambda:x:-
eval:x:@hyper2lambda


/*
 * Checking if user already existed, at which point we do not
 * attempt to login in current root account, but return that fact to caller.
 */
if
   eq
      get-value:x:@.database-exists
      .:bool:true
   .lambda


      /*
       * Returning early, since database already exists,
       * and logging in probably won't work.
       */
      slots.return-value:User already exists


/*
 * Logging in user again, using the specified credentials,
 * and returning a new JWT token to caller.
 */
unwrap:x:+/*
slots.signal:magic.authenticate
   username:x:@.arguments/*/rootUsername
   password:x:@.arguments/*/rootPassword


/*
 * Returning success to caller.
 */
slots.return-nodes:x:@slots.signal/*
