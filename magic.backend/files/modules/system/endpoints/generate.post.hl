
/*
 * Generates a frontend wrapping your HTTP REST endpoints
 * according to the specified [.arguments].
 */
.description:"Generates frontend client side according to arguments given."
.arguments
   apiUrl:string
   endpoints


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Lists all files in Angular template folder recursively,
 * and adds them into [.files].
 */
.files
slots.signal:magic.io.files.list-recursively
   folder:/misc/templates/angular/
add:x:@.files
   get-nodes:x:@slots.signal/*


/*
 * Loading every file, and appending file's content
 * as a child node to actual file node in above [.files].
 */
for-each:x:@.files/*
   io.files.load:x:@.dp/#
   add:x:@.dp/#
      get-nodes:x:@io.files.load
   set-name:x:@.dp/#/0
      .:.


/*
 * Removing "root" of filenames, to create more friendly
 * filenames to zip file's content.
 */
for-each:x:@.files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:/misc/templates/angular/
         .:/magic-angular/


/*
 * Dynamically building up service methods according
 * to specified [.arguments]/[endpoints].
 */
.services:
for-each:x:@.arguments/*/endpoints/*


   /*
    * Figuring out method name.
    */
   .method
   strings.split:x:@.dp/#/*/path
      .:/
   set-value:x:@.method
      get-value:x:@strings.split/0/-
   .verb
   switch:x:@.dp/#/*/verb
      case:delete
         set-value:x:@.verb
            .:Delete
      case:get
         set-value:x:@.verb
            .:Get
      case:post
         set-value:x:@.verb
            .:Post
      case:put
         set-value:x:@.verb
            .:Put
      default
         throw:Unknown verb for HTTP endpoint
   set-value:x:@.method
      strings.concat
         get-value:x:@.method
         get-value:x:@.verb


   /*
    * Creating method body.
    */
   .query:
   .payload:
   switch:x:@.dp/#/*/verb
      case:delete
      case:get
         set-value:x:@.query
            .:" + this.getQueryArgs(args)"
      default
         set-value:x:@.payload
            .:", args"
   .body:@"
    return this.httpClient."
   set-value:x:@.body
      strings.concat
         get-value:x:@.body
         get-value:x:@.dp/#/*/verb
         .:"<any>(environment.apiUrl + '"
         get-value:x:@.dp/#/*/path
         .:"'"
         get-value:x:@.query
         get-value:x:@.payload
         .:");"


   /*
    * Appending entire method into [.services].
    */
   set-value:x:@.services
      strings.concat
         get-value:x:@.services
         .:"\r\n\r\n"
         .:"  "
         get-value:x:@.method
         .:"(args: any) {"
         get-value:x:@.body
         .:@"
  }"


/*
 * We need to keep track of each component we create, such that
 * we can correctly import the components into our app.module.ts file
 * after we have created all components.
 *
 * This little node does just that.
 */
.components


/*
 * Creating one component for each "crud-get" endpoint.
 *
 * Notice, without a "crud-get", there is no reasons to create a grid component.
 */
for-each:x:@.arguments/*/endpoints/*/*/type/=crud-read/.


   /*
    * Figuring out component filename(s).
    */
   .filename
   strings.split:x:@.dp/#/*/path
      .:/
   set-value:x:@.filename
      get-value:x:@strings.split/0/-


   /*
    * Figuring out what columns the crud-read operation returns.
    */
   .columns
   for-each:x:@.dp/#/*/returns/*
      set-value:x:+/*/*
         get-name:x:@.dp/#
      add:x:@.columns
         .
            :x:@.dp/#


   /*
    * First we do replacements in our component's HTML file.
    *
    * Loading template component HTML file.
    */
   io.files.load:/misc/templates/angular-component/component.html


   /*
    * Creating one ng-container HTML snippet in HTML file for each
    * column returned from CRUD read.
    */
   .ng-containers:
   for-each:x:@.columns/*
      set-value:x:@.ng-containers
         strings.concat
            get-value:x:@.ng-containers
            .:"\r\n      <ng-container matColumnDef=\""
            get-value:x:@.dp/#
            .:@""">
        <th mat-header-cell *matHeaderCellDef>"
            get-value:x:@.dp/#
            .:"</th>\r\n"
            .:@"        <td mat-cell *matCellDef=""let el"">{{el."
            get-value:x:@.dp/#
            .:"}}</td>\r\n"
            .:"      </ng-container>\r\n"
   strings.replace:x:@io.files.load
      .:[[ng-containers]]
      get-value:x:@.ng-containers


   /*
    * Then we're done with the component's HTML file.
    *
    * Now adding HTML file to ZIP source.
    */
   set-value:x:+/+/*/*
      strings.concat
         .:/magic-angular/src/app/components/
         get-value:x:@.filename
         .:.component.html
   set-value:x:+/*/*/*
      get-value:x:@strings.replace
   add:x:@.files
      .
         :
            :


   /*
    * Then loading our component's template SCSS file.
    * Notice, this file doesn't really have any replacements,
    * and is just added as is, as a helper file, the final user can
    * use as he see fit to add custom classes for his component later.
    */
   io.files.load:/misc/templates/angular-component/component.scss


   /*
    * Adding SCSS file to ZIP source.
    */
   set-value:x:+/+/*/*
      strings.concat
         .:/magic-angular/src/app/components/
         get-value:x:@.filename
         .:.component.scss
   set-value:x:+/*/*/*
      get-value:x:@io.files.load
   add:x:@.files
      .
         :
            :


   /*
    * Then we need to do replacements in our component's TS file.
    *
    * Loading template component TS (TypeScript) file.
    */
   io.files.load:/misc/templates/angular-component/component.ts


   /*
    * Replacing any [[filename]] occurencies in TS file first.
    */
   strings.replace:x:@io.files.load
      .:[[filename]]
      get-value:x:@.filename


   /*
    * Figuring out component name, and replacing [[component-name]] with
    * the actual name of the component we want to use.
    */
   .component-name
   set-value:x:@.component-name
      strings.concat
         strings.capitalize:x:@.filename
         .:Component
   strings.replace:x:@strings.replace
      .:[[component-name]]
      get-value:x:@.component-name


   /*
    * Adding component's name to the list outside of of for-each loop,
    * such that we can now all components we've created later.
    */
   add:x:@.components
      get-nodes:x:@.component-name


   /*
    * Figuring out component's import filename.
    */
   strings.concat
      get-value:x:@.filename
      .:.component
   add:x:@.components/0/-
      get-nodes:x:@strings.concat


   /*
    * Replacing [[columns-list]].
    *
    * The TS file for the component contains a list of each column
    * that should be visible in the mat-table. This is contained in
    * the "displayedColumns" field. This logic makes sure that value
    * is dynamically changed, such that by default, all columns are
    * shown.
    */
   .columns-list:
   for-each:x:@.columns/*
      set-value:x:@.columns-list
         strings.concat
            get-value:x:@.columns-list
            .:"'"
            get-value:x:@.dp/#
            .:"',"
   strings.trim:x:@.columns-list
      .:,
   strings.replace:x:@strings.replace
      .:[[columns-list]]
      get-value:x:@strings.trim


   /*
    * Replacing service GET method.
    *
    * This is the place in the TS file that retrieves records from the
    * server, and becomes a reference to the correct method in
    * our "http-service.ts" file.
    */
   strings.replace:x:@strings.replace
      .:[[service-get-method]]
      strings.concat
         get-value:x:@.filename
         .:Get


   /*
    * Adding component's TS file to ZIP source.
    */
   set-value:x:+/+/*/*
      strings.concat
         .:/magic-angular/src/app/components/
         get-value:x:@.filename
         .:.component.ts
   set-value:x:+/*/*/*
      get-value:x:@strings.replace
   add:x:@.files
      .
         :
            :


/*
 * Then we need to create our imports, routes, router-links, and
 * declarations strings for substituing these inside our app.module.ts,
 * app-routing.module.ts, and app.component.html files.
 */
.imports:
.declarations:
.routes:
.router-links:
for-each:x:@.components/*


   /*
    * First appending our import declaration into [.imports].
    */
   set-value:x:@.imports
      strings.concat
         get-value:x:@.imports
         .:"import { "
         get-value:x:@.dp/#
         .:" } from './components/"
         get-value:x:@.dp/#/0
         .:"';\r\n"


   /*
    * Then appending our declaration into [.declarations].
    */
   set-value:x:@.declarations
      strings.concat
         get-value:x:@.declarations
         .:"    "
         get-value:x:@.dp/#
         .:",\r\n"


   /*
    * Then appending our routes into [.routes].
    */
   strings.replace:x:@.dp/#/0
      .:.component
      .:
   set-value:x:@.routes
      strings.concat
         get-value:x:@.routes
         .:"  { path: '"
         get-value:x:@strings.replace
         .:"', component: "
         get-value:x:@.dp/#
         .:" },\r\n"


   /*
    * Then appending our router links into [.router-links].
    */
   set-value:x:@.router-links
      strings.concat
         get-value:x:@.router-links
         .:"  <a\r\n    mat-button\r\n    routerLink=\"/"
         get-value:x:@strings.replace
         .:"\"\r\n    routerLinkActive=\"active-link\"\r\n"
         .:"    [routerLinkActiveOptions]=\"{exact:true}\">"
         get-value:x:@strings.replace
         .:"</a>\r\n\r\n"


/*
 * Then we need to find our app.module.ts file, our http-service.ts file,
 * our environment.ts file, and our app.component.html files from our list
 * of files, and do substitutions inside of these, according to which components
 * we'll need.
 */
for-each:x:@.files/*


   /*
    * Checking if this is our environment.ts file.
    */
   if
      eq
         get-value:x:@.dp/#
         .:/magic-angular/src/environments/environment.ts
      .lambda


         /*
          * [[apiUrl]] replacement.
          */
         strings.replace:x:@.dp/#/*
            .:[[apiUrl]]
            strings.concat
               .:"apiUrl: '"
               get-value:x:@.arguments/*/apiUrl
               .:"',"
         set-value:x:@.dp/#/*
            get-value:x:@strings.replace


   /*
    * Checking if this is our http-service.ts file.
    */
   if
      eq
         get-value:x:@.dp/#
         .:/magic-angular/src/app/http-service.ts
      .lambda


         /*
          * [[service-endpoints]] replacement.
          */
         strings.replace:x:@.dp/#/*
            .:[[service-endpoints]]
            get-value:x:@.services
         set-value:x:@.dp/#/*
            get-value:x:@strings.replace


   /*
    * Checking if this is our app.module.ts file, or
    * our app-routing.module.ts file.
    */
   if
      or
         eq
            get-value:x:@.dp/#
            .:/magic-angular/src/app/app.module.ts
         eq
            get-value:x:@.dp/#
            .:/magic-angular/src/app/app-routing.module.ts
      .lambda


         /*
          * Doing actual replacements.
          *
          * First [[imports]] part.
          */
         set-value:x:@.dp/#/*
            strings.replace:x:@.dp/#/*
               .:[[imports]]
               get-value:x:@.imports


         /*
          * Then our [[declarations]] part.
          */
         set-value:x:@.dp/#/*
            strings.replace:x:@.dp/#/*
               .:[[declarations]]
               get-value:x:@.declarations


         /*
          * Then our [[routes]] part.
          */
         set-value:x:@.dp/#/*
            strings.replace:x:@.dp/#/*
               .:[[routes]]
               get-value:x:@.routes


   /*
    * Checking if this is our app.component.html file.
    */
   if
      eq
         get-value:x:@.dp/#
         .:/magic-angular/src/app/app.component.html
      .lambda


         /*
          * [[router-links]] replacement.
          */
         set-value:x:@.dp/#/*
            strings.replace:x:@.dp/#/*
               .:[[router-links]]
               get-value:x:@.router-links


/*
 * Making sure we get the HTTP headers correctly applied.
 */
http.response.headers.add
   Content-Type:application/zip
   Content-Disposition:@"attachment; filename=""angular-magic.zip"""
   Access-Control-Expose-Headers:Content-Disposition


/*
 * Adding [.files] to [io.content.zip-stream] invocation, and
 * returning results of zipping to caller.
 */
add:x:+
   get-nodes:x:@.files/*
io.content.zip-stream
slots.return-value:x:-
