
/*
 * Generates a frontend wrapping your HTTP REST endpoints according to the specified [.arguments].
 */
.description:"Generates frontend client side according to arguments given."
.arguments
   apiUrl:string
   endpoints


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Lists all files in Angular template folder recursively, and adds them into [.files].
 */
.files
slots.signal:magic.io.files.list-recursively
   folder:/misc/templates/angular/
add:x:@.files
   get-nodes:x:@slots.signal/*


/*
 * Loading every file, and appending as a child node to actual file node in above [.files].
 */
for-each:x:@.files/*
   io.files.load:x:@.dp/#
   add:x:@.dp/#
      get-nodes:x:@io.files.load
   set-name:x:@.dp/#/0
      .:.


/*
 * Removing "root" of filenames, to make more friendly filenames to zip file's content.
 */
for-each:x:@.files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:/misc/templates/angular/
         .:/magic-angular/


/*
 * Dynamically building up service methods according
 * to specified [.arguments]/[endpoints].
 */
.services:
for-each:x:@.arguments/*/endpoints/*


   /*
    * Figuring out method name.
    */
   .method
   strings.split:x:@.dp/#/*/path
      .:/
   set-value:x:@.method
      get-value:x:@strings.split/0/-
   .verb
   switch:x:@.dp/#/*/verb
      case:delete
         set-value:x:@.verb
            .:Delete
      case:get
         set-value:x:@.verb
            .:Get
      case:post
         set-value:x:@.verb
            .:Post
      case:put
         set-value:x:@.verb
            .:Put
      default
         throw:Unknown verb for HTTP endpoint
   set-value:x:@.method
      strings.concat
         get-value:x:@.method
         get-value:x:@.verb


   /*
    * Creating method body.
    */
   .query:
   .payload:
   switch:x:@.dp/#/*/verb
      case:delete
      case:get
         set-value:x:@.query
            .:" + this.getQueryArgs(args)"
      default
         set-value:x:@.payload
            .:", args"
   .body:@"
    return this.httpClient."
   set-value:x:@.body
      strings.concat
         get-value:x:@.body
         get-value:x:@.dp/#/*/verb
         .:"<any>(environment.apiURL + '"
         get-value:x:@.dp/#/*/path
         .:"'"
         get-value:x:@.query
         get-value:x:@.payload
         .:");"


   /*
    * Appending entire method into [.services].
    */
   set-value:x:@.services
      strings.concat
         get-value:x:@.services
         .:"\r\n\r\n"
         .:"  "
         get-value:x:@.method
         .:"(args: any) {"
         get-value:x:@.body
         .:@"
  }"


/*
 * Starting substitution process of files' content,
 * according to [.arguments] given, and how we treated them above.
 */
for-each:x:@.files/*/*


   /*
    * [[apiUrl]] replacement.
    */
   strings.replace:x:@.dp/#
      .:[[apiUrl]]
      strings.concat
         .:"apiUrl: '"
         get-value:x:@.arguments/*/apiUrl
         .:"',"
   set-value:x:@.dp/#
      get-value:x:@strings.replace


   /*
    * [[service-endpoints]] replacement.
    */
   strings.replace:x:@.dp/#
      .:[[service-endpoints]]
      get-value:x:@.services
   set-value:x:@.dp/#
      get-value:x:@strings.replace


/*
 * Creating one component for each "crud-get" endpoint.
 * Notice, without a "crud-get", there is no reasons to create a grid component.
 */
lambda2hyper:x:@.arguments
log.info:x:-
for-each:x:@.arguments/*/endpoints/*/*/type/=crud-read/.


   /*
    * Figuring out component filename(s).
    */
   .filename
   strings.split:x:@.dp/#/*/path
      .:/
   set-value:x:@.filename
      get-value:x:@strings.split/0/-


   /*
    * Loading template component HTML file.
    */
   io.files.load:/misc/templates/angular-component/component.html


   /*
    * Figuring out what columns the crud-read operation returns.
    */
   .columns
   for-each:x:@.dp/#/*/returns/*
      set-value:x:+/*/*
         get-name:x:@.dp/#
      add:x:@.columns
         .
            :x:@.dp/#


   /*
    * Creating one ng-container in HTML file for each columns returned from CRUD read.
    */
   .ng-containers:
   for-each:x:@.columns/*
      set-value:x:@.ng-containers
         strings.concat
            get-value:x:@.ng-containers
            .:"\r\n      <ng-container matColumnDef=\""
            get-value:x:@.dp/#
            .:@""">
        <th mat-header-cell *matHeaderCellDef>"
            get-value:x:@.dp/#
            .:"</th>\r\n"
            .:@"        <td mat-cell *matCellDef=""let el"">{{el."
            get-value:x:@.dp/#
            .:"}}</td>\r\n"
            .:"      </ng-container>\r\n"
   strings.replace:x:@io.files.load
      .:[[ng-containers]]
      get-value:x:@.ng-containers
   log.info:x:-


   /*
    * Adding HTML file to ZIP source.
    */
   set-value:x:+/+/*/*
      strings.concat
         .:/magic-angular/src/app/components/
         get-value:x:@.filename
         .:.component.html
   set-value:x:+/*/*/*
      get-value:x:@strings.replace
   add:x:@.files
      .
         :
            :


/*
 * Returns zip stream to caller, making sure we get the HTTP headers correctly applied.
 */
http.response.headers.add
   Content-Type:application/zip
   Content-Disposition:@"attachment; filename=""angular-magic.zip"""
   Access-Control-Expose-Headers:Content-Disposition
add:x:+
   get-nodes:x:@.files/*
io.content.zip-stream
slots.return-value:x:-
