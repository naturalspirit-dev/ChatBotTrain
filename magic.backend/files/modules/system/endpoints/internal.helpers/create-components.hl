
/*
 * Internal helper file that creates our components according to
 * which endpoints we have at our disposal.
 */
.components


/*
 * Loading column declaration file.
 */
strings.concat
   .:/misc/templates/
   get-value:x:@.arguments/*/templateName
   .:/column.html
io.files.load:x:-


/*
 * Loading details declaration file.
 */
strings.concat
   .:/misc/templates/
   get-value:x:@.arguments/*/templateName
   .:/details.html
io.files.load:x:-


/*
 * Loading form control declaration file.
 */
strings.concat
   .:/misc/templates/
   get-value:x:@.arguments/*/templateName
   .:/form-control.ts
io.files.load:x:-


/*
 * Loading form control valud subscriptions file.
 */
strings.concat
   .:/misc/templates/
   get-value:x:@.arguments/*/templateName
   .:/form-control-value-subscriptions.ts
io.files.load:x:-


/*
 * Iterating through each crud method given.
 */
for-each:x:@.arguments/*/.crud-methods/*


   /*
    * Verifying CRUD endpoint have a "read" (GET) method, otherwise we
    * don't create a component for it.
    */
   if
      exists:x:@.dp/#/*/verbs/*/get
      .lambda


         /*
          * Currently iterated endpoint can handle the GET verb, hence
          * at the minimum we should create a datagrid "view" component.
          *
          * First we make sure we gets its relative path correct.
          */
         for-each:x:@.arguments/*/.component-files/*


            /*
             * Replacing [[component-folder]].
             */
            strings.replace:x:@.dp/#
               .:[[component-folder]]
               get-value:x:@.lambda/@.dp/#/*/component-folder


            /*
             * Replacing [[component-filename]].
             */
            strings.replace:x:@strings.replace
               .:[[component-filename]]
               get-value:x:@.lambda/@.dp/#/*/component-filename


            /*
             * Buffer to hold component's filename.
             */
            unwrap:x:+
            .filename:x:@strings.replace


            /*
             * Replacing [[component-header]]
             */
            strings.replace:x:@.dp/#/*
               .:[[component-header]]
               get-value:x:@.lambda/@.dp/#/*/component-header


            /*
             * Figuring out roles that are allowed to create entities,
             * implying invoking the "create"/POST endpoint.
             */
            .create-roles
            for-each:x:@.lambda/@.dp/#/*/verbs/*/post/*/auth/*
               set-value:x:@.create-roles
                  strings.concat
                     get-value:x:@.create-roles
                     .:",'"
                     get-value:x:@.dp/#
                     .:"'"
            set-value:x:@.create-roles
               strings.trim:x:@.create-roles
                  .:,
            strings.replace:x:@strings.replace
               .:[[create-roles]]
               get-value:x:@.create-roles


            /*
             * Figuring out roles that are allowed to delete entities,
             * implying invoking the DELETE endpoint.
             */
            .delete-roles
            for-each:x:@.lambda/@.dp/#/*/verbs/*/delete/*/auth/*
               set-value:x:@.delete-roles
                  strings.concat
                     get-value:x:@.delete-roles
                     .:",'"
                     get-value:x:@.dp/#
                     .:"'"
            set-value:x:@.delete-roles
               strings.trim:x:@.delete-roles
                  .:,
            strings.replace:x:@strings.replace
               .:[[delete-roles]]
               get-value:x:@.delete-roles


            /*
             * Figuring out roles that are allowed to update entities,
             * implying invoking the PUT endpoint.
             */
            .update-roles
            for-each:x:@.lambda/@.dp/#/*/verbs/*/put/*/auth/*
               set-value:x:@.update-roles
                  strings.concat
                     get-value:x:@.update-roles
                     .:",'"
                     get-value:x:@.dp/#
                     .:"'"
            set-value:x:@.update-roles
               strings.trim:x:@.update-roles
                  .:,
            strings.replace:x:@strings.replace
               .:[[update-roles]]
               get-value:x:@.update-roles


            /*
             * Figuring out roles that are allowed to update entities,
             * implying invoking the PUT endpoint.
             */
            .delete-input
            for-each:x:@.lambda/@.dp/#/*/verbs/*/delete/*/input/*
               set-value:x:@.delete-input
                  strings.concat
                     get-value:x:@.delete-input
                     .:","
                     get-name:x:@.dp/#
            set-value:x:@.delete-input
               strings.trim:x:@.delete-input
                  .:,
            strings.replace:x:@strings.replace
               .:[[delete-input]]
               get-value:x:@.delete-input


            /*
             * Checking if this is the "component.html" file, at which point
             * we need to build our material table's HTML content, according to what
             * our GET endpoint actually returns.
             */
            if
               strings.ends-with:x:@.dp/#
                  .:.html
               .lambda


                  /*
                   * An HTML file for our component.
                   * Replacing [[ng-containers]].
                   *
                   * These are created according to whatever our GET endpoint returns, and
                   * basically becomes the columns of our material table (datagrid).
                   *
                   * Notice, we start out with a container count of 1, since we always have a delete column.
                   */
                  .container-count:int:1
                  .ng-containers
                  .entity-details:
                  for-each:x:@.lambda/@.lambda/@.dp/#/*/verbs/*/get/*/output/*


                     /*
                      * Incrementing column count, such that we can figure out "colspan"
                      * to use for "details" ng-container.
                      */
                     set-value:x:@.container-count
                        math.increment:x:@.container-count


                     /*
                      * Appending currently iterated column to [.ng-containers].
                      *
                      * Notice, the contents for this is declared in our "column.html" file.
                      */
                     set-value:x:@.ng-containers
                        strings.concat
                           get-value:x:@.ng-containers
                           strings.replace:x:@io.files.load/@io.files.load/@io.files.load/@io.files.load
                              .:[[column-name]]
                              get-name:x:@.dp/#


                     /*
                      * Appending currently iterated column to [.entity-details].
                      *
                      * Notice, the contents for this is declared in our "details.html" file.
                      */
                     set-value:x:@.entity-details
                        strings.concat
                           get-value:x:@.entity-details
                           strings.replace:x:@io.files.load/@io.files.load/@io.files.load
                              .:[[column-name]]
                              get-name:x:@.dp/#


                  /*
                   * Doing actual substitution in HTML file.
                   *
                   * More specifically, we're substituting the following strings.
                   *
                   * - [[ng-containers]]
                   * - [[entity-details]]
                   * - [[colspan]]
                   */
                  strings.replace:x:@strings.replace
                     .:[[ng-containers]]
                     get-value:x:@.ng-containers
                  strings.replace:x:@strings.replace
                     .:[[entity-details]]
                     get-value:x:@.entity-details
                  strings.replace:x:@strings.replace
                     .:[[colspan]]
                     get-value:x:@.container-count
                  set-value:x:./@strings.replace
                     get-value:x:@strings.replace


            else-if
               strings.ends-with:x:@.dp/#
                  .:.ts
               .lambda


                  /*
                   * TypeScript file for component.
                   */


                  /*
                   * Replacing component's edit filename, which is our modal dialog's filename.
                   */
                  strings.replace:x:@strings.replace
                     .:[[component-filename]]
                     strings.concat
                        get-value:x:@.lambda/@.lambda/@.dp/#/*/component-filename


                  /*
                   * Replacing component's class name.
                   */
                  strings.replace:x:@strings.replace
                     .:[[component-name]]
                     get-value:x:@.lambda/@.lambda/@.dp/#/*/component-name


                  /*
                   * Replacing component's selector.
                   */
                  strings.replace:x:@strings.replace
                     .:[[component-selector]]
                     get-value:x:@.lambda/@.lambda/@.dp/#/*/component-selector


                  /*
                   * Figuring out column list.
                   */
                  .displayed-columns
                  .form-controls
                  .form-controls-value-subscriptions
                  for-each:x:@.lambda/@.lambda/@.dp/#/*/verbs/*/get/*/output/*


                     /*
                      * Appending currently iterated column to [.displayed-columns]
                      */
                     set-value:x:@.displayed-columns
                        strings.concat
                           get-value:x:@.displayed-columns
                           .:", '"
                           get-name:x:@.dp/#
                           .:"'"


                     /*
                      * Making sure we create a TypeScript instance of correct type to
                      * hold our column.
                      */
                     set-value:x:@.form-controls
                        strings.concat
                           get-value:x:@.form-controls
                           strings.replace:x:@io.files.load/@io.files.load
                              .:[[column-name]]
                              get-name:x:@.dp/#


                     /*
                      * Making sure we correctly instantiate our TypeScript instance.
                      */
                     set-value:x:@.form-controls-value-subscriptions
                        strings.concat
                           get-value:x:@.form-controls-value-subscriptions
                           strings.replace:x:@io.files.load
                              .:[[column-name]]
                              get-name:x:@.dp/#


                  /*
                   * Making sure we remove redundant commas and spaces from [.displayed-columns].
                   */
                  strings.trim:x:@.displayed-columns
                     .:", "
                  strings.replace:x:@strings.replace
                     .:[[columns-list]]
                     get-value:x:@strings.trim


                  /*
                   * Appending our actual form controls into our TypeScript file.
                   */
                  strings.replace:x:@strings.replace
                     .:[[form-control-declarations]]
                     get-value:x:@.form-controls


                  /*
                   * Appending our actual control instantiations into our TypeScript file.
                   */
                  strings.replace:x:@strings.replace
                     .:[[form-control-value-subscriptions]]
                     get-value:x:@.form-controls-value-subscriptions


                  /*
                   * Appending our HTTP client service GET method name into TypeScript file.
                   */
                  strings.replace:x:@strings.replace
                     .:[[service-get-method]]
                     get-value:x:@.lambda/@.lambda/@.dp/#/*/verbs/*/get/*/service-method-name


                  /*
                   * Appending our HTTP client service DELETE method name into TypeScript file.
                   */
                  strings.replace:x:@strings.replace
                     .:[[service-delete-method]]
                     get-value:x:@.lambda/@.lambda/@.dp/#/*/verbs/*/delete/*/service-method-name


                  /*
                   * Appending our HTTP client service COUNT method name into TypeScript file.
                   */
                  strings.replace:x:@strings.replace
                     .:[[service-count-method]]
                     get-value:x:@.lambda/@.lambda/@.dp/#/*/count-method


                  /*
                   * Making sure we allow outer parts to reach our new TypeScript content.
                   */
                  set-value:x:./@strings.replace
                     get-value:x:@strings.replace


            /*
             * Buffer to hold component's content.
             */
            unwrap:x:+
            .content:x:@strings.replace


            /*
             * Adding finished component to [.components] node, that is
             * returned to caller after file is done evaluating.
             */
            unwrap:x:+/+/*/*
            unwrap:x:+/*/*/*
            add:x:@.components
               .
                  :x:@.filename
                     :x:@.content


/*
 * Returns results to caller.
 */
slots.return-nodes:x:@.components/*
