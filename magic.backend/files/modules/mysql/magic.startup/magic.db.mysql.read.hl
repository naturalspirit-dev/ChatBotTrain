
/*
 * Reads items from your [connection]/[table] according to [args] supplied.
 * [args] can contain [limit], [offset], [order] and [direction] - In addition
 * to that all other arguments will be treated as a part of the [where] to the
 * invocation to [mysql.read].
 */
slot:magic.db.mysql.read
   .lambda


      /*
       * Opening up a connection.
       */
      .connection
      set-value:x:@.connection
         concat
            :[
            get-value:x:@.arguments/*/database
            :]
      mysql.connect:x:@.connection


         /*
          * Parametrizing invocation to [mysql.read], first with generic arguments, 
          * such as [limit], [offset], [order] and [direction].
          * Making sure we remove the nodes from the [.arguments] collection afterwards,
          * such that we don't add them into our [where].
          */
         add:x:./*/mysql.read
            get-nodes:x:@.arguments/*/args/*/limit

         /*
          * We need to later check if [limit] was given, to check if only a single
          * value was requested - At which point we'll return a single JSON object,
          * instead of an array.
          * Notice, we could have simply checked if [limit] was equal to "1",
          * but this would not work if caller explicitly invoked slot with an integer,
          * or a long value,which is semantically more adequate anyway.
          */
         unwrap:x:+
         .limit:x:@.arguments/*/args/*/limit
         set-value:x:@.limit
            convert:x:@.limit
               type:long
         remove-node:x:@.arguments/*/args/*/limit

         add:x:./*/mysql.read
            get-nodes:x:@.arguments/*/args/*/offset
         remove-node:x:@.arguments/*/args/*/offset

         add:x:./*/mysql.read
            get-nodes:x:@.arguments/*/args/*/order
         remove-node:x:@.arguments/*/args/*/order

         add:x:./*/mysql.read
            get-nodes:x:@.arguments/*/args/*/direction
         remove-node:x:@.arguments/*/args/*/direction


         /*
          * Then any remaining arguments.
          */
         if
            mt
               get-count:x:@.arguments/*/args/*
               .:int:0
            .lambda


               /*
                * Adding [where] to [mysql.read].
                */
               add:x:../*/mysql.connect/*/mysql.read
                  .
                     where
                        and
               add:x:../*/mysql.connect/*/mysql.read/*/where/*/and
                  get-nodes:x:@.arguments/*/args/*


         /*
          * Then adding [columns] if given.
          */
         if
            mt
               get-count:x:@.arguments/*/columns/*
               .:int:0
            .lambda


               /*
                * Adding [columns] to [mysql.read].
                */
               add:x:../*/mysql.connect/*/mysql.read
                  .
                     columns
               add:x:../*/mysql.connect/*/mysql.read/*/columns
                  get-nodes:x:@.arguments/*/columns/*


         /*
          * Invoking [mysql.read].
          */
         mysql.read
            table:x:@.arguments/*/table


         /*
          * Returning results to caller.
          */
         if
            eq
               get-value:x:@.limit
               .:long:1
            .lambda


               /*
                * Returning a single object.
                */
               return-nodes:x:@mysql.read/*/*

         /*
          * Returning an array of objects.
          */
         return-nodes:x:@mysql.read/*
