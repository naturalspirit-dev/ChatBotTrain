
/*
 * Generate an HTTP REST endpoint according to the given [.arguments].
 */
.arguments
   database:string
   table:string
   template:string
   verb:string
   auth:string
   args


/*
 * Ensures user is authorized to access endpoint.
 */
auth.verify-ticket:root


/*
 * Creating our endpoint according to arguments given, by using [apply-file]
 * on the [template] file given.
 */
unwrap:x:+/*
apply-file:x:@.arguments/*/template
   database:x:@.arguments/*/database
   table:x:@.arguments/*/table
   args


/*
 * Then ensuring we turn on authorization to our endpoints according
 * to caller's specifications, if caller supplied an [auth] value.
 */
if
   not
      eq
         get-value:x:@.arguments/*/auth
         :
   .lambda
      unwrap:x:+/*/*
      insert-after:x:@apply-file/*/.arguments
         .
            auth.verify-ticket:x:@.arguments/*/auth


/*
 * Then making sure we do our specialized transformation,
 * according to verb requested by caller.
 */
switch:x:@.arguments/*/verb


   /*
    * HTTP DELETE special case
    */
   case:delete
      add:x:@apply-file/*/.arguments
         get-nodes:x:@.arguments/*/args/*/primary/*


   /*
    * HTTP GET special case
    */
   case:get
      add:x:@apply-file/*/.arguments
         get-nodes:x:@.arguments/*/args/*/columns/*
      for-each:x:@.arguments/*/args/*/*
         set-value:x:@.dp/#
      add:x:@apply-file/**/columns
         get-nodes:x:@.arguments/*/args/*/columns/*


   /*
    * HTTP POST special cases
    */
   case:post
      add:x:@apply-file/*/.arguments
         get-nodes:x:@.arguments/*/args/*/columns/*


   /*
    * HTTP PUT special cases
    */
   case:put
      add:x:@apply-file/*/.arguments
         get-nodes:x:@.arguments/*/args/*/primary/*
      add:x:@apply-file/*/.arguments
         get-nodes:x:@.arguments/*/args/*/columns/*
      for-each:x:@.arguments/*/args/*/*
         set-value:x:@.dp/#
      add:x:@apply-file/**/ids
         get-nodes:x:@.arguments/*/args/*/primary/*
      for-each:x:@apply-file/**/ids/*
         .x:@.arguments/*/
         set-value:x:@.x
            concat
               get-value:x:@.x
               get-name:x:@.dp/#
         set-x:x:@.dp/#
            convert:x:@.x
               type:x


/*
 * Then creating our folder.
 */
.folder:/modules/
set-value:x:@.folder
   concat
      get-value:x:@.folder
      get-value:x:@.arguments/*/database
      :/
create-folder:x:@.folder


/*
 * Transforming lambda to hyper, and saving it to the correct file.
 */
hyper:x:@apply-file/*
unwrap:x:+
.filename:x:@.folder
set-value:x:@.filename
   concat
      get-value:x:@.filename
      get-value:x:@.arguments/*/table
      :.
      get-value:x:@.arguments/*/verb
      :.hl


/*
 * Saving file, now applied according to template declaration.
 */
save-file:x:@.filename
   get-value:x:@hyper


/*
 * Returning success to caller.
 */
return-nodes
   result:success
