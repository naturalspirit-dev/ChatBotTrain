
/*
 * Internal helper file that creates our components according to
 * which endpoints we have at our disposal.
 */




/*
 * This is our buffer element, and will contain all component
 * files, that are eventiually returned to caller at the bottom
 * of the file.
 */
.components




/*
 * Loading column file, that contains the HTML markup for a single
 * column.
 */
.column-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/column.html


// Long specialisation for HTML markup column file.
.column-file.long
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/column.long.html


// Date specialisation for HTML markup column file.
.column-file.date
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/column.date.html




/*
 * Loading view details file, that contains the declaration
 * for viewing a single element's details.
 */
.view-details-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/view-details.html


// Date specialization for view details HTML markup file.
.view-details-file.date
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/view-details.date.html




/*
 * Loading form control file, that contains the declaration
 * for a single form control.
 */
.form-control-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/form-control.ts




/*
 * Loading form field file, that contains the input necessary to
 * edit a single column's value during editing.
 */
.form-field-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/form-field.html


// Long specialisation of column HTML markup file.
.form-field-file.long
set-value:x:@.form-field-file.long
   io.files.load:/misc/templates/angular-default/templates/form-field.long.html


// Date specialisation of column HTML markup file.
.form-field-file.date
set-value:x:@.form-field-file.date
   io.files.load:/misc/templates/angular-default/templates/form-field.date.html




/*
 * Loading form control instantiations file, that instantiates
 * a single form control somehow.
 */
.form-control-instantiation-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/form-control-instantiations.ts


// String specialisation of form control instantiation file.
.form-control-instantiation-file.string
set-value:x:@.form-control-instantiation-file.string
   io.files.load:/misc/templates/angular-default/templates/form-control-instantiations.string.ts




/*
 * Iterating through each crud method given.
 */
for-each:x:@.arguments/*/.crud-methods/*


   /*
    * Verifying CRUD endpoint have a "read" (GET) method, otherwise we
    * don't create a component for it.
    */
   if
      exists:x:@.dp/#/*/verbs/*/get
      .lambda


         /*
          * Currently iterated endpoint can handle the GET verb, hence
          * at the minimum we should create a datagrid "view" component.
          */
         .substitutions

            // Roles user must belong to in order to create entities.
            create-roles:

            // Roles user must belong to in order to delete entities.
            delete-roles:

            // Roles user must belong to in order to update entities.
            update-roles:

            // Input to DELETE endpoint.
            delete-input:

            // Input to POST endpoint.
            create-input:

            // Input to PUT endpoint.
            update-input:

            // How many columns our table contains.
            container-count:int:0

            // All table column declarations. (normally HTML)
            ng-containers

            // View details for an entity. (normally HTML)
            view-details

            // A JavaScript list of strings, declaring which columns are visible in table.
            displayed-columns:

            // JavaScript/TypeScript fields/properties, declaring the columns.
            form-controls

            // Declaration for a single column. (normally HTML)
            form-fields

            // Instantiations for each above form field.
            form-controls-instantiations


         /*
          * Figuring out roles that are allowed to create entities,
          * implying invoking the "create"/POST endpoint.
          */
         for-each:x:@.dp/#/*/verbs/*/post/*/auth/*
            set-value:x:@.substitutions/*/create-roles
               strings.concat
                  get-value:x:@.substitutions/*/create-roles
                  .:",'"
                  get-value:x:@.dp/#
                  .:"'"
         set-value:x:@.substitutions/*/create-roles
            strings.trim:x:@.substitutions/*/create-roles
               .:,


         /*
          * Figuring out roles that are allowed to delete entities,
          * implying invoking the DELETE endpoint.
          */
         for-each:x:@.dp/#/*/verbs/*/delete/*/auth/*
            set-value:x:@.substitutions/*/delete-roles
               strings.concat
                  get-value:x:@.substitutions/*/delete-roles
                  .:",'"
                  get-value:x:@.dp/#
                  .:"'"
         set-value:x:@.substitutions/*/delete-roles
            strings.trim:x:@.substitutions/*/delete-roles
               .:,


         /*
          * Figuring out roles that are allowed to update entities,
          * implying invoking the PUT endpoint.
          */
         for-each:x:@.dp/#/*/verbs/*/put/*/auth/*
            set-value:x:@.substitutions/*/update-roles
               strings.concat
                  get-value:x:@.substitutions/*/update-roles
                  .:",'"
                  get-value:x:@.dp/#
                  .:"'"
         set-value:x:@.substitutions/*/update-roles
            strings.trim:x:@.substitutions/*/update-roles
               .:,


         /*
          * Figuring out input to our DELETE method.
          */
         for-each:x:@.dp/#/*/verbs/*/delete/*/input/*
            set-value:x:@.substitutions/*/delete-input
               strings.concat
                  get-value:x:@.substitutions/*/delete-input
                  .:", "
                  get-name:x:@.dp/#
                  .:": el."
                  get-name:x:@.dp/#
         set-value:x:@.substitutions/*/delete-input
            strings.trim:x:@.substitutions/*/delete-input
               .:", "


         /*
          * Figuring out input to our POST method.
          */
         for-each:x:@.dp/#/*/verbs/*/post/*/input/*
            set-value:x:@.substitutions/*/create-input
               strings.concat
                  get-value:x:@.substitutions/*/create-input
                  .:", '"
                  get-name:x:@.dp/#
                  .:"'"
         set-value:x:@.substitutions/*/create-input
            strings.trim:x:@.substitutions/*/create-input
               .:", "


         /*
          * Figuring out input to our PUT method.
          */
         for-each:x:@.dp/#/*/verbs/*/put/*/input/*
            set-value:x:@.substitutions/*/update-input
               strings.concat
                  get-value:x:@.substitutions/*/update-input
                  .:", '"
                  get-name:x:@.dp/#
                  .:"'"
         set-value:x:@.substitutions/*/update-input
            strings.trim:x:@.substitutions/*/update-input
               .:", "


         /*
          * Now we know input to all 4 CRUD endpoints, and we also know what roles
          * are allowed to invoke endpoints.
          *
          * Now we can start creating our datagrid component, and our edit/create component.
          */


         /*
          * Dynamically creating our datagrid parts, and our for controls
          * for editing entities.
          */
         for-each:x:@.dp/#/*/verbs/*/get/*/output/*


            /*
             * Checking if currently iterated get-output column exists in input
             * to delete verb, at which point it's (probably) a primary key, and
             * should by default not be visible in the datagrid - But still possible
             * to pull in, so we do create an ng-container for it - We simply don't
             * create that column as visible by default.
             */
            .exists-in-delete-input:bool:false
            for-each:x:@.dp/#/./././*/delete/*/input/*
               if
                  eq
                     get-value:x:@.dp/#
                     get-value:x:@for-each/@.dp/#
                  .lambda


                     /*
                      * Currently iterated outer ouput GET column exists as input to DELETE.
                      * Hence, by default we don't show it in the datagrid.
                      */
                     set-value:x:@.exists-in-delete-input
                        .:bool:true


            /*
             * Checking if column should be displayed in table by default.
             */
            if
               not
                  get-value:x:@.exists-in-delete-input
               .lambda

                  /*
                   * Column should be displayed, incrementing container count to be able
                   * to calculate colspan of view details container correctly.
                   */
                  set-value:x:@.substitutions/*/container-count
                     math.increment:x:@.substitutions/*/container-count


                  /*
                   * Appending currently iterated column to [displayed-columns]
                   */
                  set-value:x:@.substitutions/*/displayed-columns
                     strings.concat
                        get-value:x:@.substitutions/*/displayed-columns
                        .:", '"
                        get-name:x:@.dp/#
                        .:"'"


            /*
             * Notice, even though we don't display all columns by default in datagrid,
             * we still create wrapper controls for all columns returned by GET, to make
             * it easy for the end user to display them if he wants to for some reasons.
             */


            /*
             * Making sure we create a TypeScript instance of correct type to
             * hold our column.
             */
            set-value:x:@.substitutions/*/form-controls
               strings.concat
                  get-value:x:@.substitutions/*/form-controls
                  strings.replace:x:@.form-control-file
                     .:[[column-name]]
                     get-name:x:@.dp/#


            /*
             * Making sure we correctly instantiate our TypeScript instance.
             *
             * Notice, some types have specialized implementations here.
             */
            switch:x:@.dp/#


               /*
                * String type.
                */
               case:string
                  set-value:x:@.substitutions/*/form-controls-instantiations
                     strings.concat
                        get-value:x:@.substitutions/*/form-controls-instantiations
                        strings.replace:x:@.form-control-instantiation-file.string
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Default (anything not having a specialized implementation).
                */
               default
                  set-value:x:@.substitutions/*/form-controls-instantiations
                     strings.concat
                        get-value:x:@.substitutions/*/form-controls-instantiations
                        strings.replace:x:@.form-control-instantiation-file
                           .:[[column-name]]
                           get-name:x:@.dp/#


            /*
             * Appending currently iterated column to [.ng-containers].
             *
             * Notice, some types have specialized implementations here.
             */
            switch:x:@.dp/#


               /*
                * Long type.
                */
               case:long
               case:int
                  set-value:x:@.substitutions/*/ng-containers
                     strings.concat
                        get-value:x:@.substitutions/*/ng-containers
                        strings.replace:x:@.column-file.long
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Date type.
                */
               case:date
                  set-value:x:@.substitutions/*/ng-containers
                     strings.concat
                        get-value:x:@.substitutions/*/ng-containers
                        strings.replace:x:@.column-file.date
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Default (anything not having a specialized implementation).
                */
               default
                  set-value:x:@.substitutions/*/ng-containers
                     strings.concat
                        get-value:x:@.substitutions/*/ng-containers
                        strings.replace:x:@.column-file
                           .:[[column-name]]
                           get-name:x:@.dp/#


            /*
             * Appending currently iterated column to [view-details].
             *
             * Notice, some types have specialized implementations, such as for instance
             * date types, etc.
             */
            switch:x:@.dp/#


               /*
                * Date type.
                */
               case:date
                  set-value:x:@.substitutions/*/view-details
                     strings.concat
                        get-value:x:@.substitutions/*/view-details
                        strings.replace:x:@.view-details-file.date
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Default (anything not having a specialized implementation).
                */
               default
                  set-value:x:@.substitutions/*/view-details
                     strings.concat
                        get-value:x:@.substitutions/*/view-details
                        strings.replace:x:@.view-details-file
                           .:[[column-name]]
                           get-name:x:@.dp/#


         /*
          * Dynamically creating our editor component.
          *
          * Notice, this relies upon the POST endpoint's input, and
          * not the read endpoint's output.
          *
          * We use the POST endpoint and not the PUT endpoint, since we do
          * not want to create form controls for any automatic primary keys.
          */
         for-each:x:@.dp/#/*/verbs/*/post/*/input/*


            /*
             * Making sure we correctly create our HTML markup for edit/create component.
             *
             * Notice, some types have specialized implementations here.
             */
            switch:x:@.dp/#


               /*
                * Long type.
                */
               case:long
               case:int
                  set-value:x:@.substitutions/*/form-fields
                     strings.concat
                        get-value:x:@.substitutions/*/form-fields
                        strings.replace:x:@.form-field-file.long
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Date type.
                */
               case:date
                  set-value:x:@.substitutions/*/form-fields
                     strings.concat
                        get-value:x:@.substitutions/*/form-fields
                        strings.replace:x:@.form-field-file.date
                           .:[[column-name]]
                           get-name:x:@.dp/#


               /*
                * Default (anything not having a specialized implementation).
                */
               default
                  set-value:x:@.substitutions/*/form-fields
                     strings.concat
                        get-value:x:@.substitutions/*/form-fields
                        strings.replace:x:@.form-field-file
                           .:[[column-name]]
                           get-name:x:@.dp/#


         /*
          * Figuring out if we have a crud-delete endpoint associated
          * with the current crud-read endpoint, and if we do, we make
          * sure the delete column is visible.
          */
         if
            exists:x:@.dp/#/*/verbs/*/delete
            .lambda


               /*
                * Adding one additional column to [container-count]
                */
               set-value:x:@.substitutions/*/container-count
                  math.increment:x:@.substitutions/*/container-count


               /*
                * Adding "delete-instance" to [displayed-columns]
                */
               set-value:x:@.substitutions/*/displayed-columns
                  strings.concat
                     get-value:x:@.substitutions/*/displayed-columns
                     .:", 'delete-instance'"


         /*
          * Making sure we remove redundant commas and spaces from [.substitutions]/[displayed-columns].
          */
         set-value:x:@.substitutions/*/displayed-columns
            strings.trim:x:@.substitutions/*/displayed-columns
               .:", "


         /*
          * Iterating through each component file, to do our substitutions.
          */
         for-each:x:@.arguments/*/.component-files/*


            /*
             * Replacing [[component-folder]].
             */
            strings.replace:x:@.dp/#
               .:[[component-folder]]
               get-value:x:@.lambda/@.dp/#/*/component-folder


            /*
             * Replacing [[component-filename]].
             */
            strings.replace:x:@strings.replace
               .:[[component-filename]]
               get-value:x:@.lambda/@.dp/#/*/component-filename


            /*
             * Buffer to hold component's filename.
             */
            unwrap:x:+
            .filename:x:@strings.replace


            /*
             * Replacing [[component-header]].
             */
            strings.replace:x:@.dp/#/*
               .:[[component-header]]
               get-value:x:@.lambda/@.dp/#/*/component-header


            /*
             * Replacing [[form-fields]].
             */
            strings.replace:x:@strings.replace
               .:[[form-fields]]
               get-value:x:@.substitutions/*/form-fields


            /*
             * Replacing our [[create-roles]].
             */
            strings.replace:x:@strings.replace
               .:[[create-roles]]
               get-value:x:@.substitutions/*/create-roles


            /*
             * Replacing our [[delete-roles]].
             */
            strings.replace:x:@strings.replace
               .:[[delete-roles]]
               get-value:x:@.substitutions/*/delete-roles


            /*
             * Replacing our [[update-roles]].
             */
            strings.replace:x:@strings.replace
               .:[[update-roles]]
               get-value:x:@.substitutions/*/update-roles


            /*
             * Replacing [[delete-input]].
             */
            strings.replace:x:@strings.replace
               .:[[delete-input]]
               get-value:x:@.substitutions/*/delete-input


            /*
             * Replacing [[create-input]].
             */
            strings.replace:x:@strings.replace
               .:[[create-input]]
               get-value:x:@.substitutions/*/create-input


            /*
             * Replacing [[update-input]].
             */
            strings.replace:x:@strings.replace
               .:[[update-input]]
               get-value:x:@.substitutions/*/update-input


            /*
             * Replacing [[ng-containers]].
             */
            strings.replace:x:@strings.replace
               .:[[ng-containers]]
               get-value:x:@.substitutions/*/ng-containers


            /*
             * Replacing [[view-details]].
             */
            strings.replace:x:@strings.replace
               .:[[view-details]]
               get-value:x:@.substitutions/*/view-details


            /*
             * Replacing [[colspan]].
             */
            strings.replace:x:@strings.replace
               .:[[colspan]]
               get-value:x:@.substitutions/*/container-count


            /*
             * Replacing [[component-filename]].
             */
            strings.replace:x:@strings.replace
               .:[[component-filename]]
               strings.concat
                  get-value:x:@.lambda/@.dp/#/*/component-filename


            /*
             * Replacing [[component-name]].
             */
            strings.replace:x:@strings.replace
               .:[[component-name]]
               get-value:x:@.lambda/@.dp/#/*/component-name


            /*
             * Replacing [[component-selector]].
             */
            strings.replace:x:@strings.replace
               .:[[component-selector]]
               get-value:x:@.lambda/@.dp/#/*/component-selector


            /*
             * Replacing [[displayed-columns]].
             */
            strings.replace:x:@strings.replace
               .:[[displayed-columns]]
               get-value:x:@.substitutions/*/displayed-columns


            /*
             * Appending our actual form controls into our TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[form-control-declarations]]
               get-value:x:@.substitutions/*/form-controls


            /*
             * Appending our actual control instantiations into our TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[form-control-instantiations]]
               get-value:x:@.substitutions/*/form-controls-instantiations


            /*
             * Appending our HTTP client service GET method name into TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[service-get-method]]
               get-value:x:@.lambda/@.dp/#/*/verbs/*/get/*/service-method-name


            /*
             * Appending our HTTP client service DELETE method name into TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[service-delete-method]]
               get-value:x:@.lambda/@.dp/#/*/verbs/*/delete/*/service-method-name


            /*
             * Appending our HTTP client service POST method name into TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[service-create-method]]
               get-value:x:@.lambda/@.dp/#/*/verbs/*/post/*/service-method-name


            /*
             * Appending our HTTP client service PUT method name into TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[service-update-method]]
               get-value:x:@.lambda/@.dp/#/*/verbs/*/put/*/service-method-name


            /*
             * Appending our HTTP client service COUNT method name into TypeScript file.
             */
            strings.replace:x:@strings.replace
               .:[[service-count-method]]
               get-value:x:@.lambda/@.dp/#/*/count-method


            /*
             * Buffer to hold component's content.
             */
            unwrap:x:+
            .content:x:@strings.replace


            /*
             * Adding finished component to [.components] node, that is
             * returned to caller after file is done evaluating.
             */
            unwrap:x:+/+/*/*
            unwrap:x:+/*/*/*
            add:x:@.components
               .
                  :x:@.filename
                     :x:@.content


/*
 * Returns results to caller.
 */
slots.return-nodes:x:@.components/*
