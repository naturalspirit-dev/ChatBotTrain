
/*
 * Generates an Angular frontend for you.
 */
.description:"Generates an Angular frontend client side according to the given arguments. The frontend will have one datagrid component and router link/navbar menu item for each CRUD read endpoint in your backend endpoints."






/*
 * Doing some logging.
 */
log.info:Angular default template creating an Angular frontend for you






/*
 * These two nodes will contain all template files.
 *
 * The [.main-files] will contain the main template files.
 * The [.component-files] will contain the "per component" files, and
 * will be duplicated once for each component that is dynamically created.
 * The [.sql-components-files] will contain the "per component" files for each
 * endpoint being of type "crud-sql".
 *
 * The latter will be used as the basis for creating one component for each
 * CRUD "read" endpoint specified by caller.
 */
.main-files
.component-files
.sql-component-files






/*
 * Loads all files in "main" Angular template folder recursively.
 */
add:x:@.main-files
   slots.signal:magic.io.files.load-recursively
      strings.concat
         .:/misc/templates/angular-default/templates/main/






/*
 * Loads all files in "component" Angular template folder recursively.
 */
add:x:@.component-files
   slots.signal:magic.io.files.load-recursively
      strings.concat
         .:/misc/templates/angular-default/templates/component/






/*
 * Loads all files in "sql-component" Angular template folder recursively.
 */
add:x:@.sql-component-files
   slots.signal:magic.io.files.load-recursively
      strings.concat
         .:/misc/templates/angular-default/templates/sql-component/






/*
 * Removing "root" parts of our folder names in [.main-files], to make a
 * more friendly folder structure that we return to caller.
 */
for-each:x:@.main-files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:misc/templates/angular-default/templates/main
         get-value:x:@.arguments/*/name






/*
 * Replacing component filenames such that we can keep them
 * slightly more semantically correct before starting transformation process.
 */
for-each:x:@.component-files/*
   strings.replace:x:@.dp/#
      .:component.
      .:[[component-filename]].
   strings.replace:x:@strings.replace
      strings.concat
         .:/misc/templates/angular-default/templates/component/
      .:/[[component-folder]]/
   set-value:x:@.dp/#
      get-value:x:@strings.replace






/*
 * Creating our HTTP Client service method implementations,
 * by invoking a helper file responsible for parsing arguments,
 * and creating our TypeScript HTTP client methods accordingly.
 */
.http-service-methods
add:x:+/*
   get-nodes:x:@.arguments/*
set-value:x:@.http-service-methods
   io.files.execute:/misc/templates/angular-default/generator/generate-service-methods.hl






/*
 * Transforming our CRUD methods, such that they become slightly more readable, and doing
 * some common parsing, such as figuring out filenames, folder names, etc for each component.
 *
 * This is later used to generate our components, since we create one component for each
 * CRUD type of endpoint that we were given as input.
 */
.crud-methods
add:x:+/*
   get-nodes:x:@.arguments/*
add:x:@.crud-methods
   io.files.execute:/misc/templates/angular-default/generator/generate-http-crud-methods.hl






/*
 * Loading router link file, that contains the declaration for
 * our router links.
 */
.router-link-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/misc/router-link.html






/*
 * Loading import file, that contains the import declarations for components.
 */
.imports-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/misc/import.ts
.imports-file-only-grid
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/misc/import-only-grid.ts






/*
 * Loading router declaration file.
 */
.router-declaration-file
set-value:x:-
   io.files.load:/misc/templates/angular-default/templates/misc/router-declaration.ts






/*
 * Building our CRUD components.
 */
.components
add:x:+/+/*
   get-nodes:x:@.component-files
add:x:+/*
   get-nodes:x:@.crud-methods
add:x:@.components
   io.files.execute:/misc/templates/angular-default/generator/generate-components.hl






/*
 * Retrieving import statements/router declarations,
 * and such for each component we have.
 */
.imports
.imports-only-main
.routes
.module-declarations
.entry-components
.router-links
for-each:x:@.crud-methods/*


   /*
    * Verifying all verbs exists for CRUD method.
    */
   if
      and
         exists:x:@.dp/#/*/verbs/*/get
         exists:x:@.dp/#/*/verbs/*/delete
         exists:x:@.dp/#/*/verbs/*/post
         exists:x:@.dp/#/*/verbs/*/put
      .lambda


         /*
          * Import declarations.
          */
         strings.replace:x:@.imports-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         strings.replace:x:-
            .:[[component-edit-name]]
            get-value:x:@.dp/#/*/component-edit-name
         strings.replace:x:-
            .:[[component-edit-filename]]
            get-value:x:@.dp/#/*/component-edit-filename
         set-value:x:@.imports
            strings.concat
               get-value:x:@.imports
               get-value:x:@strings.replace


         /*
          * Import declarations (only main component imports).
          */
         strings.replace:x:@.imports-file-only-grid
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         set-value:x:@.imports-only-main
            strings.concat
               get-value:x:@.imports-only-main
               get-value:x:@strings.replace


         /*
          * Router declarations.
          */
         strings.replace:x:@.router-declaration-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[router-url]]
            get-value:x:@.dp/#/*/component-routing-url
         set-value:x:@.routes
            strings.concat
               get-value:x:@.routes
               get-value:x:@strings.replace


         /*
          * Figuring out roles user must belong to in order to invoke "crud-read" endpoint.
          */
         .read-roles
         for-each:x:@.dp/#/*/verbs/*/get/*/auth/*
            set-value:x:@.read-roles
               strings.concat
                  get-value:x:@.read-roles
                  .:", '"
                  get-value:x:@.dp/#
                  .:"'"
         strings.trim:x:@.read-roles
            .:", "


         /*
          * Router links.
          */
         strings.replace:x:@.router-link-file
            .:[[read-roles]]
            get-value:x:@strings.trim
         strings.replace:x:@strings.replace
            .:[[url]]
            get-value:x:@.dp/#/*/component-routing-url
         strings.replace:x:@strings.replace
            .:[[name]]
            get-value:x:@.dp/#/*/component-header
         set-value:x:@.router-links
            strings.concat
               get-value:x:@.router-links
               get-value:x:@strings.replace


         /*
          * Module declarations.
          */
         set-value:x:@.module-declarations
            strings.concat
               get-value:x:@.module-declarations
               .:"    "
               get-value:x:@.dp/#/*/component-name
               .:",\r\n"
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:",\r\n"


         /*
          * Adding entry components, which basically is the Edit modal windows
          * for each component we have.
          */
         set-value:x:@.entry-components
            strings.concat
               get-value:x:@.entry-components
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:",\r\n"






/*
 * Running through "crud-statistics" types of endpoints.
 */
.sql-components
for-each:x:@.arguments/*/endpoints/*/*/type/=crud-statistics/.


   /*
    * Verifying it's a GET endpoint, and that it takes no arguments.
    */
   if
      and
         eq
            get-value:x:@.dp/#/*/verb
            .:get
         not
            exists:x:@.dp/#/*/input/*
      .lambda


         /*
          * This is a Custom SQL endpoint, its verb is GET,
          * and it does not require input arguments.
          *
          * Iterating through each component file, and transforming it according to arguments.
          */
         .component-url
         .component-name
         .component-header
         .component-filename
         .component-selector
         .component-service-get-method
         .component-folder
         .read-roles


         /*
          * Replacing [[component-header]]
          */
         strings.split:x:@.dp/#/*/path
            .:/
         set-value:x:@.component-url
            get-value:x:@strings.split/0/-
         set-value:x:@.component-folder
            get-value:x:@strings.split/0/-
         strings.capitalize:x:@strings.split/0/-
         set-value:x:@.component-name
            strings.concat
               .:Component
               strings.replace-not-of:x:@strings.capitalize
                  .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
                  .:_
         set-value:x:@.component-header
            get-value:x:@strings.capitalize
         set-value:x:@.component-filename
            strings.concat
               get-value:x:@strings.split/0/-
               .:.component
         set-value:x:@.component-selector
            strings.concat
               .:app-
               get-value:x:@strings.split/0/-
         set-value:x:@.component-service-get-method
            strings.concat
               strings.replace-not-of:x:@strings.split/0/-
                  .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
                  .:_
               .:_Get


         /*
          * Figuring out roles needed to evaluate endpoint.
          */
         for-each:x:@.dp/#/*/auth/*
            set-value:x:@.read-roles
               strings.concat
                  get-value:x:@.read-roles
                  .:", '"
                  get-value:x:@.dp/#
                  .:"'"
         set-value:x:@.read-roles
            strings.trim:x:@.read-roles
               .:", "


         /*
          * Iterating through each component template file.
          */
         for-each:x:@.sql-component-files/*


            /*
             * Doing actual substitutions in component's template files.
             */
            set-value:x:@.dp/#/*
               strings.replace:x:@.dp/#/*
                  .:[[component-header]]
                  get-value:x:@.component-header
            set-value:x:@.dp/#/*
               strings.replace:x:@.dp/#/*
                  .:[[component-filename]]
                  get-value:x:@.component-filename
            set-value:x:@.dp/#/*
               strings.replace:x:@.dp/#/*
                  .:[[component-selector]]
                  get-value:x:@.component-selector
            set-value:x:@.dp/#/*
               strings.replace:x:@.dp/#/*
                  .:[[component-name]]
                  get-value:x:@.component-name
            set-value:x:@.dp/#/*
               strings.replace:x:@.dp/#/*
                  .:[[service-get-method]]
                  get-value:x:@.component-service-get-method


            /*
             * Changing root filename of component.
             */
            strings.split:x:@.dp/#
               .:/
            strings.split:x:-/0/-
               .:.
            set-value:x:@.dp/#
               strings.concat
                  get-value:x:@strings.split/@strings.split/@strings.split/0/-
                  .:/
                  get-value:x:@strings.split/@strings.split/@strings.split/0/-
                  .:.component.
                  get-value:x:@strings.split/0/-


            /*
             * Adding transformed file to [.sql-components].
             */
            add:x:@.sql-components
               get-nodes:x:@.dp/#


         /*
          * Import declarations for statistics component.
          */
         strings.replace:x:@.imports-file-only-grid
            .:[[component-name]]
            get-value:x:@.component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.component-filename
         set-value:x:@.imports
            strings.concat
               get-value:x:@.imports
               get-value:x:@strings.replace
         set-value:x:@.imports-only-main
            strings.concat
               get-value:x:@.imports-only-main
               get-value:x:@strings.replace


         /*
          * Router declarations.
          */
         strings.replace:x:@.router-declaration-file
            .:[[component-name]]
            get-value:x:@.component-name
         strings.replace:x:-
            .:[[router-url]]
            get-value:x:@.component-url
         set-value:x:@.routes
            strings.concat
               get-value:x:@.routes
               get-value:x:@strings.replace


         /*
          * Module declarations.
          */
         set-value:x:@.module-declarations
            strings.concat
               get-value:x:@.module-declarations
               .:"    "
               get-value:x:@.component-name
               .:",\r\n"


         /*
          * Router links.
          */
         strings.replace:x:@.router-link-file
            .:[[read-roles]]
            .:x:@.read-roles
         strings.replace:x:@strings.replace
            .:[[url]]
            get-value:x:@.component-url
         strings.replace:x:@strings.replace
            .:[[name]]
            get-value:x:@.component-header
         set-value:x:@.router-links
            strings.concat
               get-value:x:@.router-links
               get-value:x:@strings.replace






/*
 * Replacing any [[imports]], [[imports-only-main]], [[routes]],
 * etc in any of our main files.
 */
for-each:x:@.main-files/*


   /*
    * Replacing [[router-links]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[router-links]]
         get-value:x:@.router-links


   /*
    * Replacing [[imports]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports]]
         get-value:x:@.imports


   /*
    * Replacing [[imports-only-main]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports-only-main]]
         get-value:x:@.imports-only-main


   /*
    * Replacing [[routes]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[routes]]
         get-value:x:@.routes


   /*
    * Replacing [[module-declarations]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[module-declarations]]
         get-value:x:@.module-declarations


   /*
    * Replacing [[entry-components]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[entry-components]]
         get-value:x:@.entry-components






/*
 * Making sure we position our components correctly inside of our zip file.
 */
for-each:x:@.components/*
   set-value:x:@.dp/#
      strings.concat
         .:/
         get-value:x:@.arguments/*/name
         .:/src/app/components/
         get-value:x:@.dp/#






/*
 * Making sure we position our SQL statistics components correctly
 * inside of our zip file.
 */
for-each:x:@.sql-components/*
   set-value:x:@.dp/#
      strings.concat
         .:/
         get-value:x:@.arguments/*/name
         .:/src/app/components/
         get-value:x:@.dp/#






/*
 * Iterating through each [.main-files] and doing substitutions
 * according to specifications and META data.
 *
 * Notice, this is not completely optimal approach, since according to the
 * way our template files are looking, we could further have optimised things slightly.
 * However, to accommodate for future changes, such as for instance having the
 * name of the app in *any* file we wish, we do things this way, to make sure
 * we have a substitution process that is as flexible and generic as we possibly can.
 */
for-each:x:@.main-files/*/*


   /*
    * Replacing all [[name]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[name]]
         get-value:x:@.arguments/*/name


   /*
    * Replacing all [[apiUrl]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[apiUrl]]
         get-value:x:@.arguments/*/apiUrl


   /*
    * Replacing all [[environmentDomain]] occurrencies.
    */
   strings.split:x:@.arguments/*/apiUrl
      .:"://"
   strings.split:x:-/1
      .:/
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[environmentDomain]]
         get-value:x:@strings.split/0


   /*
    * Replacing all [[http-client-service-method-implementations]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[http-client-service-method-implementations]]
         get-value:x:@.http-service-methods






/*
 * Adding all generated files to return value.
 */
add:x:../*/slots.return-nodes
   get-nodes:x:@.main-files/*
add:x:../*/slots.return-nodes
   get-nodes:x:@.components/*
add:x:../*/slots.return-nodes
   get-nodes:x:@.sql-components/*






/*
 * Applying copyright, if given.
 */
if
   and
      not
         eq
            get-value:x:@.arguments/*/copyright
            .:
      not
         eq
            get-value:x:@.arguments/*/copyright
            .
   .lambda


      /*
       * Copyright notice was supplied.
       */
      for-each:x:../*/slots.return-nodes/*
         if
            or
               strings.ends-with:x:@.dp/#
                  .:.ts
               strings.ends-with:x:@.dp/#
                  .:.js
               strings.ends-with:x:@.dp/#
                  .:.css
               strings.ends-with:x:@.dp/#
                  .:.scss
               strings.ends-with:x:@.dp/#
                  .:.sass
            .lambda


               /*
                * Currently iterated file is of a type that can tolerate
                * having a copyright header comment.
                */
               set-value:x:@.dp/#/*
                  strings.concat
                     .:"/*\r\n"
                     .:" * "
                     get-value:x:@.arguments/*/copyright
                     .:"\r\n */\r\n\r\n"
                     get-value:x:@.dp/#/*






/*
 * Returning all generated files to caller.
 */
slots.return-nodes
